"```json\n{\n  \"Coding Problem\": \"Polycarp remembered the $2020$-th year, and he is happy with the arrival of the new $2021$-th year. To remember such a wonderful moment, Polycarp wants to represent the number $n$ as the sum of a certain number of $2020$ and a certain number of $2021$.\\n\\nFor example, if:\\n\\n$n=4041$, then the number $n$ can be represented as the sum $2020 + 2021$;\\n\\n$n=4042$, then the number $n$ can be represented as the sum $2021 + 2021$;\\n\\n$n=8081$, then the number $n$ can be represented as the sum $2020 + 2020 + 2020 + 2021$;\\n\\n$n=8079$, then the number $n$ cannot be represented as the sum of the numbers $2020$ and $2021$.\\n\\nHelp Polycarp to find out whether the number $n$ can be represented as the sum of a certain number of numbers $2020$ and a certain number of numbers $2021$.\\n\\n\\n-----Input-----\\n\\nThe first line contains one integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\\n\\nEach test case contains one integer $n$ ($1 \\leq n \\leq 10^6$) \u2014 the number that Polycarp wants to represent as the sum of the numbers $2020$ and $2021$.\\n\\n\\n-----Output-----\\n\\nFor each test case, output on a separate line:\\n\\n\\\"YES\\\" if the number $n$ is representable as the sum of a certain number of $2020$ and a certain number of $2021$;\\n\\n\\\"NO\\\" otherwise.\\n\\nYou can output \\\"YES\\\" and \\\"NO\\\" in any case (for example, the strings yEs, yes, Yes and YES will be recognized as positive).\\n\\n\\n-----Examples-----\\n\\nInput\\n5\\n1\\n4041\\n4042\\n8081\\n8079\\nOutput\\nNO\\nYES\\nYES\\nYES\\nNO\\n\\n\\n-----Note-----\\n\\nNone\",\n  \"Ground Truth Solution\": \"from sys import stdin, stdout\\nfrom collections import *\\nfrom math import gcd, floor, ceil\\n\\ndef st():\\n\\treturn list(stdin.readline().strip())\\n\\ndef li():\\n\\treturn list(map(int, stdin.readline().split()))\\n\\ndef mp():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef inp():\\n\\treturn int(stdin.readline())\\n\\ndef pr(n):\\n\\treturn stdout.write(str(n) + '\\\\n')\\nmod = 1000000007\\nINF = float('inf')\\n\\ndef solve():\\n\\tn = inp()\\n\\tif n % 2020 <= n // 2020:\\n\\t\\tpr('YES')\\n\\telse:\\n\\t\\tpr('NO')\\nfor _ in range(inp()):\\n\\tsolve()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks us to determine if a given number `n` can be represented as the sum of 2020s and 2021s.\\n- Formulating a Strategy: We can approach this by trying to represent `n` as `x * 2020 + y * 2021`. If such non-negative integers `x` and `y` exist, the answer is \\\"YES\\\", otherwise, it's \\\"NO\\\". We can iterate through possible values of `x` (the number of 2020s) and check if the remaining value can be represented by 2021s.\\n- Optimizing the Approach:  Let's say we use 'a' number of 2020 and 'b' number of 2021 to form n.  So n = a*2020 + b*2021 = a*2020 + b*(2020+1) = (a+b)*2020 + b. So, the remainder of n when divided by 2020 should be less than or equal to the quotient of n when divided by 2020.  This reduces the computation.\\n- Implementation Details: Read the number of test cases `t`. For each test case, read the number `n` and apply the above strategy to determine whether it can be represented as required, outputting \\\"YES\\\" or \\\"NO\\\" accordingly.\",\n  \"LLM Questions\": [\n    \"What is the core problem asking, and what constitutes a 'YES' or 'NO' answer?\",\n    \"Given a number `n`, how can we mathematically express the condition that `n` can be represented as a sum of 2020s and 2021s?\",\n    \"Can you describe an efficient approach to check if such a representation exists without brute-forcing?\",\n    \"What is an important observation about the relationship between the remainder and the quotient when `n` is divided by 2020, which determines if `n` can be represented in the desired form?\",\n    \"How would you translate this observation into a condition in your code that outputs either 'YES' or 'NO'?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The problem asks whether a given number `n` can be expressed as the sum of a certain number of 2020s and 2021s. A 'YES' answer means it can, and a 'NO' answer means it cannot.\",\n    \"`n` can be represented as `x * 2020 + y * 2021`, where `x` and `y` are non-negative integers.\",\n    \"Instead of brute-forcing values of `x` and `y`, we can use the observation that if we write n = a*2020 + b*2021, then the remainder when n is divided by 2020 is at most b, and hence should be less than or equal to the quotient a+b.\",\n    \"The remainder of `n` when divided by 2020 should be less than or equal to the quotient of `n` when divided by 2020.\",\n    \"If `n % 2020 <= n // 2020`, then output 'YES'; otherwise, output 'NO'.\"\n  ]\n}\n```"