"```json\n{\n  \"Coding Problem\": \"Takahashi and Aoki will play a game. They will repeatedly play it until one of them have N wins in total.\\n\\nWhen they play the game once, Takahashi wins with probability A %, Aoki wins with probability B %, and the game ends in a draw (that is, nobody wins) with probability C %. Find the expected number of games that will be played, and print it as follows.\\n\\nWe can represent the expected value as P/Q with coprime integers P and Q. Print the integer R between 0 and 10^9+6 (inclusive) such that R \\\\times Q \\\\equiv P\\\\pmod {10^9+7}. (Such an integer R always uniquely exists under the constraints of this problem.)\\n\\nConstraints\\n\\n* 1 \\\\leq N \\\\leq 100000\\n* 0 \\\\leq A,B,C \\\\leq 100\\n* 1 \\\\leq A+B\\n* A+B+C=100\\n* All values in input are integers.\\n\\nInput\\n\\nInput is given from Standard Input in the following format:\\n\\n\\nN A B C\\n\\n\\nOutput\\n\\nPrint the expected number of games that will be played, in the manner specified in the statement.\\n\\nExamples\\n\\nInput\\n\\n1 25 25 50\\n\\n\\nOutput\\n\\n2\\n\\n\\nInput\\n\\n4 50 50 0\\n\\n\\nOutput\\n\\n312500008\\n\\n\\nInput\\n\\n1 100 0 0\\n\\n\\nOutput\\n\\n1\\n\\n\\nInput\\n\\n100000 31 41 28\\n\\n\\nOutput\\n\\n104136146\",\n  \"Ground Truth Solution\": \"M = 10 ** 9 + 7\\n(N, A, B, C) = map(int, input().split())\\nf = [1]\\nfor i in range(1, 2 * N):\\n\\tf.append(f[-1] * i % M)\\nt = pow(A + B, M - 2, M)\\nA *= t\\nB *= t\\na = pow(A, N, M)\\nb = pow(B, N, M)\\nz = 0\\nfor i in range(N):\\n\\tz += (N + i) * 100 * pow(100 - C, M - 2, M) * f[N + i - 1] * pow(f[N - 1] * f[i], M - 2, M) * (a + b)\\n\\tz %= M\\n\\ta = a * B % M\\n\\tb = b * A % M\\nprint(z)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Requirements: Recognize the core task: calculating the expected number of games until either Takahashi or Aoki wins N games. Grasp the probabilistic nature of each game's outcome (Takahashi win, Aoki win, or draw).\\n- Modular Arithmetic Consideration: The problem requires outputting the result modulo 10^9 + 7, so all calculations should be performed modulo this number to prevent overflow and ensure the result is within the specified range.\\n- Handling Draws: Consider that draws do not contribute to either player's win count, prolonging the game. The probability of a draw (C%) needs to be properly addressed in the expected value calculation.\\n- Identifying the Mathematical Structure: Determine that the problem involves calculating an expected value, which typically requires summing the products of each possible outcome and its probability. The challenge lies in handling the sequential nature of games until one player wins N times.\\n- Optimizing Calculations: Implement efficient methods for modular exponentiation (pow(base, exponent, modulus)) and modular inverse (pow(number, modulus - 2, modulus)) to avoid brute-force calculations. Using precomputed factorials to optimize combinations.\\n- Edge Cases/Constraints: Consider any specific edge cases. The constraint A+B >= 1 ensures that the game will eventually end.\\n- Translating to Code: Implementing the formula for the expected value by iterating over possible scenarios and using the modular arithmetic operations.\\n\",\n  \"LLM Questions\": [\n    \"How do you handle the modular arithmetic to avoid integer overflow and ensure the answer is within the correct range?\",\n    \"How do draws impact the expected number of games, and how should their probability be incorporated into the calculation?\",\n    \"What is the overall strategy for calculating the expected number of games given the probabilities of Takahashi and Aoki winning?\",\n    \"How do you calculate the modular inverse and why is it needed in this problem?\",\n    \"What is the significance of precomputing factorials, and how do they optimize the solution?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Perform all arithmetic operations modulo 10^9 + 7. Use the modular exponentiation and modular inverse to avoid overflow and stay within the range.\",\n    \"Draws prolong the game and do not contribute to either player's wins. The probability of draws should be used to adjust the probabilities of Takahashi and Aoki winning so that they are conditional probabilities given that it is not a draw.\",\n    \"The strategy involves considering all possible scenarios until one player wins N games. Each scenario has an associated probability, and the expected number of games is the sum of the number of games in each scenario multiplied by its probability. The probabilities should be adjusted to account for the draws.\",\n    \"Modular inverse is used to perform division in modular arithmetic. It's needed to calculate inverse of a number modulo (10^9+7). It can be found by using Fermat's Little Theorem: a^(p-2) mod p, where p is prime.\",\n    \"Precomputing factorials and their modular inverses speeds up the calculation of combinations, reducing the computational complexity, especially when dealing with large values of N.\"\n  ]\n}\n```"