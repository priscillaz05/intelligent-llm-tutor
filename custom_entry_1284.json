"```json\n{\n  \"Coding Problem\": \"Little Jhool is an addict. No, unlike the usual drug addicts, he's an addict of the good kind: the shopping addict. Some of his friends also call him a shopaholic, though he tries his level best to deny the title given to him by his friends. Now, he has some favorite websites as we already have seen in another question from where he always likes to buy things.\\n\\nAnyway. As we already know, girls are crazy for Jhool and would do anything to be with him. It's no different this time. Little Jhool has n girlfriends, and every one of them wants to go e-shopping with him. Every single girl has a list with her which has Xi number of items to be bought. Jhool himself has n different lists to go shopping with every girlfriend - each list having some specific number of things to be bought. There are (n+n=2n) number of lists. So, the number of lists is always going to be even.\\n\\nNow, Jhool does NOT want to upset his girlfriends! (Obviously!) So, he comes up with a devious plan to save the trouble. What he does is this: \\nHe takes all the n lists of items his girlfriends need to purchase, and his n lists and mixes all of them up and randomly gives everyone a list.\\nNow, no one can recognize their original list. Since the objective was spending time with each other, no one even cares. \\nConsider the scenario that it takes one unit of time to get one item from any list. \\nNow, if Little Jhool picks up a list with 12 items, for instance and pairs himself with a girl with 8 items: the total amount they'll spend together would be: (12 + 8 = 20 units of time!)\\n\\nIf a girl gets to spend more time with Jhool, she'll be happy, and the ones who wouldn't get much time would obviously be pissed. And Jhool doesn't want that to happen. So, he wants to pair up all the lists in such a way that the difference between the girl he's going to spend the maximum time with, and the girl he's going to spend the minimum time with is minimized!\\n\\nWe are also given a constant factor, k, if the minimum value is greater than this constant, his girlfriends would leave him, figuring out the bluff. If k would be equal to the minimum value, he would be just saved. And if it would be less, he would remain the magnet he is!\\n\\nPS: We apologize on behalf of Little Jhool. We know that he has a bad habit of landing himself in a fix all the time. Just help him this one last time, come on!\\n\\nInput format: \\nThe first line contains the number of test cases. The first line of the test cases contains two integers: 2n and k, which is followed by a vector representing all the 2n lists.\\n\\nOutput format: \\nPrint the minimum difference possible by pairing different lists. Also, print:  \\n -  No more girlfriends! when ans > k.  \\n -  Lucky chap! when ans == k.  \\n -  Chick magnet Jhool! when ans < k.    \\n\\nConstraints: \\n1 \u2264 Test Cases \u2264 50  \\n2 \u2264 2n \u2264 10^6    - No. of lists.  \\n1 \u2264 Xi \u2264 10^6 - No. of items in a list.  \\n0 \u2264 k \u2264 10^6\\n\\nSAMPLE INPUT\\n3\\n2 1\\n4 2\\n6 4\\n1 6 6 7 1 8\\n4 0\\n2 6 4 3\\n\\nSAMPLE OUTPUT\\n0\\nChick magnet Jhool!\\n4\\nLucky chap!\\n1\\nNo more girlfriends!\\n\\nExplanation\\n\\nIn the first case, since there will be only one pair, the minimum would be 0, which is less than the value of k. In the second test case, the value of k == 4, minimum value would be: [(8+1), (7+1), (6+6)] so, 12-8 == 4 which is equal to k. In the third case, k is greater than the answer, which is 1. [(6+2), (4+3)] -> [8-7] -> 1.\",\n  \"Ground Truth Solution\": \"for t in range(int(eval(input()))):\\n\\tn,k=list(map(int,input().split()))\\n\\tl=list(map(int,input().split()))\\n\\tnl=[]\\n\\ttt=0\\n\\t#print n,k\\n\\tl.sort()\\n\\t#print l\\n\\tif n<=2:\\n\\t\\ttt=0\\n\\telse:\\n\\t\\tif len(l)%2==0:\\n\\t\\t\\ti=0\\n\\t\\t\\tj=len(l)-1\\n\\t\\t\\twhile i<j:\\n\\t\\t\\t\\tnl.append(l[i]+l[j])\\n\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\tj-=1 \\n\\t\\ttt= max(nl)-min(nl)\\n\\tprint(tt)\\n\\tif tt==k:\\n\\t\\tprint(\\\"Lucky chap!\\\")\\n\\telif tt<k:\\n\\t\\tprint(\\\"Chick magnet Jhool!\\\")\\n\\telse:\\n\\t\\tprint(\\\"No more girlfriends!\\\")\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires minimizing the difference between the maximum and minimum sum of paired lists, where one list is from Jhool's girlfriends and the other is from Jhool himself. The lists are mixed randomly, so pairing needs to be optimized. The result needs to be compared with a constant k to output a specific message.\\n- Identifying Constraints: The number of lists is always even.  We must find an efficient way to pair lists such that the difference between the maximum and minimum pair sums is minimized.\\n- Algorithmic Strategy: The key is to sort the lists and pair the smallest with the largest, the second smallest with the second largest, and so on. This strategy ensures that the range of possible sums is minimized.\\n- Implementation Details: Sort the input list. Calculate the sums of pairs. Find the difference between the maximum and minimum sums. Compare this difference with k and print the appropriate message.\",\n  \"LLM Questions\": [\n    \"How can you minimize the difference between the maximum and minimum time spent by any two girlfriends?\",\n    \"Why is sorting the lists a crucial step in the solution?\",\n    \"What are the possible relationships between the minimized difference and the constant 'k'?\",\n    \"How do you handle the I/O format specified in the problem?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"To minimize the difference, pair the shortest list with the longest, the second shortest with the second longest, and so on. This distributes the time as evenly as possible.\",\n    \"Sorting is crucial because it allows us to systematically pair the smallest values with the largest values, thereby minimizing the overall range of the paired sums.\",\n    \"The minimized difference can be greater than k (No more girlfriends!), equal to k (Lucky chap!), or less than k (Chick magnet Jhool!). Each condition requires a different output message.\",\n    \"The input includes multiple test cases. For each test case, you need to read the number of lists (2n), the constant k, and the list of item counts. The output should print the minimized difference followed by the appropriate message based on the comparison with k.\"\n  ]\n}\n```"