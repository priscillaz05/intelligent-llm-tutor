"```json\n{\n  \"Coding Problem\": \"You are given a sequence a1, a2, ..., an consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\\n\\nSorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\\n\\nEvery element of the sequence must appear in exactly one subsequence.\\n\\nInput\\n\\nThe first line of input data contains integer n (1 \u2264 n \u2264 105) \u2014 the length of the sequence.\\n\\nThe second line of input data contains n different integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109) \u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\\n\\nOutput\\n\\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\\n\\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence ci (0 < ci \u2264 n), then ci integers l1, l2, ..., lci (1 \u2264 lj \u2264 n) \u2014 indices of these elements in the original sequence. \\n\\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\\n\\nIf there are several possible answers, print any of them.\\n\\nExamples\\n\\nInput\\n\\n6\\n3 2 1 6 5 4\\n\\n\\nOutput\\n\\n4\\n2 1 3\\n1 2\\n2 4 6\\n1 5\\n\\n\\nInput\\n\\n6\\n83 -75 -49 11 37 62\\n\\n\\nOutput\\n\\n1\\n6 1 2 3 4 5 6\\n\\nNote\\n\\nIn the first sample output:\\n\\nAfter sorting the first subsequence we will get sequence 1 2 3 6 5 4.\\n\\nSorting the second subsequence changes nothing.\\n\\nAfter sorting the third subsequence we will get sequence 1 2 3 4 5 6.\\n\\nSorting the last subsequence changes nothing.\",\n  \"Ground Truth Solution\": \"n = int(input())\\na = list(map(int, input().split()))\\na = sorted(range(n), key=lambda i: a[i])\\ns = []\\nfor i in range(n):\\n\\tif a[i] + 1:\\n\\t\\tl = []\\n\\t\\ts.append(l)\\n\\t\\twhile a[i] + 1:\\n\\t\\t\\tl.append(i + 1)\\n\\t\\t\\t(a[i], i) = (-1, a[i])\\nprint(len(s))\\nfor l in s:\\n\\tprint(len(l), *l)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the problem: The problem requires splitting a sequence of distinct integers into the maximum number of subsequences such that sorting each subsequence individually results in the entire sequence being sorted.\\n- Algorithmic Strategy: The core idea is to identify cycles in the permutation that maps the original sequence to the sorted sequence. Each cycle can form a subsequence.  The indices within each cycle represent the indices of the original sequence that need to be sorted together.\\n- Implementation Details: First, read the input sequence and create a sorted index array based on the values in the input sequence. This sorted index array effectively represents the permutation needed to sort the input. Then, iterate through this index array to identify cycles.  Each cycle will form a subsequence. For each element in the sorted index array that hasn't been visited, start a new cycle. Follow the permutation until you return to the starting element. The indices encountered form the subsequence.\\n- Output Format: Print the number of subsequences, and then for each subsequence, print its length followed by the indices of the elements in the subsequence.\",\n  \"LLM Questions\": [\n    \"What is a subsequence in this context, and how does sorting it affect the original sequence?\",\n    \"How can we identify which elements need to be grouped into the same subsequence?\",\n    \"How does the concept of cycles relate to subsequences in this problem?\",\n    \"What is the significance of the sorted order of indices, and how is it constructed?\",\n    \"Could you explain how you track the visited elements to avoid redundant subsequences, and how cycles are identified?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A subsequence is a subset of elements from the original sequence. Sorting the subsequence means reordering these elements in increasing order while elements not in the subsequence remain unchanged.\",\n    \"Elements need to be grouped into the same subsequence if they are part of a cycle required to sort the overall sequence.\",\n    \"Each cycle in the permutation corresponds to a subsequence because sorting the elements at the indices in the cycle will put those elements in their correct sorted positions.\",\n    \"The sorted order of indices maps each element in the original sequence to its position in the sorted sequence. It allows us to trace cycles and construct the necessary subsequences.\",\n    \"By marking visited elements in the sorted index array (using a negative value), we ensure each element belongs to only one subsequence and that cycles are correctly traced. A cycle is identified when following the index permutation leads back to the starting index. We change the value at the visited index to a negative number to show that it's been assigned a sequence.\"\n  ]\n}\n```"