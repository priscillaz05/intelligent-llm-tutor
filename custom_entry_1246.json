"```json\n{\n  \"Coding Problem\": \"Implement `String#parse_mana_cost`, which parses [Magic: the Gathering mana costs](http://mtgsalvation.gamepedia.com/Mana_cost) expressed as a string and returns a `Hash` with keys being kinds of mana, and values being the numbers.\\n\\nDon't include any mana types equal to zero.\\n\\nFormat is:\\n\\n* optionally natural number representing total amount of generic mana (use key `*`)\\n* optionally followed by any combination of `w`, `u`, `b`, `r`, `g` (case insensitive in input, return lower case in output), each representing one mana of specific color.\\n\\nIf case of Strings not following specified format, return `nil/null/None`.\",\n  \"Ground Truth Solution\": \"import re\\n\\ndef parse_mana_cost(mana):\\n\\tn = {c: mana.lower().count(c) for c in 'wubrg' if mana.lower().count(c) > 0}\\n\\tm = re.split('\\\\D', mana)\\n\\tif sum(n.values()) + sum([len(c) for c in m]) != len(mana):\\n\\t\\treturn None\\n\\tp = sum([int(c) for c in m if c != ''])\\n\\tif p > 0:\\n\\t\\tn['*'] = p\\n\\treturn n\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires parsing a string representing a Magic: The Gathering mana cost and converting it into a dictionary (hash) where keys are mana types (w, u, b, r, g, or '*') and values are their counts. The input string may contain a generic mana cost (a number) followed by any combination of colored mana symbols.\\n- Handling Invalid Input: The function should return `None` if the input string does not follow the specified format.\\n- Parsing Logic: Extract the generic mana cost (if present) and the colored mana counts. Ensure that the sum of the lengths of extracted parts match the length of the input string to validate the format.\\n- Data Structures: Use a dictionary to store the counts of each mana type.\\n- Edge Cases: Consider empty input, input with only generic mana, and input with only colored mana.\",\n  \"LLM Questions\": [\n    \"What should the function return if the input string does not conform to the expected mana cost format?\",\n    \"How should the function handle case-insensitive input for colored mana symbols (w, u, b, r, g)?\",\n    \"How does the function differentiate and extract the generic mana cost from the colored mana symbols?\",\n    \"What data structure is most suitable for storing the mana counts, and why?\",\n    \"How can the function ensure that the extracted mana types are valid (only w, u, b, r, g, and generic mana)?\",\n    \"How to validate whether the string follows the described format or not?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The function should return `None`.\",\n    \"The function should convert the input string to lowercase before processing it.\",\n    \"The function should use regular expressions or string splitting to separate the numeric generic mana from the alphabetic colored mana symbols.\",\n    \"A dictionary (or hash map) is suitable because it allows storing key-value pairs, where keys are mana types and values are their respective counts.\",\n    \"The function should only increment the count for 'w', 'u', 'b', 'r', 'g', or '*'. Any other characters should be considered invalid, leading to returning `None`.\",\n    \"Check if the sum of mana values and length of generic mana substring (if exists) is equal to length of input string. If the equation fails, that means that input string has invalid format.\"\n  ]\n}\n```"