"```json\n{\n  \"Coding Problem\": \"In the world of DragonBool there are fierce warriors called Soints. Also there are even fiercer warriors called Sofloats \u2013 the mortal enemies of Soints.\\n\\nThe power of each warrior is determined by the amount of chakra he possesses which is some positive integer. Warriors with zero level of chakra are dead warriors :) When the fight between Soint with power CI and Sofloat with power CF occurs the warrior with lower power will die and the winner will lose the amount of chakra that his enemy have possessed before the fight. So three cases are possible:\\n\\n- CI > CF. Then Sofloat will die while the new power of Soint will be CI \u2013 CF.\\n- CI < CF. Then Soint will die while the new power of Sofloat will be CF \u2013 CI.\\n- CI = CF. In this special case both warriors die.\\n\\nEach warrior (Soint or Sofloat) has his level of skills which is denoted by some positive integer. The fight between two warriors can occur only when these warriors are Soint and Sofloat of the same level. In particual, friendly fights are not allowed, i.e., a Soint cannot fight with another Soint and the same holds for Sofloats.\\n\\nLets follow the following convention to denote the warriors. A Soint of level L and power C will be denoted as (I, C, L), while Sofloat of level L and power C will be denoted as (F, C, L). Consider some examples. If A = (I, 50, 1) fights with B = (F, 20, 1), B dies and A becomes (I, 30, 1). On the other hand, (I, 50, 1) cannot fight with (F, 20, 2) as they have different levels.\\n\\nThere is a battle between Soints and Sofloats. There are N Soints and M Sofloats in all. The battle will consist of series of fights. As was mentioned above in each fight one Soint and one Sofloat of the same level take part and after the fight the warrior with lower power will die (or both will die if they have the same power). The battle proceeds as long as there exists at least one pair of warriors who can fight. The distribution of warriors by levels satisfies the following condition: for every Soint of level L there exists at least one Sofloat of the same level L and vice-versa. So if for some level L we have at least one warrior of this level then there is at least one Soint of level L and at least one Sofloat of level L.\\n\\nThere is a powerful wizard, whose name is SoChef, on the side of Soints. He can increase the amount of chakra of each Soint by any number. SoChef wants the army of Soints to win this battle. But increasing amount of chakra of any Soint by one costs him a lot of his magic power. Hence he wants to minimize the total amount of additional chakra he should give to Soints in order for them to win. Note, however, that the win here means that all Sofloats should be dead irregardless of whether any Soint is alive. Also note that the battle can proceed by different scenarios and the SoChef need to distribute additional chakra among the Soints in such a way that they will win for any possible battle scenario. Help SoChef and find the minimal amount of additional chakra he should give to Soints in order for them to win.\\n\\n-----Input-----\\n\\nThe first line of the input contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains two space separated integers N and M. Here N is the number of Soints  participating in the battle and M is the number of Sofloats  for the same. Each of the next N lines contains two space separated integers  Ci and  Li, the amount of chakra and level of i-th Soint correspondingly. The next M lines describe power and level of Sofloats participating in the battle in the same format.\\n\\n-----Output-----\\n\\nFor each test case output a single integer on a single line, the minimum amount of chakra SoChef should give to Soints in order for them to win the battle.\\n\\n-----Constraints-----\\nEach integer in the input file is positive and does not exceed 100. That is1 \u2264 T \u2264 100\\n1 \u2264 N \u2264 100\\n1 \u2264 M \u2264 100\\n1 \u2264 Ci \u2264 100\\n1 \u2264 Li \u2264 100\\n\\nFor every Soint of level L there exists at least one Sofloat of the same level L and vice-versa.\\nIt is guaranteed that each official test file will satisfy all these constraints. You DON'T need to verify them in your program.\\n\\n-----Example-----\\nInput:\\n2\\n2 3\\n10 1\\n20 2\\n5 2\\n5 2\\n18 1\\n5 5\\n73 87\\n69 13\\n36 36\\n77 46\\n43 93\\n49 46\\n74 93\\n78 87\\n99 13\\n59 36\\n\\nOutput:\\n8\\n89\\n\\n-----Explanation-----\\nCase 1.\\nThe warriors are I1 = (I, 10, 1), I2 = (I, 20, 2), F1 = (F, 5, 2), F2 = (F, 5, 2), F3 = (F, 18, 1). Without the SoChef help the battle can proceed as follows.\\n\\n- I2 fights with F1, F1 dies, I2 becomes (I, 15, 2).\\n- I2 fights with F2, F2 dies, I2 becomes (I, 10, 2).\\n- I1 fights with F3, I1 dies, F3 becomes (F, 8, 1).\\n\\nSo if SoChef will give 8 additional units of chakra to I1 the Soints will win the battle and even one Soint (I2) will left alive. Hence the answer is 8.\",\n  \"Ground Truth Solution\": \"t = eval(input())\\nfor i in range(0, t):\\n\\tx = input()\\n\\tnm = x.split(' ')\\n\\tnm[0] = int(nm[0])\\n\\tnm[1] = int(nm[1])\\n\\tcsoint = []\\n\\tlsoint = []\\n\\tcsofloat = []\\n\\tlsofloat = []\\n\\tfor j in range(0, nm[0]):\\n\\t\\ta = input()\\n\\t\\tb = a.split(' ')\\n\\t\\tb[0] = int(b[0])\\n\\t\\tb[1] = int(b[1])\\n\\t\\tcsoint.append(b[0])\\n\\t\\tlsoint.append(b[1])\\n\\tfor k in range(0, nm[1]):\\n\\t\\ta = input()\\n\\t\\tb = a.split(' ')\\n\\t\\tb[0] = int(b[0])\\n\\t\\tb[1] = int(b[1])\\n\\t\\tcsofloat.append(b[0])\\n\\t\\tlsofloat.append(b[1])\\n\\tchakra = 0\\n\\tl = min(lsoint) - 1\\n\\tci = []\\n\\tfor a in range(l + 1, max(lsoint) + 1):\\n\\t\\tc = 0\\n\\t\\tl += 1\\n\\t\\tif l not in lsoint:\\n\\t\\t\\tcontinue\\n\\t\\tfor j in range(0, nm[0]):\\n\\t\\t\\tif lsoint[j] == l:\\n\\t\\t\\t\\tc += csoint[j]\\n\\t\\tci.append(c)\\n\\tl = min(lsofloat) - 1\\n\\tcf = []\\n\\tfor a in range(l + 1, max(lsofloat) + 1):\\n\\t\\tc = 0\\n\\t\\tl += 1\\n\\t\\tif l not in lsofloat:\\n\\t\\t\\tcontinue\\n\\t\\tfor j in range(0, nm[1]):\\n\\t\\t\\tif lsofloat[j] == l:\\n\\t\\t\\t\\tc += csofloat[j]\\n\\t\\tcf.append(c)\\n\\tfor i in range(0, len(ci)):\\n\\t\\tif ci[i] < cf[i]:\\n\\t\\t\\tchakra += cf[i] - ci[i]\\n\\tprint(chakra)\",\n  \"LLM CoT Steps Breakdown\": \"- Problem Decomposition: The problem is a game-like scenario where Soints and Sofloats fight based on their chakra and level. The goal is to determine the minimum additional chakra needed for Soints to guarantee a win (all Sofloats are dead) in any possible fight scenario.\\n- Strategic Considerations: The core strategy is to ensure that for each level, the total chakra of Soints is greater than or equal to the total chakra of Sofloats at that level. This guarantees that Soints can always win, regardless of the order of fights.\\n- Algorithmic Approach: The code should first parse the input to separate Soints and Sofloats by their levels and chakra. Then, for each level, calculate the total chakra for Soints and Sofloats. If the total chakra of Soints is less than that of Sofloats at any level, the difference must be added to the total additional chakra needed.\\n- Implementation Details: Read input, store chakra and level information. Aggregate chakra by level for both Soints and Sofloats. Calculate the difference at each level (Sofloats - Soints) and sum the positive differences to get the minimum chakra SoChef needs to add.\",\n  \"LLM Questions\": [\n    \"How do you interpret the condition that the Soints must win in 'any possible battle scenario'?\",\n    \"Expected Answer: This means you cannot rely on a specific order of fights. You must ensure Soints have enough chakra to win regardless of which Sofloats they fight first.\",\n    \"Given that warriors can only fight if they are of the same level, how does this simplify the problem?\",\n    \"Expected Answer: This simplifies the problem because you can analyze each level independently. The battles at one level do not directly affect the battles at another level.\",\n    \"How do you aggregate the chakra for Soints and Sofloats at each level?\",\n    \"Expected Answer: You need to iterate through the list of Soints and Sofloats and sum their chakra values, grouping them by their level.\",\n    \"If, for a given level, the total chakra of Sofloats exceeds that of Soints, what do you need to do?\",\n    \"Expected Answer: You need to calculate the difference between the total chakra of Sofloats and Soints at that level. This difference represents the additional chakra needed for Soints to win at that level.\",\n    \"How do you calculate the final answer?\",\n    \"Expected Answer: Sum the differences (calculated in the previous step) across all levels. This sum represents the minimum total additional chakra SoChef must provide.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"This means you cannot rely on a specific order of fights. You must ensure Soints have enough chakra to win regardless of which Sofloats they fight first.\",\n    \"This simplifies the problem because you can analyze each level independently. The battles at one level do not directly affect the battles at another level.\",\n    \"You need to iterate through the list of Soints and Sofloats and sum their chakra values, grouping them by their level.\",\n    \"You need to calculate the difference between the total chakra of Sofloats and Soints at that level. This difference represents the additional chakra needed for Soints to win at that level.\",\n    \"Sum the differences (calculated in the previous step) across all levels. This sum represents the minimum total additional chakra SoChef must provide.\"\n  ]\n}\n```"