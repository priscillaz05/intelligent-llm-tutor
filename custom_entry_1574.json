"```json\n{\n  \"Coding Problem\": \"Iahub is a big fan of tourists. He wants to become a tourist himself, so he planned a trip. There are n destinations on a straight road that Iahub wants to visit. Iahub starts the excursion from kilometer 0. The n destinations are described by a non-negative integers sequence a_1, a_2, ..., a_{n}. The number a_{k} represents that the kth destination is at distance a_{k} kilometers from the starting point. No two destinations are located in the same place. \\n\\nIahub wants to visit each destination only once. Note that, crossing through a destination is not considered visiting, unless Iahub explicitly wants to visit it at that point. Also, after Iahub visits his last destination, he doesn't come back to kilometer 0, as he stops his trip at the last destination. \\n\\nThe distance between destination located at kilometer x and next destination, located at kilometer y, is |x - y| kilometers. We call a \\\"route\\\" an order of visiting the destinations. Iahub can visit destinations in any order he wants, as long as he visits all n destinations and he doesn't visit a destination more than once. \\n\\nIahub starts writing out on a paper all possible routes and for each of them, he notes the total distance he would walk. He's interested in the average number of kilometers he would walk by choosing a route. As he got bored of writing out all the routes, he asks you to help him.\\n\\n\\n-----Input-----\\n\\nThe first line contains integer n (2 \u2264 n \u2264 10^5). Next line contains n distinct integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^7).\\n\\n\\n-----Output-----\\n\\nOutput two integers \u2014 the numerator and denominator of a fraction which is equal to the wanted average number. The fraction must be irreducible.\\n\\n\\n-----Examples-----\\nInput\\n3\\n2 3 5\\n\\nOutput\\n22 3\\n\\n\\n-----Note-----\\n\\nConsider 6 possible routes:  [2, 3, 5]: total distance traveled: |2 \u2013 0| + |3 \u2013 2| + |5 \u2013 3| = 5;  [2, 5, 3]: |2 \u2013 0| + |5 \u2013 2| + |3 \u2013 5| = 7;  [3, 2, 5]: |3 \u2013 0| + |2 \u2013 3| + |5 \u2013 2| = 7;  [3, 5, 2]: |3 \u2013 0| + |5 \u2013 3| + |2 \u2013 5| = 8;  [5, 2, 3]: |5 \u2013 0| + |2 \u2013 5| + |3 \u2013 2| = 9;  [5, 3, 2]: |5 \u2013 0| + |3 \u2013 5| + |2 \u2013 3| = 8. \\n\\nThe average travel distance is $\\\\frac{1}{6} \\\\cdot(5 + 7 + 7 + 8 + 9 + 8)$ = $\\\\frac{44}{6}$ = $\\\\frac{22}{3}$.\",\n  \"Ground Truth Solution\": \"def gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\treturn gcd(b, a % b)\\nn = int(input())\\na = [int(x) for x in input().split()]\\nsum1 = sum(a)\\nsum2 = 0\\nsumbefore = 0\\na.sort()\\nfor i in range(n):\\n\\tsum2 += a[i] * i - sumbefore\\n\\tsumbefore += a[i]\\nsumtot = sum1 + 2 * sum2\\nk = gcd(sumtot, n)\\nprint(sumtot // k, n // k)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to find the average distance Iahub travels when visiting n destinations in all possible orders, starting from kilometer 0. The average distance is the total distance of all possible routes divided by the number of possible routes (n!).\\n- Identifying Key Formulas: The total number of routes is n!. The total distance traveled involves summing the distances for each route, including the initial distance from 0 to the first destination and the distances between consecutive destinations in each route.\\n- Optimizing for Calculation: Directly calculating the total distance for all n! routes is computationally expensive. Observe that the distance from 0 to each destination ai occurs (n-1)! times as the first destination. The distance between each pair of destinations ai and aj occurs 2 * (n-2)! times (once when ai is followed by aj, and once when aj is followed by ai). Consider sorting the destinations to simplify the calculation of the sum of distances between pairs.\\n- Deriving a Simplified Formula:  The total distance can be expressed as (n-1)! * sum(ai) + 2 * (n-2)! * sum(|ai - aj|) for all i < j. The average distance is then (Total Distance) / n! = [sum(ai) + (2 / n) * sum(|ai - aj|)] * (n-1)!.  Simplifying, the average becomes sum(ai) / n + (2 / n) * sum(abs(ai - aj)), where the sum is taken for each pair.  Further simplification to reduce the computational load is necessary. The solution provided calculates prefix sums after sorting to efficiently compute the required sums.\",\n  \"LLM Questions\": [\n    \"How do you determine the number of possible routes Iahub can take?\",\n    \"How can you calculate the total distance traveled across all possible routes without explicitly enumerating all of them?\",\n    \"How does sorting the distances of the destinations help in simplifying the total distance calculation?\",\n    \"Can you provide the simplified formula for calculating the average distance that avoids calculating factorials directly?\",\n    \"How do you reduce the fraction to its irreducible form?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The number of possible routes is n! (n factorial), where n is the number of destinations.\",\n    \"You can calculate the total distance by considering that each destination will be the starting point (n-1)! times, and each pair of destinations will be adjacent 2 * (n-2)! times.\",\n    \"Sorting the destinations allows for efficient calculation of the sum of distances between all pairs by using prefix sums.\",\n    \"The average distance can be expressed as [sum(ai) + (2 / n) * sum(|ai - aj|)], where ai and aj are destination distances and the sum is across all pairs with i < j.\",\n    \"You can reduce the fraction to its irreducible form by finding the greatest common divisor (GCD) of the numerator and denominator and then dividing both by their GCD.\"\n  ]\n}\n```"