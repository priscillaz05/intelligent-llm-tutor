"```json\n{\n  \"Coding Problem\": \"Consider a system of n water taps all pouring water into the same container. The i-th water tap can be set to deliver any amount of water from 0 to a_{i} ml per second (this amount may be a real number). The water delivered by i-th tap has temperature t_{i}.\\n\\nIf for every $i \\in [ 1, n ]$ you set i-th tap to deliver exactly x_{i} ml of water per second, then the resulting temperature of water will be $\\\\frac{\\\\sum_{i = 1}^{n} x_{i} t_{i}}{\\\\sum_{i = 1}^{n} x_{i}}$ (if $\\\\sum_{i = 1}^{n} x_{i} = 0$, then to avoid division by zero we state that the resulting water temperature is 0).\\n\\nYou have to set all the water taps in such a way that the resulting temperature is exactly T. What is the maximum amount of water you may get per second if its temperature has to be T?\\n\\n\\n-----Input-----\\n\\nThe first line contains two integers n and T (1 \u2264 n \u2264 200000, 1 \u2264 T \u2264 10^6) \u2014 the number of water taps and the desired temperature of water, respectively.\\n\\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^6) where a_{i} is the maximum amount of water i-th tap can deliver per second.\\n\\nThe third line contains n integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 10^6) \u2014 the temperature of water each tap delivers.\\n\\n\\n-----Output-----\\n\\nPrint the maximum possible amount of water with temperature exactly T you can get per second (if it is impossible to obtain water with such temperature, then the answer is considered to be 0).\\n\\nYour answer is considered correct if its absolute or relative error doesn't exceed 10^{ - 6}.\\n\\n\\n-----Examples-----\\nInput\\n2 100\\n3 10\\n50 150\\n\\nOutput\\n6.000000000000000\\n\\nInput\\n3 9\\n5 5 30\\n6 6 10\\n\\nOutput\\n40.000000000000000\\n\\nInput\\n2 12\\n1 3\\n10 15\\n\\nOutput\\n1.666666666666667\",\n  \"Ground Truth Solution\": \"def get_max_volume(sources, required_temperature):\\n\\tmax_volume = 0.0\\n\\ttemp = 0\\n\\thigher_sources = []\\n\\tlower_sources = []\\n\\tfor (volume, temperature) in sources:\\n\\t\\tdelta_temp = temperature - required_temperature\\n\\t\\tif delta_temp > 0:\\n\\t\\t\\thigher_sources.append((volume, delta_temp))\\n\\t\\telif delta_temp < 0:\\n\\t\\t\\tlower_sources.append((volume, delta_temp))\\n\\t\\tmax_volume += volume\\n\\t\\ttemp += volume * delta_temp\\n\\thigher_sources.sort(key=lambda v: v[1])\\n\\tlower_sources.sort(key=lambda v: -v[1])\\n\\twhile abs(temp / max_volume) >= 1e-06 and (len(lower_sources) > 0 or temp >= 0) and (len(higher_sources) > 0 or temp <= 0):\\n\\t\\tif temp < 0:\\n\\t\\t\\t(volume, delta_temp) = lower_sources.pop()\\n\\t\\t\\tif temp - delta_temp * volume >= 0:\\n\\t\\t\\t\\trequired_volume = temp / delta_temp\\n\\t\\t\\t\\treturn max_volume - required_volume\\n\\t\\t\\ttemp -= delta_temp * volume\\n\\t\\t\\tmax_volume -= volume\\n\\t\\telse:\\n\\t\\t\\t(volume, delta_temp) = higher_sources.pop()\\n\\t\\t\\tif temp - delta_temp * volume <= 0:\\n\\t\\t\\t\\trequired_volume = temp / delta_temp\\n\\t\\t\\t\\treturn max_volume - required_volume\\n\\t\\t\\ttemp -= delta_temp * volume\\n\\t\\t\\tmax_volume -= volume\\n\\tif abs(temp / max_volume) < 1e-06:\\n\\t\\treturn max_volume\\n\\treturn 0.0\\n(n, t) = list(map(int, input().split()))\\nvs = input().split()\\nts = input().split()\\nss = [(int(vs[i]), int(ts[i])) for i in range(n)]\\nprint(get_max_volume(ss, t))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The problem describes a system of water taps with varying flow rates and temperatures, all pouring into a single container. The goal is to determine the maximum water flow rate such that the resulting water temperature is exactly T.\\n- Identifying Potential Pitfalls: Division by zero when the total water flow rate is zero. Also, handling cases where achieving temperature T is impossible. Need to deal with floating point precision issues. The problem requires understanding how to manipulate temperature contributions from different water sources.\\n- Selecting an Algorithmic Strategy: Use a greedy approach to remove water from taps that contribute to temperatures either higher or lower than T. Sort the water sources based on the difference between their temperature and T. Iteratively remove water from the sources that push the mixture temperature away from T until we reach the maximum possible volume at temperature T.\\n- Implementing the Solution: Implement the above logic by separating sources into 'hotter' and 'colder' based on temperature vs. the desired temperature. Then try to balance the contribution of water volume * delta_temperature from both sides.  A binary search method or other optimization techniques could improve performance if the iterative removal process is too slow (although unlikely given problem limits).\",\n  \"LLM Questions\": [\n    \"What are the key constraints of the problem, especially regarding the temperature and volume of the water?\",\n    \"Expected Answer: The water mixture must have a temperature of exactly T. The amount of water each tap delivers can be any real number from 0 to a_i.\",\n    \"How do you handle the case where the desired temperature T cannot be achieved using the given water taps?\",\n    \"Expected Answer: If it's not possible to achieve the temperature T, the program must return 0.\",\n    \"What is the appropriate method to calculate the resulting water temperature and how would one best optimize the water delivered by each tap?\",\n    \"Expected Answer: The resulting temperature is a weighted average, \\\\$\\\\frac{\\\\sum_{i = 1}^{n} x_{i} t_{i}}{\\\\sum_{i = 1}^{n} x_{i}}\\\\$. To maximize the flow, a greedy approach that minimizes deviation from the desired temperature is needed.\",\n    \"How should you handle edge cases such as when the total volume of water is zero or when you reach the precision limit specified?\",\n    \"Expected Answer: If the total volume is zero, return 0. Stop when absolute error is less than 10^{-6}.\",\n    \"How do you sort or prioritize which water taps to adjust when attempting to reach the target temperature T, and why is this important?\",\n    \"Expected Answer: Prioritize based on the difference between each tap's temperature and the target. Sorting by temperature difference allows you to greedily remove the taps that contribute the most to the temperature deviating from T.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The water mixture must have a temperature of exactly T. The amount of water each tap delivers can be any real number from 0 to a_i.\",\n    \"If it's not possible to achieve the temperature T, the program must return 0.\",\n    \"The resulting temperature is a weighted average, $\\\\frac{\\\\sum_{i = 1}^{n} x_{i} t_{i}}{\\\\sum_{i = 1}^{n} x_{i}}$. To maximize the flow, a greedy approach that minimizes deviation from the desired temperature is needed.\",\n    \"If the total volume is zero, return 0. Stop when absolute error is less than 10^{-6}.\",\n    \"Prioritize based on the difference between each tap's temperature and the target. Sorting by temperature difference allows you to greedily remove the taps that contribute the most to the temperature deviating from T.\"\n  ]\n}\n```"