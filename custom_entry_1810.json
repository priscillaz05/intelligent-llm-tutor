"```json\n{\n  \"Coding Problem\": \"In Takahashi Kingdom, there is an archipelago of N islands, called Takahashi Islands. For convenience, we will call them Island 1, Island 2, ..., Island N.\\n\\nThere are M kinds of regular boat services between these islands. Each service connects two islands. The i-th service connects Island a_i and Island b_i.\\n\\nCat Snuke is on Island 1 now, and wants to go to Island N. However, it turned out that there is no boat service from Island 1 to Island N, so he wants to know whether it is possible to go to Island N by using two boat services.\\n\\nHelp him.\\n\\nConstraints\\n\\n* 3 \u2264 N \u2264 200 000\\n* 1 \u2264 M \u2264 200 000\\n* 1 \u2264 a_i < b_i \u2264 N\\n* (a_i, b_i) \\\\neq (1, N)\\n* If i \\\\neq j, (a_i, b_i) \\\\neq (a_j, b_j).\\n\\nInput\\n\\nInput is given from Standard Input in the following format:\\n\\n\\nN M\\na_1 b_1\\na_2 b_2\\n:\\na_M b_M\\n\\n\\nOutput\\n\\nIf it is possible to go to Island N by using two boat services, print `POSSIBLE`; otherwise, print `IMPOSSIBLE`.\",\n  \"Ground Truth Solution\": \"(n, m) = input().split()\\nn = int(n)\\nm = int(m)\\nl = [[] for i in range(n)]\\nfor i in range(m):\\n\\t(a, b) = input().split()\\n\\ta = int(a)\\n\\tb = int(b)\\n\\tl[a - 1].append(b - 1)\\n\\tl[b - 1].append(a - 1)\\nf = False\\nfor i in l[0]:\\n\\tfor j in l[i]:\\n\\t\\tif j == n - 1:\\n\\t\\t\\tf = True\\n\\t\\t\\tbreak\\nif f:\\n\\tprint('POSSIBLE')\\nelse:\\n\\tprint('IMPOSSIBLE')\",\n  \"LLM CoT Steps Breakdown\": \"- Problem Description: The problem describes a scenario where we need to determine if it's possible to travel from Island 1 to Island N using exactly two boat services.\\n- Data Structures: We can represent the islands and boat services as a graph, where islands are nodes and boat services are edges.  An adjacency list would be an appropriate data structure to store this graph.\\n- Algorithm: The algorithm should first build the graph from the given input. Then, for each neighbor of Island 1, check if there is a direct boat service (edge) from that neighbor to Island N. If such a path exists using two boat services, the answer is POSSIBLE, otherwise it is IMPOSSIBLE.\\n- Edge Cases: If no path exists from Island 1 to any other island using one boat service, the result is IMPOSSIBLE. If there are no direct routes from the neighbors of Island 1 to Island N, the output is IMPOSSIBLE.\",\n  \"LLM Questions\": [\n    \"How can we represent the connections between the islands?\",\n    \"How can we efficiently determine if a two-boat service route exists?\",\n    \"What data structure is most suitable for storing the island connections?\",\n    \"What are the possible edge cases, and how should we handle them?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The connections can be represented as a graph where the islands are nodes and the boat services are edges.\",\n    \"We can iterate through the neighbors of Island 1 and check if any of those neighbors have a direct connection to Island N.\",\n    \"An adjacency list is a suitable data structure for storing the island connections, as it allows us to easily find the neighbors of any given island.\",\n    \"Edge cases include when there are no connections from Island 1 or no connections to Island N. These cases will always result in IMPOSSIBLE.\"\n  ]\n}\n```"