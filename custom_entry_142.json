"```json\n{\n  \"Coding Problem\": \"In this Kata, you will be given an array and your task will be to determine if an array is in ascending or descending order and if it is rotated or not. \\n\\nConsider the array `[1,2,3,4,5,7,12]`. This array is sorted in `Ascending` order. If we rotate this array once to the left, we get `[12,1,2,3,4,5,7]` and twice-rotated we get `[7,12,1,2,3,4,5]`. These two rotated arrays are in `Rotated Ascending` order.\\n\\nSimilarly, the array `[9,6,5,3,1]` is in `Descending` order, but we can rotate it to get an array in `Rotated Descending` order: `[1,9,6,5,3]` or `[3,1,9,6,5]` etc.\\n\\nArrays will never be unsorted, except for those that are rotated as shown above. Arrays will always have an answer, as shown in the examples below.\\n\\nMore examples:\\n```Haskell\\nsolve([1,2,3,4,5,7]) = \\\"A\\\" -- Ascending\\nsolve([7,1,2,3,4,5]) = \\\"RA\\\" -- Rotated ascending\\nsolve([4,5,6,1,2,3]) = \\\"RA\\\" -- Rotated ascending\\nsolve([9,8,7,6]) = \\\"D\\\" -- Descending\\nsolve([5,9,8,7,6]) = \\\"RD\\\" -- Rotated Descending\\n```\\nMore examples in the test cases. \\n\\nGood luck!\",\n  \"Ground Truth Solution\": \"def solve(lst):\\n\\t(a, b, c) = (lst[0] < lst[1], lst[1] < lst[2], lst[-1] < lst[0])\\n\\tm = a if a == b else c\\n\\treturn ('R' if c == m else '') + ('A' if m else 'D')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The problem requires determining if a given array is in ascending or descending order, and whether it's rotated or not. A rotated array is one where the elements are shifted, but remain in ascending or descending order when considering the wrap-around.\\n- Identifying Ascending and Descending: Ascertain whether the sequence generally increases or decreases. The problem statement clarifies that arrays will only be unsorted if rotated. Thus, determine the direction of sorting before checking for rotation.\\n- Detecting Rotation: Recognize that rotation involves shifting the elements. To identify rotation, one must examine the relationship between the first and last elements of the array relative to the overall sorting order.\\n- Formulating a Strategy: Start by comparing the first few elements to determine the potential order (ascending or descending). Check if the last element disrupts the initially determined order relative to the beginning of the array. Based on these checks, formulate the result string ('A', 'D', 'RA', 'RD').\",\n  \"LLM Questions\": [\n    \"How can you determine if an array is sorted in ascending or descending order by looking at the first few elements?\",\n    \"How do you detect whether an array has been rotated from an ascending or descending order?\",\n    \"What conditions would indicate that the array is in 'Rotated Ascending' order?\",\n    \"What conditions would indicate that the array is in 'Rotated Descending' order?\",\n    \"How do you efficiently combine the checks for order (ascending/descending) and rotation into a single decision-making process?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"By comparing the first two elements, you can infer the sorting direction. If the first element is less than the second, it's likely ascending; if it's greater, it's likely descending.\",\n    \"Rotation is detected by checking if the last element breaks the established order from the beginning of the array. In an ascending rotation, the last element will be greater than elements in the middle but less than the first element. In a descending rotation, the opposite holds.\",\n    \"An array is in 'Rotated Ascending' order if it was originally ascending, but the last element is larger than some of the elements within the array and smaller than the very first element, indicating a rotation.\",\n    \"An array is in 'Rotated Descending' order if it was originally descending, but the last element is smaller than some elements within the array and larger than the very first element, indicating a rotation.\",\n    \"The order (ascending/descending) can be determined first, and then a separate check can be performed to see if the last element disrupts the established order. By combining these checks, you can efficiently decide on the final output string ('A', 'D', 'RA', 'RD').\"\n  ]\n}\n```"