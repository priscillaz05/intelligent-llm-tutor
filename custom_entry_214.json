"```json\n{\n  \"Coding Problem\": \"Vasya has a pile, that consists of some number of stones. $n$ times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\\n\\nYou are given $n$ operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\\n\\n\\n-----Input-----\\n\\nThe first line contains one positive integer $n$\u00a0\u2014 the number of operations, that have been made by Vasya ($1 \\\\leq n \\\\leq 100$).\\n\\nThe next line contains the string $s$, consisting of $n$ symbols, equal to \\\"-\\\" (without quotes) or \\\"+\\\" (without quotes). If Vasya took the stone on $i$-th operation, $s_i$ is equal to \\\"-\\\" (without quotes), if added, $s_i$ is equal to \\\"+\\\" (without quotes).\\n\\n\\n-----Output-----\\n\\nPrint one integer\u00a0\u2014 the minimal possible number of stones that can be in the pile after these $n$ operations.\\n\\n\\n-----Examples-----\\nInput\\n3\\n---\\n\\nOutput\\n0\\nInput\\n4\\n++++\\n\\nOutput\\n4\\nInput\\n2\\n-+\\n\\nOutput\\n1\\nInput\\n5\\n++-++\\n\\nOutput\\n3\\n\\n\\n-----Note-----\\n\\nIn the first test, if Vasya had $3$ stones in the pile at the beginning, after making operations the number of stones will be equal to $0$. It is impossible to have less number of piles, so the answer is $0$. Please notice, that the number of stones at the beginning can't be less, than $3$, because in this case, Vasya won't be able to take a stone on some operation (the pile will be empty).\\n\\nIn the second test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $4$. It is impossible to have less number of piles because after making $4$ operations the number of stones in the pile increases on $4$ stones. So, the answer is $4$.\\n\\nIn the third test, if Vasya had $1$ stone in the pile at the beginning, after making operations the number of stones will be equal to $1$. It can be proved, that it is impossible to have less number of stones after making the operations.\\n\\nIn the fourth test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $3$.\",\n  \"Ground Truth Solution\": \"n = int(input())\\ns = input()\\nans = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans = max(ans - 1, 0)\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires determining the minimal number of stones remaining in a pile after a series of additions and subtractions, given the constraint that the pile must never be empty before a subtraction.\\n- Identifying Constraints: The primary constraint is that the number of stones in the pile must be greater than 0 before a stone can be removed. This limits how low the stone count can go.\\n- Choosing an Algorithm: The approach should simulate the operations while tracking the stone count, ensuring it never goes negative. Minimize the starting number of stones to find the minimal final number.\\n- Edge Cases: None need to be handled explicitly due to the problem statement always having at least one stone before removing any.\",\n  \"LLM Questions\": [\n    \"How can you ensure that the pile is never empty when removing stones?\",\n    \"How do the addition and subtraction operations affect the number of stones?\",\n    \"What is the significance of finding the minimal possible number of stones at the end?\",\n    \"How does the initial number of stones influence the final answer?\",\n    \"How would you approach this problem if the number of operations was very large?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"By ensuring that the number of stones is always greater than 0 before performing a subtraction operation.\",\n    \"The addition operation increases the number of stones by one, while the subtraction operation decreases it by one, but only if the pile is not empty.\",\n    \"The question asks for the minimum value, it's about finding the lowest possible stone count achievable following all operations while respecting the constraints.\",\n    \"The initial number of stones determines how many subtractions can be performed before reaching zero. Minimizing it is key to find minimal final stone count.\",\n    \"If the number of operations were very large, the code remains the same as the problem constraints are kept the same and the amount of operations does not affect algorithmic choice or complexity. The runtime of the solution is O(n) where n is number of operations.\"\n  ]\n}\n```"