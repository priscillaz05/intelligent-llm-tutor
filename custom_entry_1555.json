"```json\n{\n  \"Coding Problem\": \"You are given a rectangular grid of lattice points from (0, 0) to (n, m) inclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.\\n\\nA polyline defined by points p_1, p_2, p_3, p_4 consists of the line segments p_1 p_2, p_2 p_3, p_3 p_4, and its length is the sum of the lengths of the individual line segments.\\n\\n-----Input-----\\n\\nThe only line of the input contains two integers n and m (0 \u2264 n, m \u2264 1000). It is guaranteed that grid contains at least 4 different points.\\n\\n-----Output-----\\n\\nPrint 4 lines with two integers per line separated by space \u2014 coordinates of points p_1, p_2, p_3, p_4 in order which represent the longest possible polyline.\\n\\nJudge program compares your answer and jury's answer with 10^{ - 6} precision.\\n\\n-----Examples-----\\nInput\\n1 1\\n\\nOutput\\n1 1\\n0 0\\n1 0\\n0 1\\n\\nInput\\n0 10\\n\\nOutput\\n0 1\\n0 10\\n0 0\\n0 9\",\n  \"Ground Truth Solution\": \"def main():\\n\\ta = input().split()\\n\\tfor i in range(len(a)):\\n\\t\\ta[i] = int(a[i])\\n\\tm = a[1]\\n\\tn = a[0]\\n\\tif n == 0:\\n\\t\\tc1 = {(0, 0), (0, 1), (0, m - 1), (0, m)}\\n\\telif m == 0:\\n\\t\\tc1 = {(0, 0), (1, 0), (n - 1, 0), (n, 0)}\\n\\telse:\\n\\t\\tc1 = {(0, 0), (0, 1), (1, 0), (1, 1), (0, m - 1), (0, m), (1, m - 1), (1, m), (n - 1, m - 1), (n - 1, m), (n, m - 1), (n, m), (n - 1, 0), (n, 0), (n - 1, 1), (n, 1)}\\n\\tmaximum = 0\\n\\tfor i in c1:\\n\\t\\tfor j in c1 - {i}:\\n\\t\\t\\tfor k in c1 - {i, j}:\\n\\t\\t\\t\\tfor l in c1 - {i, j, k}:\\n\\t\\t\\t\\t\\tmaximum = max(polyline(i, j, k, l), maximum)\\n\\tfor i in c1:\\n\\t\\tfor j in c1 - {i}:\\n\\t\\t\\tfor k in c1 - {i, j}:\\n\\t\\t\\t\\tfor l in c1 - {i, j, k}:\\n\\t\\t\\t\\t\\tif maximum == polyline(i, j, k, l):\\n\\t\\t\\t\\t\\t\\tprint(l[0], l[1])\\n\\t\\t\\t\\t\\t\\tprint(k[0], k[1])\\n\\t\\t\\t\\t\\t\\tprint(j[0], j[1])\\n\\t\\t\\t\\t\\t\\tprint(i[0], i[1])\\n\\t\\t\\t\\t\\t\\treturn\\n\\ndef dis(i, j):\\n\\treturn ((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) ** 0.5\\n\\ndef polyline(i, j, k, l):\\n\\treturn dis(i, j) + dis(j, k) + dis(k, l)\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to find four distinct points in a rectangular grid such that the polyline formed by these points has the maximum possible length. The polyline can have self-intersections or self-touching.\\n- Identifying Key Insight: The longest polyline is likely formed by points as far apart as possible. Therefore, choosing points from the corners and edges is a good strategy.\\n- Handling Edge Cases: Consider the cases when either n or m is 0. In those cases, the grid becomes a line, and the problem simplifies to selecting points on the line.\\n- Algorithmic Approach: Enumerate a set of candidate points that are likely to be part of the longest polyline (e.g., corners and points near corners). Then, iterate through all possible combinations of four distinct points from this candidate set and compute the polyline length for each combination. Finally, select the combination that yields the maximum length.\\n- Optimizations: Limit the set of candidate points to only the corners and a few edge points to reduce the computational cost of the enumeration.\",\n  \"LLM Questions\": [\n    \"What is the objective function to be maximized, and how is it calculated?\",\n    \"How should edge cases like n=0 or m=0 be handled?\",\n    \"What is a good heuristic for selecting candidate points?\",\n    \"How can the search space of possible combinations be reduced to improve efficiency?\",\n    \"How do you calculate the distance between two points on the grid?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The objective function is the length of the polyline, which is the sum of the Euclidean distances between consecutive points (p1, p2, p3, p4). So, distance(p1, p2) + distance(p2, p3) + distance(p3, p4).\",\n    \"If n=0, the grid is a vertical line. If m=0, the grid is a horizontal line. In either case, the candidate points should be points along that line.\",\n    \"A good heuristic is to select points that are on the corners or close to the corners of the rectangular grid, since these points are likely to maximize the distances between points.\",\n    \"The search space can be reduced by limiting the number of candidate points. Instead of considering all possible points, consider only the corners and a few points near the edges.\",\n    \"The distance between two points (x1, y1) and (x2, y2) on the grid is calculated using the Euclidean distance formula: sqrt((x2 - x1)^2 + (y2 - y1)^2).\"\n  ]\n}\n```"