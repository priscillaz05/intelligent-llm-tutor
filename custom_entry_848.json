"```json\n{\n  \"Coding Problem\": \"This is an interactive problem. Refer to the Interaction section below for better understanding.\\n\\nIthea and Chtholly want to play a game in order to determine who can use the kitchen tonight.\\n\\n<image>\\n\\nInitially, Ithea puts n clear sheets of paper in a line. They are numbered from 1 to n from left to right.\\n\\nThis game will go on for m rounds. In each round, Ithea will give Chtholly an integer between 1 and c, and Chtholly needs to choose one of the sheets to write down this number (if there is already a number before, she will erase the original one and replace it with the new one).\\n\\nChtholly wins if, at any time, all the sheets are filled with a number and the n numbers are in non-decreasing order looking from left to right from sheet 1 to sheet n, and if after m rounds she still doesn't win, she loses the game.\\n\\nChtholly really wants to win the game as she wants to cook something for Willem. But she doesn't know how to win the game. So Chtholly finds you, and your task is to write a program to receive numbers that Ithea gives Chtholly and help her make the decision on which sheet of paper write this number.\\n\\nInput\\n\\nThe first line contains 3 integers n, m and c (<image>, <image> means <image> rounded up) \u2014 the number of sheets, the number of rounds and the largest possible number Ithea can give to Chtholly respectively. The remaining parts of input are given throughout the interaction process.\\n\\nInteraction\\n\\nIn each round, your program needs to read one line containing a single integer pi (1 \u2264 pi \u2264 c), indicating the number given to Chtholly.\\n\\nYour program should then output a line containing an integer between 1 and n, indicating the number of sheet to write down this number in.\\n\\nAfter outputting each line, don't forget to flush the output. For example: \\n\\n  * fflush(stdout) in C/C++; \\n  * System.out.flush() in Java; \\n  * sys.stdout.flush() in Python; \\n  * flush(output) in Pascal; \\n  * See the documentation for other languages. \\n\\n\\n\\nIf Chtholly wins at the end of a round, no more input will become available and your program should terminate normally. It can be shown that under the constraints, it's always possible for Chtholly to win the game.\\n\\nExample\\n\\nInput\\n\\n2 4 4\\n2\\n1\\n3\\n\\n\\nOutput\\n\\n1\\n2\\n2\\n\\nNote\\n\\nIn the example, Chtholly initially knew there were 2 sheets, 4 rounds and each number was between 1 and 4. She then received a 2 and decided to write it in the 1st sheet. Then she received a 1 and wrote it in the 2nd sheet. At last, she received a 3 and replaced 1 with 3 in the 2nd sheet. At this time all the sheets were filled with a number and they were non-decreasing, so she won the game. \\n\\nNote that it is required that your program terminate immediately after Chtholly wins and do not read numbers from the input for the remaining rounds. If not, undefined behaviour may arise and it won't be sure whether your program will be accepted or rejected. Also because of this, please be careful when hacking others' codes. In the sample, Chtholly won the game after the 3rd round, so it is required that your program doesn't read the number of the remaining 4th round.\\n\\nThe input format for hacking: \\n\\n  * The first line contains 3 integers n, m and c; \\n  * The following m lines each contains an integer between 1 and c, indicating the number given to Chtholly in each round.\",\n  \"Ground Truth Solution\": \"import sys\\n(n, m, c) = map(int, input().split())\\nfree = n\\nnums = [0] * n\\nfor i in range(m):\\n\\tpi = int(input())\\n\\tif pi > c // 2:\\n\\t\\tcurrent = n - 1\\n\\t\\twhile nums[current] > 0 and nums[current] >= pi and (current >= 0):\\n\\t\\t\\tcurrent -= 1\\n\\t\\tif current == -1:\\n\\t\\t\\tcurrent = 0\\n\\t\\tif nums[current] == 0:\\n\\t\\t\\tfree -= 1\\n\\t\\tnums[current] = pi\\n\\t\\tprint(current + 1)\\n\\telse:\\n\\t\\tcurrent = 0\\n\\t\\twhile current < n and nums[current] > 0 and (nums[current] <= pi):\\n\\t\\t\\tcurrent += 1\\n\\t\\tif current == n:\\n\\t\\t\\tcurrent = n - 1\\n\\t\\tif nums[current] == 0:\\n\\t\\t\\tfree -= 1\\n\\t\\tnums[current] = pi\\n\\t\\tprint(current + 1)\\n\\tif free == 0:\\n\\t\\tbreak\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: This is an interactive problem where the goal is to help Chtholly fill n sheets of paper with numbers such that they are in non-decreasing order. The program receives a number p in each round and needs to decide which sheet to write the number on. The program wins if all sheets are filled and are in non-decreasing order.\\n- Core Strategy: The key is to maintain a non-decreasing order of the numbers on the sheets. A crucial decision is where to place the incoming number 'pi'. One approach is to place smaller numbers at the beginning and larger numbers at the end.\\n- Implementation Details: The program should initialize an array of size n to represent the sheets. It reads numbers from input one by one. Based on whether the input number 'pi' is greater than c // 2, we try to place it towards the end or beginning of the array respectively. If 'pi' is greater than c // 2, try to replace an existing number from the end. If 'pi' is smaller or equal to c // 2, try from the beginning. Maintain a count of free sheets.\\n- Termination Condition: The program must terminate immediately when all sheets are filled, indicating a win for Chtholly.\",\n  \"LLM Questions\": [\n    \"How should the program handle the interactive nature of the problem, where input is received and output is provided in each round?\",\n    \"What data structure should be used to represent the sheets of paper and the numbers written on them?\",\n    \"How can the program make decisions on where to place each incoming number to maintain the non-decreasing order?\",\n    \"How should the program handle the case where a sheet already has a number on it, and a new number needs to be written on that sheet?\",\n    \"How will the program detect when all the sheets are filled and the numbers are in non-decreasing order (win condition), and what action should it take?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The program must read the input number for each round using standard input (e.g., `input()` in Python) and output the chosen sheet number using standard output (e.g., `print()` in Python). It's crucial to flush the output buffer after each round.\",\n    \"An array (or a list in Python) of size `n` can be used, where each element represents a sheet of paper and its value represents the number written on that sheet. Initially, all elements can be initialized to 0 to signify empty sheets.\",\n    \"If the input number `pi` is greater than `c // 2`, the program can try to place it towards the end of the array (sheets numbered closer to `n`). If `pi` is smaller or equal to `c // 2`, the program can try to place it towards the beginning of the array (sheets numbered closer to 1). The goal is to guide towards a non-decreasing order from left to right.\",\n    \"If a sheet already has a number, the program should replace the existing number with the new number. However, the location of the replacement should be determined based on the target strategy to maintain a non-decreasing order.\",\n    \"The program can maintain a counter of empty sheets. When the counter reaches 0, it means all sheets are filled. Then, the program should check if the array is in non-decreasing order. If both conditions are met, Chtholly wins, and the program should terminate immediately.\"\n  ]\n}\n```"