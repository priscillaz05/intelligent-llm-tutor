"```json\n{\n  \"Coding Problem\": \"This kata is inspired by Space Invaders (Japanese: \u30b9\u30da\u30fc\u30b9\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc), an arcade video game created by Tomohiro Nishikado and released in 1978.\\nAlien invaders are attacking Earth and you've been conscripted to defend.\\nThe Bad News: You performed poorly in the manual training. As a result, you're ranked low priority and you're piloting a space jalopy.\\nThe Good News: Your coding skill is better than your piloting and you know the movement pattern of the alien spaceships.\\nYou're going to program an algorithm that aids in shooting down the incoming alien wave despite your limitations.\\nInput\\nThe action takes place on an m x n matrix. Your function will receive two arguments:\\n\\na 2-D array where each subarray represents a row of alien ships. Subarrays consist of integers that represent each alien ship. Zero values (0) are empty spaces.\\n        \\nyour [row,column] coordinates\\n\\nThe width (n) of a row is equal to the length of a subarray in the first argument and all rows are of the same length.\\nYour row coordinate will be the last row of the matrix (m - 1).\\nAlien Ship Movement Pattern\\n\\nEach alien ship is given in the form of an integer that represents its movement speed and direction.\\nAlien ships move left or right. A positive integer means an alien moves right, a negative integer means an alien moves left. The absolute value of the integer is the distance the alien moves in 1 turn.\\nWhen an alien reaches an edge, it moves down one position and reverses lateral (left/right) direction.\\n\\nYour Ship's Limitations\\n\\nYour position is fixed.\\nYour pulse cannon has a time delay of 1 turn. After the delay, your cannon blasts the first target in its path.\\nYou can fire up to one shot per turn.\\n\\n\\nOutput\\nYour function should return an array of integers. Each integer represents the turn for each shot fired from your ship's cannon. If it is not possible to destroy all alien ships before they reach the last row, return null or None.\\nTest Example\\n\\nAbove: Turn 0 (Initial State)\\nBelow: Turn 1\\n\\nThe images above represent the matrix states at Turn 0 and Turn 1 for the test example below. Note the following:\\n\\nMultiple alien ships can occupy the same space concurrently. The red alien at [0,2] and the light blue alien at [0,7] at turn 0 will both end up at position [0,4] at turn 1.\\nThe pink alien (1) at [0,9] at turn 0 is already at the right edge, so it moves one space down and changes direction from right to left.\\nThe yellow alien (6) at [0,6] at turn 0 ends up at [1,7] at turn 1.\\nThe green alien (7) at [0,8] at turn 0 ends up at [1,4] (white alien) and gets shot down by your cannon at turn 1. Therefore, the time of registering your first shot is at turn 0.\\n\\nIn the test example, there is only one subarray in the first argument, meaning only the top row (row 0) of the matrix is occupied at the initial state.\\n\\n```python\\nalien_wave = [[3,1,2,-2,2,3,6,-3,7,1]]\\nposition = [6,4]\\n\\nblast_sequence(alien_wave,position)# [0, 2, 3, 4, 5, 9, 10, 13, 19, 22]\\n```\\n\\nOther Technical Details\\n\\nIn the event where multiple alien ships occupy the same position and the position is the target of your cannon fire, the fastest alien ship will be destroyed. If two ships are going at the same speed in opposite directions, the ship moving to the right will be destroyed.\\nAll alien ship movement speeds will be less than the width of the matrix.\\nAlien count upper bound is 228\\nInputs will always be valid\\n\\n\\nIf you enjoyed this kata, be sure to check out [my other katas](https://www.codewars.com/users/docgunthrop/authored).\",\n  \"Ground Truth Solution\": \"def blast_sequence(aliensStart, position):\\n\\n\\tdef moveAliens(aliens, furthest):\\n\\t\\t(lst, shootPath) = ([], [])\\n\\t\\tfor (x, y, s) in aliens:\\n\\t\\t\\ty += s\\n\\t\\t\\tif not 0 <= y < N:\\n\\t\\t\\t\\t(x, s) = (x + 1, -s)\\n\\t\\t\\t\\ty = -y - 1 if y < 0 else 2 * N - y - 1\\n\\t\\t\\t(shootPath if y == Y else lst).append((x, y, s))\\n\\t\\t\\tif x > furthest:\\n\\t\\t\\t\\tfurthest = x\\n\\t\\treturn (lst, shootPath, furthest)\\n\\n\\tdef shootTarget(shootPath):\\n\\t\\tif shootPath:\\n\\t\\t\\tz = max(shootPath, key=lambda a: (a[0], abs(a[2]), a[2]))\\n\\t\\t\\tshootPath.remove(z)\\n\\t\\t\\tshots.append(turn)\\n\\t((X, Y), N) = (position, len(aliensStart[0]))\\n\\taliens = [(x, y, s) for (x, r) in enumerate(aliensStart) for (y, s) in enumerate(r) if s]\\n\\t(shots, furthest, turn) = ([], 0, -1)\\n\\twhile aliens and furthest < X:\\n\\t\\tturn += 1\\n\\t\\t(aliens, shootPath, furthest) = moveAliens(aliens, furthest)\\n\\t\\tshootTarget(shootPath)\\n\\t\\taliens += shootPath\\n\\treturn shots if not aliens else None\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem is a simplified version of Space Invaders. You need to write an algorithm that simulates alien movement and your ship's shooting capabilities to eliminate all alien ships before they reach the last row.\\n- Modeling Alien Movement: Alien ships move left or right based on their speed. When they hit an edge, they move down a row and reverse direction. Multiple aliens can occupy the same position.\\n- Simulating Your Ship: Your ship is fixed in position, and you can fire one shot per turn with a delay of one turn. The shot targets the first alien in its path, destroying the fastest one (or the rightmost in case of equal speeds).\\n- Termination Condition: The game ends when all aliens are destroyed or when at least one alien reaches the last row.\\n- Choosing an Algorithm:  Simulate each turn by updating alien positions, identifying shooting targets, and eliminating aliens. The algorithm should return an array of turns when shots are fired or null if the aliens reach the last row.\",\n  \"LLM Questions\": [\n    \"How do you represent the state of the game, including alien positions and speeds?\",\n    \"How do you simulate the movement of the alien ships, considering edge collisions and direction changes?\",\n    \"How do you determine which alien ship to shoot at each turn, given that multiple ships can be in the same column?\",\n    \"How do you handle the case where multiple alien ships occupy the same position and the cannon fires at that position?\",\n    \"What is the termination condition for the simulation, and how do you determine whether to return an array of shot times or null?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The state of the game can be represented by a list of alien ships, where each ship is a tuple (row, column, speed). Also, we need the dimensions of the matrix (m x n) and the position of the ship.\",\n    \"For each turn, update each alien's position by adding its speed to the column. If an alien reaches an edge (column < 0 or column >= n), update its row by incrementing and reverse the direction of its speed (multiply by -1). Adjust the column accordingly after reversing the direction.\",\n    \"At each turn, iterate through the aliens and check if any are in the same column as the ship. If there are, select the target based on the fastest speed. If speeds are equal, select the one moving to the right.\",\n    \"If multiple alien ships occupy the same position as the target of your cannon fire, destroy the fastest alien ship (or the ship moving to the right, if speeds are equal).\",\n    \"The simulation ends when either all alien ships are destroyed (the list of aliens is empty) or when any alien reaches the last row (row >= m). If all aliens are destroyed, return the list of turns when shots were fired. Otherwise, return null.\"\n  ]\n}\n```"