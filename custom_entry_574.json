"```json\n{\n  \"Coding Problem\": \"One day student Vasya was sitting on a lecture and mentioned a string s1s2... sn, consisting of letters \\\"a\\\", \\\"b\\\" and \\\"c\\\" that was written on his desk. As the lecture was boring, Vasya decided to complete the picture by composing a graph G with the following properties: \\n\\n  * G has exactly n vertices, numbered from 1 to n. \\n  * For all pairs of vertices i and j, where i \u2260 j, there is an edge connecting them if and only if characters si and sj are either equal or neighbouring in the alphabet. That is, letters in pairs \\\"a\\\"-\\\"b\\\" and \\\"b\\\"-\\\"c\\\" are neighbouring, while letters \\\"a\\\"-\\\"c\\\" are not. \\n\\n\\n\\nVasya painted the resulting graph near the string and then erased the string. Next day Vasya's friend Petya came to a lecture and found some graph at his desk. He had heard of Vasya's adventure and now he wants to find out whether it could be the original graph G, painted by Vasya. In order to verify this, Petya needs to know whether there exists a string s, such that if Vasya used this s he would produce the given graph G.\\n\\nInput\\n\\nThe first line of the input contains two integers n and m <image> \u2014 the number of vertices and edges in the graph found by Petya, respectively.\\n\\nEach of the next m lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 the edges of the graph G. It is guaranteed, that there are no multiple edges, that is any pair of vertexes appear in this list no more than once.\\n\\nOutput\\n\\nIn the first line print \\\"Yes\\\" (without the quotes), if the string s Petya is interested in really exists and \\\"No\\\" (without the quotes) otherwise.\\n\\nIf the string s exists, then print it on the second line of the output. The length of s must be exactly n, it must consist of only letters \\\"a\\\", \\\"b\\\" and \\\"c\\\" only, and the graph built using this string must coincide with G. If there are multiple possible answers, you may print any of them.\\n\\nExamples\\n\\nInput\\n\\n2 1\\n1 2\\n\\n\\nOutput\\n\\nYes\\naa\\n\\n\\nInput\\n\\n4 3\\n1 2\\n1 3\\n1 4\\n\\n\\nOutput\\n\\nNo\\n\\nNote\\n\\nIn the first sample you are given a graph made of two vertices with an edge between them. So, these vertices can correspond to both the same and adjacent letters. Any of the following strings \\\"aa\\\", \\\"ab\\\", \\\"ba\\\", \\\"bb\\\", \\\"bc\\\", \\\"cb\\\", \\\"cc\\\" meets the graph's conditions. \\n\\nIn the second sample the first vertex is connected to all three other vertices, but these three vertices are not connected with each other. That means that they must correspond to distinct letters that are not adjacent, but that is impossible as there are only two such letters: a and c.\",\n  \"Ground Truth Solution\": \"(n, m) = map(int, input().split())\\ns = [[0] * n for i in range(n)]\\nfor i in range(m):\\n\\t(a, b) = map(int, input().split())\\n\\ts[a - 1][b - 1] = 1\\n\\ts[b - 1][a - 1] = 1\\nfor i in range(n):\\n\\ts[i][i] = 1\\nanswer = [0] * n\\nfor i in range(n):\\n\\tflag = True\\n\\tfor j in range(n):\\n\\t\\tif s[i][j] == 0:\\n\\t\\t\\tflag = False\\n\\tif flag:\\n\\t\\tanswer[i] = 'b'\\nfor i in range(n):\\n\\tif answer[i] == 0:\\n\\t\\tanswer[i] = 'a'\\n\\t\\tfor j in range(n):\\n\\t\\t\\tif s[i][j] == 0:\\n\\t\\t\\t\\tanswer[j] = 'c'\\n\\t\\t\\tif s[i][j] == 1 and answer[j] != 'b':\\n\\t\\t\\t\\tanswer[j] = 'a'\\n\\t\\tbreak\\nflag = True\\nfor i in range(n):\\n\\tfor j in range(n):\\n\\t\\tif s[i][j] == 1:\\n\\t\\t\\tif answer[i] == 'a' and answer[j] == 'c' or (answer[i] == 'c' and answer[j] == 'a'):\\n\\t\\t\\t\\tflag = False\\n\\t\\tif s[i][j] == 0:\\n\\t\\t\\tif abs(ord(answer[i]) - ord(answer[j])) < 2:\\n\\t\\t\\t\\tflag = False\\nif flag:\\n\\tprint('Yes')\\n\\tanswer = ''.join(answer)\\n\\tprint(answer)\\nelse:\\n\\tprint('No')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem is to determine if a given graph can be constructed from a string of 'a', 'b', and 'c' characters, where an edge exists between two vertices if their corresponding characters are equal or adjacent in the alphabet ('a' and 'b', or 'b' and 'c').\\n- Identifying Constraints: The string must have length n, where n is the number of vertices in the graph. The graph's edges represent equality or adjacency in the string.\\n- Choosing an Algorithmic Strategy: Start by trying to assign 'b' to all vertices which are connected to all other vertices in the graph. Next assign 'a' to one of the unassigned vertices. Then assign 'c' to all vertices that are not connected to the vertex that has 'a'. Finally, assign 'a' to any remaining unassigned vertices that are connected to the 'a' vertex.\\n- Validation: After creating the string, check if it would produce the input graph G. If so, then we have the solution. If we get a contradiction at any stage, then such a string s doesn't exist.\\n\",\n  \"LLM Questions\": [\n    \"What does it mean for two characters to be 'neighboring' in this problem's context?\",\n    \"How would you systematically attempt to construct a string that could produce the given graph?\",\n    \"What conditions must be checked to ensure that the generated string aligns with the input graph's adjacency matrix?\",\n    \"Are there any specific vertices or edge patterns that would immediately indicate that no such string can exist?\",\n    \"If assigning the character 'b' to vertices connected to all vertices doesn't give a viable solution, what other strategies could be tried?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Neighboring means the characters are adjacent in the alphabet, specifically 'a' and 'b', or 'b' and 'c'.\",\n    \"I can try assigning 'b' to vertices connected to all other vertices. Then assign 'a' to a vertex. Then assign 'c' to all disconnected vertices. Finally assign 'a' to remaining vertices that are connected to a vertex that has 'a'.\",\n    \"I must check that for every pair of vertices i and j, an edge exists if and only if the characters at those vertices in the string are equal or adjacent.\",\n    \"Yes, if there is a vertex connected to all other vertices, but those other vertices are not connected to each other, then no such string exists.\",\n    \"Another potential strategy would be to begin by assigning 'a' and 'c' and building the string based on the adjacency of these assignments.\"\n  ]\n}\n```"