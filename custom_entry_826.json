"```json\n{\n  \"Coding Problem\": \"A line on the plane is described by an equation Ax\u2009+\u2009By\u2009+\u2009C\u2009=\u20090. You are to find any point on this line, whose coordinates are integer numbers from \u2009-\u20095\u00b71018 to 5\u00b71018 inclusive, or to find out that such points do not exist.\\n\\nInput\\nThe first line contains three integers A, B and C (\u2009-\u20092\u00b7109\u2009\u2264\u2009A,\u2009B,\u2009C\u2009\u2264\u20092\u00b7109) \u2014 corresponding coefficients of the line equation. It is guaranteed that A2\u2009+\u2009B2\u2009>\u20090.\\n\\nOutput\\nIf the required point exists, output its coordinates, otherwise output -1.\\n\\nSAMPLE INPUT\\n2 5 3\\n\\nSAMPLE OUTPUT\\n6 -3\",\n  \"Ground Truth Solution\": \"a,b,c = list(map(int,input().split()))\\nflag=1;\\nfor x in range(6,7):\\n\\tfor y in range(-10,10):\\n\\t\\tif (a*x)+(y*b)+c==0:\\n\\t\\t\\tprint(x,y)\\n\\t\\t\\tflag=0\\n\\tif flag==0:\\n\\t\\tbreak\\n\\nif flag==1:\\n\\tprint(\\\"-1\\\")\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Constraints: Identify that the task is to find integer coordinates (x, y) that satisfy the linear equation Ax + By + C = 0 within the specified range. Realize that if no such point exists, the output should be -1.\\n- Selecting an Algorithmic Strategy: Consider using a brute-force approach to search for suitable coordinates within a defined range. Acknowledge that the search space could be very large, suggesting that a more efficient method, like Diophantine equations and the Extended Euclidean Algorithm, might be necessary.\\n- Handling Special Conditions: Consider the case where A and B are both 0. Since A^2 + B^2 > 0, this case is excluded. Consider the case where either A or B is 0. If A is 0, then By + C = 0, meaning y = -C/B. In this case, check if -C/B is an integer. If B is 0, then Ax + C = 0, meaning x = -C/A. In this case, check if -C/A is an integer.\\n- Implementing Search or Euclidean Algorithm: Start by attempting the brute-force search within a relatively small range to try and find integer values for x and y. If brute-force fails, implement the Extended Euclidean Algorithm to find a particular solution to the Diophantine equation. Use this solution to generate other integer solutions.\",\n  \"LLM Questions\": [\n    \"What are the constraints on the values of A, B, and C, and how do they affect the possible solutions?\",\n    \"What does it mean to find integer coordinates that satisfy the equation, and what are the limitations on these coordinates?\",\n    \"How would you approach the problem if brute-force becomes computationally infeasible due to the large range of possible x and y values?\",\n    \"What are the special cases where either A or B is 0, and how should these cases be handled differently?\",\n    \"If using the Extended Euclidean Algorithm, how would you adapt the algorithm to find a particular solution, and how can you derive other solutions from it?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A, B, and C are integers within the range of -2 * 10^9 to 2 * 10^9. The most critical constraint is that A^2 + B^2 > 0, ensuring that we have a valid linear equation. This influences the strategy because naive approaches will not work given the input range.\",\n    \"Finding integer coordinates means finding x and y values that are integers and fall within the range of -5 * 10^18 to 5 * 10^18. These integer solutions should exactly satisfy the equation Ax + By + C = 0.\",\n    \"If brute-force isn't feasible, consider Diophantine equation-solving methods using the Extended Euclidean Algorithm, which can find integer solutions for linear equations efficiently.\",\n    \"If A is 0, then y = -C/B. If B is 0, then x = -C/A. Check if -C/B or -C/A is an integer. If they are not, then there is no solution. Also, check that x and y fall in the correct range.\",\n    \"To use the Extended Euclidean Algorithm, rearrange the equation to Ax + By = -C. Find a particular solution (x0, y0) using the algorithm. General solutions can be derived from this particular solution as x = x0 + (B/gcd(A, B)) * k and y = y0 - (A/gcd(A, B)) * k, where k is an integer. Then, we must check whether such solutions are within our input range.\"\n  ]\n}\n```"