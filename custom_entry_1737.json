"```json\n{\n  \"Coding Problem\": \"Snuke has one biscuit and zero Japanese yen (the currency) in his pocket. He will perform the following operations exactly K times in total, in the order he likes:\\n\\n* Hit his pocket, which magically increases the number of biscuits by one.\\n* Exchange A biscuits to 1 yen.\\n* Exchange 1 yen to B biscuits.\\n\\n\\n\\nFind the maximum possible number of biscuits in Snuke's pocket after K operations.\\n\\nConstraints\\n\\n* 1 \\\\leq K,A,B \\\\leq 10^9\\n* K,A and B are integers.\\n\\nInput\\n\\nInput is given from Standard Input in the following format:\\n\\n\\nK A B\\n\\n\\n\\nOutput\\n\\nPrint the maximum possible number of biscuits in Snuke's pocket after K operations.\\n\\nExamples\\n\\nInput\\n\\n4 2 6\\n\\n\\nOutput\\n\\n7\\n\\n\\nInput\\n\\n7 3 4\\n\\n\\nOutput\\n\\n8\\n\\n\\nInput\\n\\n314159265 35897932 384626433\\n\\n\\nOutput\\n\\n48518828981938099\",\n  \"Ground Truth Solution\": \"(k, a, b) = map(int, input().split())\\nif b - a <= 2:\\n\\tprint(k + 1)\\nelse:\\n\\tkaisu = max(0, (k - a + 1) // 2)\\n\\tprint(k - kaisu * 2 + kaisu * (b - a) + 1)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem involves maximizing the number of biscuits after K operations, which can be either adding a biscuit, exchanging biscuits to yen, or exchanging yen to biscuits.\\n- Identify Optimal Strategy: Determine when it's beneficial to use yen exchange operations (A biscuits -> 1 yen -> B biscuits). If B > A, it is beneficial to use these exchange operations. Otherwise, it is always better to only add biscuits.\\n- Handle the Case where Yen Exchanges are not Beneficial: If B - A <= 2, the best strategy is to simply add biscuits K times, resulting in a final count of K + 1 biscuits (starting with 1).\\n- Optimize Yen Exchange Operations: If B - A > 2, determine how many exchange operations can be performed. Consider the initial biscuit and yen count. We start with 1 biscuit and 0 yen.  To perform exchanges, we first need at least A biscuits. So, perform hit operation to get A biscuits. Now we can make an exchange A biscuits -> 1 yen -> B biscuits.\\n- Calculate the Number of Exchange Operations: Determine the maximum number of exchange operations that can be performed within the K operations, and the total number of biscuits accumulated.\\n- Formula Derivation: The number of hit operations is K - #exchange_operations * 2 (A to Yen and Yen to B). Biscuit count = 1 + K - #exchange_operations * 2 + #exchange_operations * (B - A).\",\n  \"LLM Questions\": [\n    \"What are the possible operations and how do they affect the number of biscuits and yen?\",\n    \"When is it beneficial to use the exchange operations (A biscuits -> 1 yen -> B biscuits), and when is it better to just add biscuits?\",\n    \"How many hit operations should be done at the beginning to enable the biscuit-to-yen exchange?\",\n    \"If B - A > 2, how do you determine the number of exchange operations to perform within the K operations?\",\n    \"Can you write the final biscuit calculation formula considering number of exchange operations and initial biscuit count?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The possible operations are adding a biscuit (biscuits + 1), exchanging A biscuits for 1 yen (biscuits - A, yen + 1), and exchanging 1 yen for B biscuits (biscuits + B, yen - 1).\",\n    \"It is beneficial to use exchange operations if B > A. If B - A <= 2, it is better to simply add biscuits since each exchange will give at most only two extra biscuits which we could get through adding biscuit using hit operation.\",\n    \"At least A hit operations should be done to accumulate enough biscuits to make the initial exchange from biscuits to yen.\",\n    \"You should calculate the max number of exchange operation within K operations. To do that calculate exchange operations=max(0, (k - a + 1) // 2).\",\n    \"Biscuit count = 1 + K - #exchange_operations * 2 + #exchange_operations * (B - A).\"\n  ]\n}\n```"