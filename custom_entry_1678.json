"```json\n{\n  \"Coding Problem\": \"Artsem has a friend Saunders from University of Chicago. Saunders presented him with the following problem.\\n\\nLet [n] denote the set {1, ..., n}. We will also write f: [x] \u2192 [y] when a function f is defined in integer points 1, ..., x, and all its values are integers from 1 to y.\\n\\nNow then, you are given a function f: [n] \u2192 [n]. Your task is to find a positive integer m, and two functions g: [n] \u2192 [m], h: [m] \u2192 [n], such that g(h(x)) = x for all $x \\\\in [ m ]$, and h(g(x)) = f(x) for all $x \\\\in [ n ]$, or determine that finding these is impossible.\\n\\n\\n-----Input-----\\n\\nThe first line contains an integer n (1 \u2264 n \u2264 10^5).\\n\\nThe second line contains n space-separated integers\u00a0\u2014 values f(1), ..., f(n) (1 \u2264 f(i) \u2264 n).\\n\\n\\n-----Output-----\\n\\nIf there is no answer, print one integer -1.\\n\\nOtherwise, on the first line print the number m (1 \u2264 m \u2264 10^6). On the second line print n numbers g(1), ..., g(n). On the third line print m numbers h(1), ..., h(m).\\n\\nIf there are several correct answers, you may output any of them. It is guaranteed that if a valid answer exists, then there is an answer satisfying the above restrictions.\\n\\n\\n-----Examples-----\\nInput\\n3\\n1 2 3\\n\\nOutput\\n3\\n1 2 3\\n1 2 3\\n\\nInput\\n3\\n2 2 2\\n\\nOutput\\n1\\n1 1 1\\n2\\n\\nInput\\n2\\n2 1\\n\\nOutput\\n-1\",\n  \"Ground Truth Solution\": \"a = int(input())\\nb = list(map(int, input().split()))\\ncount = 1\\ns = set()\\nd = list()\\nf = dict()\\nsuc = list()\\nsucc = True\\nfor i in b:\\n\\tif i in f:\\n\\t\\td.append(f[i])\\n\\telse:\\n\\t\\tf[i] = count\\n\\t\\tsuc.append(i)\\n\\t\\td.append(count)\\n\\t\\tcount += 1\\nfor i in range(len(suc)):\\n\\tif d[suc[i] - 1] != i + 1:\\n\\t\\tprint(-1)\\n\\t\\texit(0)\\nprint(count - 1)\\nprint(*d)\\nprint(*suc)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to find two functions g and h such that h(g(x)) = f(x) and g(h(x)) = x. If f is not a retraction (i.e. f(f(x)) = f(x) for all x), it's impossible to find such functions.\\n- Identifying necessary condition: f(f(x)) == f(x) must hold for the solution to be possible.\\n- Constructing g and h if possible: Find the set of values that f maps to. Those values will be the image of h. g maps each element in [n] to its value in the image. h maps each element to itself.\\n- Implementing Edge Cases: if the condition is not satisfied, immediately output -1.\",\n  \"LLM Questions\": [\n    \"What does the condition g(h(x)) = x for all x in [m] imply about the relationship between g and h?\",\n    \"What does the condition h(g(x)) = f(x) for all x in [n] tell us about the nature of f(x)?\",\n    \"How can we check if it is possible to find g and h given f?\",\n    \"How would you construct g and h if a solution exists?\",\n    \"What edge cases are important for the code to address?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"It implies that g is a left inverse of h, and h is a right inverse of g.\",\n    \"It suggests that f(x) is a retraction, i.e. applying f twice to any element is same as applying it once.\",\n    \"Check if f(f(x)) = f(x) for all x in [n]. If not, the task is impossible.\",\n    \"Let m be the number of distinct values in the range of f. Let h map elements of [m] to distinct values from the range of f. Let g map elements of [n] to elements of [m] such that h(g(x)) = f(x).\",\n    \"An important edge case is when the condition f(f(x)) = f(x) is not satisfied for all x in [n], in which case we output -1.\"\n  ]\n}\n```"