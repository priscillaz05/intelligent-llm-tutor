"```json\n{\n  \"Coding Problem\": \"You are given a table consisting of n rows and m columns. Each cell of the table contains a number, 0 or 1. In one move we can choose some row of the table and cyclically shift its values either one cell to the left, or one cell to the right.\\n\\nTo cyclically shift a table row one cell to the right means to move the value of each cell, except for the last one, to the right neighboring cell, and to move the value of the last cell to the first cell. A cyclical shift of a row to the left is performed similarly, but in the other direction. For example, if we cyclically shift a row \\\"00110\\\" one cell to the right, we get a row \\\"00011\\\", but if we shift a row \\\"00110\\\" one cell to the left, we get a row \\\"01100\\\".\\n\\nDetermine the minimum number of moves needed to make some table column consist only of numbers 1.\\n\\nInput\\n\\nThe first line contains two space-separated integers: n (1 \u2264 n \u2264 100) \u2014 the number of rows in the table and m (1 \u2264 m \u2264 104) \u2014 the number of columns in the table. Then n lines follow, each of them contains m characters \\\"0\\\" or \\\"1\\\": the j-th character of the i-th line describes the contents of the cell in the i-th row and in the j-th column of the table.\\n\\nIt is guaranteed that the description of the table contains no other characters besides \\\"0\\\" and \\\"1\\\".\\n\\nOutput\\n\\nPrint a single number: the minimum number of moves needed to get only numbers 1 in some column of the table. If this is impossible, print -1.\\n\\nExamples\\n\\nInput\\n\\n3 6\\n101010\\n000100\\n100000\\n\\n\\nOutput\\n\\n3\\n\\n\\nInput\\n\\n2 3\\n111\\n000\\n\\n\\nOutput\\n\\n-1\\n\\nNote\\n\\nIn the first sample one way to achieve the goal with the least number of moves is as follows: cyclically shift the second row to the right once, then shift the third row to the left twice. Then the table column before the last one will contain only 1s.\\n\\nIn the second sample one can't shift the rows to get a column containing only 1s.\",\n  \"Ground Truth Solution\": \"import sys\\n(n, m) = map(int, input().split())\\nmp = ['' for i in range(n)]\\nf = [[0 for j in range(m)] for i in range(n)]\\nfor i in range(n):\\n\\tmp[i] = input()\\n\\tif mp[i].find('1') == -1:\\n\\t\\tprint(-1)\\n\\t\\tsys.exit()\\n\\ttmp = mp[i][::-1].find('1') + 1\\n\\tfor j in range(m):\\n\\t\\tif mp[i][j] == '1':\\n\\t\\t\\tf[i][j] = 0\\n\\t\\telse:\\n\\t\\t\\tf[i][j] = f[i][j - 1] + 1 if j > 0 else tmp\\n\\ttmp = mp[i].find('1') + 1\\n\\tfor j in range(m - 1, -1, -1):\\n\\t\\tf[i][j] = min(f[i][j], f[i][j + 1] + 1 if j + 1 < m else tmp)\\nans = int(1000000000.0)\\nfor j in range(m):\\n\\tsm = 0\\n\\tfor i in range(n):\\n\\t\\tsm += f[i][j]\\n\\tans = min(ans, sm)\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to find the minimum number of moves (cyclic shifts) to make at least one column contain only 1s. If any row does not have a single 1, then it is impossible, and we should return -1.\\n- Identifying Potential Pitfalls: If any of the rows in the table does not contain a '1', it is impossible to obtain a column containing only 1s. \\n- Selecting an Algorithmic Strategy: For each row, precompute the minimum number of shifts needed to get a '1' in each column. Then, for each column, calculate the total number of moves needed to get all 1s in that column, and return the minimum across all columns.\\n- Implementing Efficient Computation: Use dynamic programming or precomputation to determine the minimum shifts to get a '1' in a particular column for each row. Cache results to avoid redundant computations.\",\n  \"LLM Questions\": [\n    \"How do you handle the case where a row doesn't contain any 1s?\",\n    \"What's the optimal way to store the minimum number of moves to put a 1 in a given column from each row?\",\n    \"How would you iterate through the columns to calculate the total moves and return the minimum?\",\n    \"How do you calculate the minimum number of moves required to have a '1' at a specific column in a specific row?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If a row does not contain any 1s, it is impossible to make a column of all 1s, and you should immediately return -1.\",\n    \"You can use a 2D array (or a list of lists) to store the minimum number of moves for each row and column.  Each element at [i][j] will represent the minimum shifts to bring a '1' to column j of row i.\",\n    \"Iterate through each column.  For each column, sum up the minimum moves needed for each row to have a '1' in that column. Keep track of the minimum of these sums across all columns.\",\n    \"Find the nearest '1' on both sides of the target column, and take the minimum number of shifts. This involves calculating the distance to the nearest '1' in both directions, considering the cyclic nature of the shifts.\"\n  ]\n}\n```"