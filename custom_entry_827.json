"```json\n{\n  \"Coding Problem\": \"We understand that reading English is a great pain to many of you. So we\u2019ll keep this problem statememt simple. Write a program that reports the point equally distant from a set of lines given as the input. In case of no solutions or multiple solutions, your program should report as such.\\n\\n\\n\\nInput\\n\\nThe input consists of multiple datasets. Each dataset is given in the following format:\\n\\nn\\nx1,1 y1,1 x1,2 y1,2\\nx2,1 y2,1 x2,2 y2,2\\n...\\nxn,1 yn,1 xn,2 yn,2\\n\\n\\nn is the number of lines (1 \u2264 n \u2264 100); (xi,1, yi,1) and (xi,2, yi,2) denote the different points the i-th line passes through. The lines do not coincide each other. The coordinates are all integers between -10000 and 10000.\\n\\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.\\n\\nOutput\\n\\nFor each dataset, print a line as follows. If there is exactly one point equally distant from all the given lines, print the x- and y-coordinates in this order with a single space between them. If there is more than one such point, just print \\\"Many\\\" (without quotes). If there is none, just print \\\"None\\\" (without quotes).\\n\\nThe coordinates may be printed with any number of digits after the decimal point, but should be accurate to 10-4.\\n\\nExample\\n\\nInput\\n\\n2\\n-35 -35 100 100\\n-49 49 2000 -2000\\n4\\n0 0 0 3\\n0 0 3 0\\n0 3 3 3\\n3 0 3 3\\n4\\n0 3 -4 6\\n3 0 6 -4\\n2 3 6 6\\n-1 2 -4 6\\n0\\n\\n\\nOutput\\n\\nMany\\n1.5000 1.5000\\n1.000 1.000\",\n  \"Ground Truth Solution\": \"import sys\\nreadline = sys.stdin.readline\\nwrite = sys.stdout.write\\nEPS = 1e-09\\n\\ndef line_cross_point(P1, P2, Q1, Q2):\\n\\t(x0, y0) = P1\\n\\t(x1, y1) = P2\\n\\t(x2, y2) = Q1\\n\\t(x3, y3) = Q2\\n\\tdx0 = x1 - x0\\n\\tdy0 = y1 - y0\\n\\tdx1 = x3 - x2\\n\\tdy1 = y3 - y2\\n\\ts = (y0 - y2) * dx1 - (x0 - x2) * dy1\\n\\tsm = dx0 * dy1 - dy0 * dx1\\n\\tif -EPS < sm < EPS:\\n\\t\\treturn None\\n\\treturn (x0 + s * dx0 / sm, y0 + s * dy0 / sm)\\n\\ndef bisector(P1, P2, Q1, Q2):\\n\\t(x0, y0) = P1\\n\\t(x1, y1) = P2\\n\\t(x2, y2) = Q1\\n\\t(x3, y3) = Q2\\n\\tdx0 = x1 - x0\\n\\tdy0 = y1 - y0\\n\\tdx1 = x3 - x2\\n\\tdy1 = y3 - y2\\n\\tcp = line_cross_point(P1, P2, Q1, Q2)\\n\\tif cp is None:\\n\\t\\treturn None\\n\\t(cx, cy) = cp\\n\\td0 = (dx0 ** 2 + dy0 ** 2) ** 0.5\\n\\td1 = (dx1 ** 2 + dy1 ** 2) ** 0.5\\n\\treturn [((cx, cy), (cx + (dx0 * d1 + dx1 * d0), cy + (dy0 * d1 + dy1 * d0))), ((cx, cy), (cx + (dx0 * d1 - dx1 * d0), cy + (dy0 * d1 - dy1 * d0)))]\\n\\ndef line_point_dist2(p1, p2, q):\\n\\t(x, y) = q\\n\\t(x1, y1) = p1\\n\\t(x2, y2) = p2\\n\\tdx = x2 - x1\\n\\tdy = y2 - y1\\n\\tdd = dx ** 2 + dy ** 2\\n\\tsv = (x - x1) * dy - (y - y1) * dx\\n\\treturn abs(sv / dd ** 0.5)\\n\\ndef check(LS, q):\\n\\tds = [line_point_dist2(p1, p2, q) for (p1, p2) in LS]\\n\\treturn all((abs(ds[0] - e) < EPS for e in ds))\\n\\ndef solve():\\n\\tN = int(readline())\\n\\tif N == 0:\\n\\t\\treturn False\\n\\tP = []\\n\\tfor i in range(N):\\n\\t\\t(x1, y1, x2, y2) = map(int, readline().split())\\n\\t\\tP.append(((x1, y1), (x2, y2)))\\n\\tif N <= 2:\\n\\t\\twrite('Many\\\\n')\\n\\t\\treturn True\\n\\ts = []\\n\\tfor i in range(N):\\n\\t\\t(p1, p2) = P[i]\\n\\t\\tfor j in range(i):\\n\\t\\t\\t(q1, q2) = P[j]\\n\\t\\t\\tbs = bisector(p1, p2, q1, q2)\\n\\t\\t\\tif bs is None:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\ts.append(bs)\\n\\t\\t\\tif len(s) > 1:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcontinue\\n\\t\\tbreak\\n\\tif len(s) < 2:\\n\\t\\twrite('None\\\\n')\\n\\t\\treturn True\\n\\tans = []\\n\\t(b1, b2) = s\\n\\tfor (p1, p2) in b1:\\n\\t\\tfor (q1, q2) in b2:\\n\\t\\t\\tcp = line_cross_point(p1, p2, q1, q2)\\n\\t\\t\\tif cp is None:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif check(P, cp):\\n\\t\\t\\t\\t(cx, cy) = cp\\n\\t\\t\\t\\tfor (ax, ay) in ans:\\n\\t\\t\\t\\t\\tif abs(cx - ax) < EPS and abs(cy - ay) < EPS:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tans.append(cp)\\n\\t\\tif len(ans) == 0:\\n\\t\\twrite('None\\\\n')\\n\\telif len(ans) > 1:\\n\\t\\twrite('Many\\\\n')\\n\\telse:\\n\\t\\twrite('%.16f %.16f\\\\n' % ans[0])\\n\\treturn True\\nwhile solve():\\n\\t...\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding a point that has equal distance from all the lines provided in the input. The program should output the coordinates of the point if only one such point exists. It should output \\\"Many\\\" if multiple such points exist and \\\"None\\\" if no such point exists.\\n- Geometric considerations: The key insight is that the point equidistant from two lines must lie on one of the two angle bisectors of the lines. The problem can be solved by finding the intersection point of the angle bisectors of the lines, and then verifying if that point is equidistant from all the lines.\\n- Algorithmic strategy: The solution involves calculating the angle bisectors of all pairs of lines, then finding the intersection points of all pairs of bisectors. Finally, check if these intersection points are equidistant from all the lines in the input. If there is only one such point, output the coordinates. If there are many such points, output 'Many'. If there are no such points, output 'None'.\\n- Handling Edge Cases: If the number of lines is less than or equal to 2, there are infinitely many solutions ('Many'). If no intersection of bisectors is found, or none of the intersection points are equidistant from all lines, then the answer is 'None'. Account for floating point precision errors by using a small tolerance value (EPS).\",\n  \"LLM Questions\": [\n    \"How can we determine the equation of a line given two points?\",\n    \"How can we find the equations of the angle bisectors of two lines?\",\n    \"How can we find the intersection point of two lines?\",\n    \"How can we calculate the distance from a point to a line?\",\n    \"How do we account for floating-point precision when comparing distances?\",\n    \"How do we handle the edge cases where there are no solutions or infinitely many solutions?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The equation of a line can be determined by first calculating the slope (m) using the two points (x1, y1) and (x2, y2), where m = (y2 - y1) / (x2 - x1).  Then, the equation of the line can be written as y = mx + b.  We can substitute one of the points to solve for the y-intercept, b.\",\n    \"The angle bisectors can be found by using the formula derived from the property that a point on the bisector is equidistant from both lines. The two bisectors will have different signs in the formula.\",\n    \"To find the intersection point of two lines, solve the system of two linear equations. If the lines are given by y = m1x + b1 and y = m2x + b2, then set the equations equal to each other: m1x + b1 = m2x + b2.  Solve for x, and then substitute x back into either equation to find y.\",\n    \"The distance from a point (x0, y0) to a line ax + by + c = 0 is given by the formula |ax0 + by0 + c| / sqrt(a^2 + b^2). Convert the line equation from two point to this form.\",\n    \"Instead of checking for exact equality when comparing distances, check if the absolute difference between the distances is smaller than a small tolerance value (EPS), e.g., abs(distance1 - distance2) < EPS.\",\n    \"If the number of lines is less than or equal to 2, then there are infinitely many solutions ('Many'). If no intersection of bisectors is found, or none of the intersection points are equidistant from all lines, then the answer is 'None'.\"\n  ]\n}\n```"