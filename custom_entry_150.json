"```json\n{\n  \"Coding Problem\": \"Chef has decided to arrange the free shuttle service for his employees. City of Bhiwani has a strange layout - all of its N shuttle boarding points are arranged in a circle, numbered from 1 to N in clockwise direction. Chef's restaurant is at boarding point number 1. There is a single ring road that runs over the circumference of this circle and connects all the boarding points. There are also N - 1 different shuttle agencies available in Bhiwani.\\n\\nFor every different boarding points A and B there is exactly one shuttle that connects these points and it belongs to K^{th} shuttle agency where K is the distance between A and B in clockwise direction, that is, there are exactly K - 1 boarding points between points A and B in clockwise direction. Denote this shuttle as (A, B). So if N = 4, first agency has shuttles (1,2), (2,3), (3,4), (4,1), second agency has shuttles (1,3), (2,4) and the shuttles of third agency are (1,4), (2,1), (3,2), (4,3). If the shuttle connects points A and B, it is possible to go from A to B as well as from B to A using this shuttle.\\n\\nChef is planning to make a contract with one of the agencies so that all of his employees are able to travel in shuttles of that agency for free. He therefore wants to choose such a shuttle agency so that people from any boarding point can reach his restaurant only using shuttles of the chosen agency possibly using some intermediate boarding points. Your task is to find how many such shuttle agencies are there.\\n\\n------ Input ------ \\n\\nFirst line contains an integer T denoting number of test cases. After that T lines follow each containing a single integer N denoting number of shuttle boarding points in Bhiwani. \\n\\n------ Output ------ \\n\\nFor every test case, output the number of shuttle agencies our chef could choose. \\n\\n------ Constraints ------ \\n\\n1 \u2264 T \u2264 100\\n\\n2 \u2264 N \u2264 10000\\n\\n----- Sample Input 1 ------ \\n3\\n2\\n3\\n4\\n----- Sample Output 1 ------ \\n1\\n2\\n2\\n----- explanation 1 ------ \\nIn third case, there are 4 shuttle boarding points and there are 4 - 1 = 3 shuttle agencies. Using shuttles of only second agency, one can move between points (1,3) and points (2,4). So a person starting from point 2 can't reach restaurant using these shuttles. Each of the other two agencies connects all the points with the restaurant possibly through intermediate boarding points.\",\n  \"Ground Truth Solution\": \"vec = []\\n\\ndef precal():\\n\\tne = 5000\\n\\tis_prime = [True] * (ne + 1)\\n\\tis_prime[0] = is_prime[1] = False\\n\\tp = 2\\n\\twhile p * p <= ne:\\n\\t\\tif is_prime[p]:\\n\\t\\t\\tfor i in range(p * p, ne + 1, p):\\n\\t\\t\\t\\tis_prime[i] = False\\n\\t\\tp += 1\\n\\tfor i in range(2, ne + 1):\\n\\t\\tif is_prime[i]:\\n\\t\\t\\tvec.append(i)\\nprecal()\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tresult = n - 1\\n\\tvec2 = [0] * n\\n\\tfor v in vec:\\n\\t\\tif v > n // 2:\\n\\t\\t\\tbreak\\n\\t\\tif n % v == 0:\\n\\t\\t\\tfor i in range(v, n, v):\\n\\t\\t\\t\\tvec2[i] = 1\\n\\tsuma = 0\\n\\tfor v in vec2:\\n\\t\\tsuma += v\\n\\tresult -= suma\\n\\tprint(result)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The problem asks us to find the number of shuttle agencies that can connect all boarding points to the restaurant (boarding point 1). The shuttle agencies are numbered based on the distance between boarding points they connect. We need to check if an agency allows travel from any boarding point to the restaurant using only its shuttles.\\n- Identifying Valid Agencies: An agency is valid if, using only the shuttles of that agency, it's possible to travel from any boarding point to the restaurant (boarding point 1). This means the agency's shuttles must form a connected graph where every node (boarding point) can reach node 1.\\n- Connecting to Number Theory: An agency K is invalid if K is a divisor of N, because the graph would break into groups of size K, and restaurant (1) may not be in same group with other node. For instance, If n=6, k=2, agency 2 will contains (1,3), (2,4), (3,5), (4,6), (5,1) , (6,2). From point 2, one can only reach point 4, point 6. So the key is to identify the number of divisors from 2 to n//2. If k is a divisor of n, with divisor as v, the boarding point that will be isolated from point 1 are v, 2v, 3v, ... , n. Those will be count as invalid agency.\\n- Prime Number Consideration: Generate prime number to check its divisor. In reality, prime numbers need only to be calculated up to n//2. After that, can count number of divisor.\",\n  \"LLM Questions\": [\n    \"What is the core requirement for a shuttle agency to be considered valid?\",\n    \"How does the clockwise distance between boarding points relate to the agency number?\",\n    \"What happens when the agency number (distance) is a divisor of the total number of boarding points?\",\n    \"Can you explain the significance of divisors of N in determining the validity of an agency?\",\n    \"How to count the number of divisors for an agency to be considered valid?\",\n    \"If an agency has 'K' as the distance between the stops, how will the stops look like for each of the routes, and which route do we need to check for being valid.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A shuttle agency is valid if its shuttles allow travel from any boarding point to the restaurant (boarding point 1), possibly through intermediate points.\",\n    \"The agency number corresponds to the clockwise distance between the boarding points connected by its shuttles.\",\n    \"If the agency number is a divisor of the total number of boarding points, the graph formed by the agency's shuttles might break into disconnected components, preventing travel from all points to the restaurant.\",\n    \"If N has a divisor 'v' then using K=v agency shuttles, the points are divided into a components of size v. As a result, if point 1 and point 'p' are not in the same component, then they won't be able to reach each other.\",\n    \"Need to calculate the divisors from 2 to n//2. Need to check what routes are valid if an agency has a distance of k\",\n    \"The stops for each route for the given distance K is the sequence of points that are 'K' apart in the clockwise direction, i.e., (1, 1+K), (2, 2+K), (3, 3+K)...(N, N+K). Need to check all routes from 1 to N to confirm the routes are valid.\"\n  ]\n}\n```"