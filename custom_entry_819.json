"```json\n{\n  \"Coding Problem\": \"Do you know Just Odd Inventions? The business of this company is to \\\"just odd inventions\\\". Here, it is abbreviated as JOI.\\n\\nJOI is conducting research to confine many microorganisms in one petri dish alive. There are N microorganisms to be investigated, and they are numbered 1, 2, ..., N. When each microorganism is trapped in a petri dish, it instantly releases a harmful substance called foo (fatally odd object) into the petri dish. The amount of foo released by each microorganism is known. The foo released by all the microorganisms trapped in the petri dish is evenly ingested by each microorganism in the petri dish. The foo tolerance of each microorganism is known, and if foo is ingested in excess of this amount, the microorganism will die.\\n\\nThe foo release amount of the microorganism i is ai milligrams, and the foo tolerance is bi milligrams. That is, when the microorganisms i1, i2, ..., ik are trapped in the petri dish, each microorganism in the petri dish ingests (ai1 + ai2 + ... + aik) / k milligrams of foo, and the microorganisms in the petri dish ingest. i will die if this intake is greater than bi.\\n\\nOn behalf of JOI, you must keep as many microorganisms alive in the petri dish as possible. However, no microbes in the petri dish should die from ingestion of foo, as carcasses of microorganisms adversely affect the environment in the petri dish.\\n\\nIt is still a mystery how JOI profits from making \\\"just a strange invention\\\", and no one in JOI knows except the president.\\n\\n\\n\\ninput\\n\\nRead the following input from standard input.\\n\\n* The integer N is written on the first line, which indicates that there are N microorganisms to be investigated.\\n* The following N lines contain information on each microorganism. On the first line of i + (1 \u2264 i \u2264 N), the positive integers ai and bi are written separated by blanks, and the foo emission amount of the microorganism i is ai milligrams and the foo tolerance is bi milligrams. Represent.\\n\\noutput\\n\\nOutput the maximum number of microorganisms that can be confined in one petri dish to the standard output in one line.\\n\\nExample\\n\\nInput\\n\\n6\\n12 8\\n5 9\\n2 4\\n10 12\\n6 7\\n13 9\\n\\n\\nOutput\\n\\n3\",\n  \"Ground Truth Solution\": \"import heapq\\ntbl = []\\nN = int(input())\\nfor i in range(N):\\n\\t(a, b) = map(int, input().split())\\n\\ttbl.append((a, b))\\ntbl.sort()\\nQ = []\\nans = s = sz = 0\\nfor t in tbl:\\n\\ts += t[0]\\n\\theapq.heappush(Q, (t[1], t[0]))\\n\\tsz += 1\\n\\twhile sz and sz * Q[0][0] < s:\\n\\t\\ts -= Q[0][1]\\n\\t\\theapq.heappop(Q)\\n\\t\\tsz -= 1\\n\\tif sz > ans:\\n\\t\\tans = sz\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to maximize the number of microorganisms in a petri dish without any of them dying. Microorganisms release 'foo', and each can only tolerate a certain amount. The amount of foo each microorganism ingests is the total foo released divided by the number of microorganisms present.\\n- Formulating a Strategy: We can iterate through possible combinations of microorganisms. For each combination, we compute the average foo intake per microorganism. If all microorganisms survive, we update our maximum count. A more efficient approach would involve sorting the microorganisms based on some criteria and using a priority queue to dynamically maintain the set of alive microorganisms.\\n- Considering Data Structures: A list to store microorganisms, each represented by a tuple (foo release amount, foo tolerance). A priority queue (heap) to track the microorganisms in the petri dish, prioritizing those with the lowest tolerance. This allows us to efficiently determine if adding a new microorganism will cause any existing ones to die.\\n- Handling Edge Cases: An empty input. Cases where no microorganism can survive with any others. Cases where all microorganisms can survive together.\\n- Optimization Considerations: Sorting the microorganisms can significantly improve efficiency. Utilizing a heap to track the minimum tolerance in the current set allows for faster checks on survival.\",\n  \"LLM Questions\": [\n    \"How would you represent each microorganism and its properties in your code?\",\n    \"How can you determine if a particular combination of microorganisms will result in all of them surviving?\",\n    \"What is the most efficient way to iterate through all possible combinations of microorganisms, and how could you optimize this?\",\n    \"How does sorting the microorganisms based on different criteria affect the efficiency of the algorithm, and which sorting order is most effective?\",\n    \"Can you describe the role of the heap data structure in maintaining the alive microorganisms and efficiently calculating the survival status?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Each microorganism can be represented as a tuple (a, b), where a is the foo release amount and b is the foo tolerance.\",\n    \"For a combination of microorganisms to survive, the average foo intake (total foo release / number of microorganisms) must be less than or equal to the foo tolerance of each microorganism in the combination.\",\n    \"Iterating through all possible combinations naively (using itertools.combinations) is computationally expensive, especially with a large number of microorganisms. Sorting the microorganisms and selectively adding/removing them based on their foo release and tolerance properties could offer a more efficient way to construct valid combinations. Start with an empty set and add the microorganism with the lowest a/b ratio first and then check if the current combination is a viable combination.\",\n    \"Sorting can significantly improve efficiency. Sorting based on foo tolerance can help prioritize microorganisms with lower tolerances, allowing for faster elimination of incompatible combinations. Sorting based on a/b helps when deciding which microorganism to add to the combination first.\",\n    \"The heap (priority queue) helps to keep track of the microorganisms in the petri dish with minimum tolerance. The main function of the heap is to determine the minimum tolerance, and based on the minimum tolerance, we can determine if adding an additional microorganism is viable and still maintain all the microorganisms in the current petri dish alive.\"\n  ]\n}\n```"