"```json\n{\n  \"Coding Problem\": \"You are given a graph with 3 \u22c5 n vertices and m edges. You are to find a matching of n edges, or an independent set of n vertices.\\n\\nA set of edges is called a matching if no two edges share an endpoint.\\n\\nA set of vertices is called an independent set if no two vertices are connected with an edge.\\n\\nInput\\n\\nThe first line contains a single integer T \u2265 1 \u2014 the number of graphs you need to process. The description of T graphs follows.\\n\\nThe first line of description of a single graph contains two integers n and m, where 3 \u22c5 n is the number of vertices, and m is the number of edges in the graph (1 \u2264 n \u2264 10^{5}, 0 \u2264 m \u2264 5 \u22c5 10^{5}).\\n\\nEach of the next m lines contains two integers v_i and u_i (1 \u2264 v_i, u_i \u2264 3 \u22c5 n), meaning that there is an edge between vertices v_i and u_i.\\n\\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\\n\\nIt is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^{5}, and the sum of all m over all graphs in a single test does not exceed 5 \u22c5 10^{5}.\\n\\nOutput\\n\\nPrint your answer for each of the T graphs. Output your answer for a single graph in the following format.\\n\\nIf you found a matching of size n, on the first line print \\\"Matching\\\" (without quotes), and on the second line print n integers \u2014 the indices of the edges in the matching. The edges are numbered from 1 to m in the input order.\\n\\nIf you found an independent set of size n, on the first line print \\\"IndSet\\\" (without quotes), and on the second line print n integers \u2014 the indices of the vertices in the independent set.\\n\\nIf there is no matching and no independent set of the specified size, print \\\"Impossible\\\" (without quotes).\\n\\nYou can print edges and vertices in any order.\\n\\nIf there are several solutions, print any. In particular, if there are both a matching of size n, and an independent set of size n, then you should print exactly one of such matchings or exactly one of such independent sets.\\n\\nExample\\n\\nInput\\n\\n\\n4\\n1 2\\n1 3\\n1 2\\n1 2\\n1 3\\n1 2\\n2 5\\n1 2\\n3 1\\n1 4\\n5 1\\n1 6\\n2 15\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 6\\n\\n\\nOutput\\n\\n\\nMatching\\n2\\nIndSet\\n1\\nIndSet\\n2 4\\nMatching\\n1 15\\n\\nNote\\n\\nThe first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer.\\n\\nThe third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set (or matching) of size exactly n.\\n\\nThe fourth graph does not have an independent set of size 2, but there is a matching of size 2.\",\n  \"Ground Truth Solution\": \"import sys\\ninput = sys.stdin.readline\\nT = int(input())\\nfor _ in range(T):\\n\\t(n, m) = map(int, input().split())\\n\\tv = [True] * (3 * n + 1)\\n\\te = [0] * n\\n\\tptr = 0\\n\\tfor i in range(1, m + 1):\\n\\t\\t(a, b) = map(int, input().split())\\n\\t\\tif ptr < n and v[a] and v[b]:\\n\\t\\t\\te[ptr] = i\\n\\t\\t\\tptr += 1\\n\\t\\t\\tv[a] = False\\n\\t\\t\\tv[b] = False\\n\\tif ptr == n:\\n\\t\\tprint('Matching')\\n\\t\\tprint(*e)\\n\\telse:\\n\\t\\tprint('IndSet')\\n\\t\\tcnt = 0\\n\\t\\tfor i in range(1, n * 3 + 1):\\n\\t\\t\\tif v[i]:\\n\\t\\t\\t\\tprint(i, end=' ')\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\tif cnt == n:\\n\\t\\t\\t\\tprint()\\n\\t\\t\\t\\tbreak\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The task is to find either a matching of size 'n' or an independent set of size 'n' in a given graph. A matching consists of 'n' edges where no two edges share a vertex, and an independent set consists of 'n' vertices where no two vertices are connected by an edge.\\n- Algorithm Choice: Prioritize finding a matching first. Iterate through the edges; if both vertices of an edge are currently unmatched (available), add the edge to the matching and mark the vertices as matched (unavailable). If a matching of size 'n' is found, output it. If not, try to find an independent set.\\n- Independent Set Construction: If a matching is not found, iterate through the vertices. Any vertices that remain unmatched can be part of the independent set. Select 'n' of these vertices to form the independent set. If enough independent vertices are found, output them.\\n- Handling Failure: If neither a matching nor an independent set of size 'n' can be found, output \\\"Impossible\\\".\",\n  \"LLM Questions\": [\n    \"What are the definitions of a matching and an independent set in a graph?\",\n    \"If both a matching and an independent set of size n exist, which one should be outputted?\",\n    \"How should the graph be represented, and how can the availability of vertices be tracked?\",\n    \"What should the algorithm do if it cannot find a matching or an independent set of size n?\",\n    \"How can you efficiently determine if an edge can be added to the matching during the matching construction phase?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A matching is a set of edges where no two edges share a vertex. An independent set is a set of vertices where no two vertices are connected by an edge.\",\n    \"The problem states that if both a matching and an independent set of size 'n' exist, you can print either one.\",\n    \"The graph is represented by a list of edges. The availability of vertices can be tracked using a boolean array or set, where True indicates the vertex is available and False indicates it is part of a matching.\",\n    \"If neither a matching nor an independent set of size 'n' can be found, the algorithm should output \\\"Impossible\\\".\",\n    \"To efficiently determine if an edge can be added to the matching, check if both vertices connected by that edge are currently marked as available (not yet included in any edge of the matching).\"\n  ]\n}\n```"