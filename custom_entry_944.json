"```json\n{\n  \"Coding Problem\": \"You are given an array $a$ consisting of $n$ positive integers.\\n\\nYou are allowed to perform this operation any number of times (possibly, zero):\\n\\nchoose an index $i$ ($2 \\\\le i \\\\le n$), and change $a_i$ to $a_i - a_{i-1}$.\\n\\nIs it possible to make $a_i=0$ for all $2\\\\le i\\\\le n$?\\n\\n\\n-----Input-----\\n\\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1\\\\le t\\\\le 100$)  \u2014 the number of test cases. The description of the test cases follows.\\n\\nThe first line contains one integer $n$ ($2 \\\\le n \\\\le 100$) \u2014 the length of array $a$.\\n\\nThe second line contains $n$ integers $a_1,a_2,\\\\ldots,a_n$ ($1 \\\\le a_i \\\\le 10^9$).\\n\\n\\n-----Output-----\\n\\nFor each test case, print \\\"YES\\\" (without quotes), if it is possible to change $a_i$ to $0$ for all $2 \\\\le i \\\\le n$, and \\\"NO\\\" (without quotes) otherwise.\\n\\nYou can print letters in any case (upper or lower).\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n2\\n5 10\\n3\\n1 2 3\\n4\\n1 1 1 1\\n9\\n9 9 8 2 4 4 3 5 3\\nOutput\\nYES\\nYES\\nYES\\nNO\\n\\n\\n-----Note-----\\n\\nIn the first test case, the initial array is $[5,10]$. You can perform $2$ operations to reach the goal:\\n\\nChoose $i=2$, and the array becomes $[5,5]$.\\n\\nChoose $i=2$, and the array becomes $[5,0]$.\\n\\nIn the second test case, the initial array is $[1,2,3]$. You can perform $4$ operations to reach the goal:\\n\\nChoose $i=3$, and the array becomes $[1,2,1]$.\\n\\nChoose $i=2$, and the array becomes $[1,1,1]$.\\n\\nChoose $i=3$, and the array becomes $[1,1,0]$.\\n\\nChoose $i=2$, and the array becomes $[1,0,0]$.\\n\\nIn the third test case, you can choose indices in the order $4$, $3$, $2$.\",\n  \"Ground Truth Solution\": \"T = int(input())\\nfor t in range(T):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmarker = True\\n\\tfor i in range(1, n):\\n\\t\\tif l[i] / l[0] == l[i] // l[0]:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tmarker = False\\n\\t\\t\\tbreak\\n\\tif not marker:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The goal is to determine if we can make all elements from index 1 to n-1 equal to zero by repeatedly subtracting the previous element from the current element. The operations must be done in place. We are given an array of positive integers.\\n- Identifying Potential Pitfalls: If any element `a[i]` is not a multiple of `a[0]` for `i > 0`, then it's impossible to make that element 0. Consider edge cases such as when a[0] is 0.  Since the input specifies positive integers, a[0] is guaranteed to be non-zero.\\n- Selecting an Algorithmic Strategy: The core idea is to check if each element from a[1] onwards is divisible by a[0].  If all are divisible, the answer is YES; otherwise, the answer is NO.\\n- Implementing the Solution: Iterate through the array from index 1. For each element, check if it's divisible by a[0]. If any element is not divisible, immediately output NO. If the loop completes without finding a non-divisible element, output YES.\",\n  \"LLM Questions\": [\n    \"What does it mean for an array element `a[i]` to be 'made zero' using the given operation, and what is the significance of `a[0]` in this process?\",\n    \"What happens if at least one `a[i]` is not divisible by `a[0]`?\",\n    \"How can the solution be implemented efficiently, considering the constraints?\",\n    \"Given an example array, walk through the process of determining whether the answer is 'YES' or 'NO'.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Making an array element `a[i]` zero involves repeatedly subtracting the previous element `a[i-1]` from `a[i]`. Eventually, `a[i]` can be made zero *only if* `a[i]` is divisible by `a[0]`. `a[0]` acts as the base value that is subtracted indirectly from all elements to its right.\",\n    \"If at least one `a[i]` is not divisible by `a[0]`, then it's impossible to make that element zero, regardless of the number of operations. In this case, the overall answer should be 'NO'.\",\n    \"The solution can be implemented efficiently by iterating through the array once, starting from index 1. For each element, perform a division check (`a[i] % a[0] == 0`). If the check fails, immediately output 'NO' and terminate. If the loop completes, output 'YES'.\",\n    \"Consider the array `a = [3, 6, 9, 12, 15]`. Here, `a[0] = 3`.  Since all other elements (6, 9, 12, 15) are divisible by 3, the answer is 'YES'.  Now consider array `a = [2, 5, 8]`. Here, `a[0] = 2`. Since 5 is not divisible by 2, the answer is 'NO'.\"\n  ]\n}\n```"