"```json\n{\n  \"Coding Problem\": \"Innokenty works at a flea market and sells some random stuff rare items. Recently he found an old rectangular blanket. It turned out that the blanket is split in $n \\cdot m$ colored pieces that form a rectangle with $n$ rows and $m$ columns. \\n\\nThe colored pieces attracted Innokenty's attention so he immediately came up with the following business plan. If he cuts out a subrectangle consisting of three colored stripes, he can sell it as a flag of some country. Innokenty decided that a subrectangle is similar enough to a flag of some country if it consists of three stripes of equal heights placed one above another, where each stripe consists of cells of equal color. Of course, the color of the top stripe must be different from the color of the middle stripe; and the color of the middle stripe must be different from the color of the bottom stripe.\\n\\nInnokenty has not yet decided what part he will cut out, but he is sure that the flag's boundaries should go along grid lines. Also, Innokenty won't rotate the blanket. Please help Innokenty and count the number of different subrectangles Innokenty can cut out and sell as a flag. Two subrectangles located in different places but forming the same flag are still considered different. [Image]\u00a0[Image]\u00a0[Image]\\n\\nThese subrectangles are flags.  [Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\\n\\nThese subrectangles are not flags. \\n\\n\\n-----Input-----\\n\\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1\\,000$)\u00a0\u2014 the number of rows and the number of columns on the blanket.\\n\\nEach of the next $n$ lines contains $m$ lowercase English letters from 'a' to 'z' and describes a row of the blanket. Equal letters correspond to equal colors, different letters correspond to different colors.\\n\\n\\n-----Output-----\\n\\nIn the only line print the number of subrectangles which form valid flags.\\n\\n\\n-----Examples-----\\nInput\\n4 3\\naaa\\nbbb\\nccb\\nddd\\n\\nOutput\\n6\\n\\nInput\\n6 1\\na\\na\\nb\\nb\\nc\\nc\\n\\nOutput\\n1\\n\\n\\n-----Note----- [Image]\u00a0[Image]\\n\\nThe selected subrectangles are flags in the first example.\",\n  \"Ground Truth Solution\": \"(n, m) = [int(x) for x in input().split()]\\na = [[] * (m + 1) for i in range(n + 1)]\\ncols = [[0] * (m + 1) for i in range(n + 1)]\\nrows = [[0] * (m + 1) for i in range(n + 1)]\\na[0] = '*' * (m + 1)\\nfor i in range(1, n + 1):\\n\\ta[i] = '*' + input()\\nfor i in range(1, n + 1):\\n\\tfor j in range(1, m + 1):\\n\\t\\tif a[i][j] == a[i][j - 1]:\\n\\t\\t\\trows[i][j] = rows[i][j - 1] + 1\\nfor i in range(1, n + 1):\\n\\tfor j in range(1, m + 1):\\n\\t\\tif a[i][j] == a[i - 1][j]:\\n\\t\\t\\tcols[i][j] = cols[i - 1][j] + 1\\nans = 0\\nfor i in range(1, n + 1):\\n\\tfor j in range(1, m + 1):\\n\\t\\tx = cols[i][j] + 1\\n\\t\\tif i < x * 3:\\n\\t\\t\\tcontinue\\n\\t\\ty = cols[i - x][j] + 1\\n\\t\\tif x != y:\\n\\t\\t\\tcontinue\\n\\t\\tz = cols[i - x - y][j] + 1\\n\\t\\tif z < y:\\n\\t\\t\\tcontinue\\n\\t\\tminx = 2 * m\\n\\t\\tfor l in range(0, x * 3):\\n\\t\\t\\tminx = min(minx, rows[i - l][j])\\n\\t\\tans += minx + 1\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: Recognize the problem is to count the number of sub-rectangles that form a valid flag, consisting of three stripes of equal height with different colors.\\n- Identifying Constraints: Each stripe must have the same color, and the colors of adjacent stripes must be different. The flag must align with the grid lines and cannot be rotated.\\n- Choosing an Algorithmic Strategy: An approach involves iterating through all possible sub-rectangles. For each sub-rectangle, we need to check if it meets the flag criteria. This involves verifying the height of each stripe, ensuring the colors within each stripe are consistent, and confirming that adjacent stripes have different colors. Pre-calculating the lengths of consecutive same colored cells along the column and rows will significantly reduce the complexity.\\n- Edge cases: n and m are between 1 and 1000.\\n- Optimize Calculations: Store the lengths of continuous equal characters for rows and columns in separate arrays to optimize the checking process.\\n- Final Count: Accumulate the number of valid flag sub-rectangles.\",\n  \"LLM Questions\": [\n    \"What conditions must a sub-rectangle satisfy to be considered a valid flag?\",\n    \"How can the lengths of consecutive characters in both row and column can be pre-processed to make the flag verification process faster?\",\n    \"What should be the complexity of the solution to avoid TLE?\",\n    \"How does the height of each stripe in the flag affect the overall dimensions of the sub-rectangle?\",\n    \"What are the important array indexing rules to consider in this problem?\",\n    \"What is the impact of pre-calculation on time complexity?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A sub-rectangle must consist of three stripes of equal height, where each stripe has cells of the same color, and adjacent stripes must have different colors.\",\n    \"We can create two additional matrices that store the longest consecutive character lengths in both row and column. While traversing, these can be referenced to check sub-rectangle validity\",\n    \"Since the dimensions are bounded by 1000, the solution should be no worse than O(n*m*k) to avoid a TLE, where k is a constant.\",\n    \"Since there are three stripes of equal height, the sub-rectangle's height must be a multiple of 3. More specifically height = stripe_height * 3.\",\n    \"The indexing must correctly handle the dimensions of the blanket, ensuring the sub-rectangles do not exceed these dimensions.  Also, the stripe calculation has to be correct to use right indexes.\",\n    \"Pre-calculation improves efficiency by reducing repeated color checks within stripes. This will transform O(n*m*n) to approximately O(n*m)\"\n  ]\n}\n```"