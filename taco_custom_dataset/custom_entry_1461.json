"```json\n{\n  \"Coding Problem\": \"Xenny was a teacher and he had N students. The N children were sitting in a room. Each child was wearing a white T-shirt, with a unique number from the range 1 to N written on it. T-Shirts of pink and blue color were to be distributed among the students by Xenny. This made the students very happy.\\n\\nXenny felt that a random distribution of T-Shirts would be very uninteresting. So, he decided to keep an interesting condition:\\n\\nEvery student would get a T-Shirt that is of a different color than his/her friends. That is, if X and Y are friends and X has a Pink T-Shirt, then Y should compulsorily have a Blue T-Shirt, and vice-versa.\\n\\nAlso, Xenny had a belief that Boys should wear blue T-Shirts and Girls should wear pink T-Shirts. If a boy was given a pink T-Shirt or a girl was given a Blue T-Shirt, he called it an inversion.\\n\\nSo, Xenny wanted to distribute T-Shirts in the above-mentioned interesting manner and also wanted to minimize \\\"inversions\\\". Help him solve the task.\\n\\nNote: There are no disjoint groups of friends in the room. That is, 2 distinct groups with finite number of students do not exist, but exactly 1 group of students exists in the given situation.\\n\\nInput Format:\\nFirst line contains 2 space-separated integers - N and M - number of students and number of friendships present respectively.\\n\\nSecond line consists of N space-separated characters, where i^th character denotes the gender of the i^th student. B: Boy, G: Girl.\\n\\nM lines follow. Each line consists of 2 space-separated integers, u and v, showing that u is a friend of v and vice-versa.\\n\\nOutput Format:\\nIf Xenny could distribute the T-Shirts in the desired way, print the minimum number of inversions required.\\nElse, print \\\"Not possible\\\".\\n\\nConstraints:\\n1 \u2264 N \u2264 10^5\\n1 \u2264 M \u2264 10^5\\n1 \u2264 u, v \u2264 N\\n\\nColours of T-Shirt are represented by uppercase characters 'B' and 'G'\\n\\nSAMPLE INPUT\\n3 2\\nB G B\\n1 2\\n1 3\\n\\nSAMPLE OUTPUT\\n1\\n\\nExplanation\\n\\nStudent 1 can be given a Blue T-Shirt. Hence, Student 2 and 3 would receive Pink T-Shirts.\\n\\nSince, Student 3 is a Boy and has received a Pink T-Shirt, number of inversions = 1.\",\n  \"Ground Truth Solution\": \"def val(x):\\n\\tif x=='B':\\n\\t\\treturn 1\\n\\treturn 0\\nn,m=(int(e) for e in input().split())\\narr=[val(e) for e in input().split()]\\ngraph={}\\n\\n\\nfor afsafsa in range(m):\\n\\tu,v=(int(e)-1 for e in input().split())\\n\\tif u in graph:\\n\\t\\tgraph[u].append(v)\\n\\telse:\\n\\t\\tgraph[u]=[v]\\n\\tif v in graph:\\n\\t\\tgraph[v].append(u)\\n\\telse:\\n\\t\\tgraph[v]=[u]\\n\\nmem={}\\ntota_inv=0\\ndef traverse(graph,curr,val):\\n\\tglobal mem\\n\\tglobal total_inv\\n\\tif curr not in mem and graph[curr]:\\n\\t\\tif arr[curr]!=val:\\n\\t\\t\\ttotal_inv+=1\\n\\t\\tmem[curr]=True\\n\\t\\tfor e in graph[curr]:\\n\\t\\t\\ttraverse(graph,e,(val+1)%2)\\n\\ntotal_inv=0\\ntraverse(graph,0,0)\\na=total_inv\\nmem={}\\ntotal_inv=0\\ntraverse(graph,0,1)\\n\\nprint(min(a,total_inv))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires assigning T-shirts (Pink/Blue) to students such that friends have different colored T-shirts. The goal is to minimize inversions where boys wear Pink and girls wear Blue.\\n- Data Structures: Represent the friendship network as a graph where nodes are students and edges represent friendship. Represent the gender of each student using an array.\\n- Algorithmic Strategy: Since there are no disjoint groups, the graph is connected. Start assigning colors from an arbitrary node (say node 0). Assign a color to node 0, then traverse the graph using Depth First Search (DFS). In each step, assign the opposite color to the friend, and calculate the number of inversions.\\n- Minimizing Inversions: There are two possible starting assignments: assign Blue to student 0 or assign Pink to student 0. Compute inversions for both cases and choose the assignment that results in a minimum number of inversions.\\n- Edge Cases: Handle the case of an empty graph, which means no students, by outputting 0 inversions.\",\n  \"LLM Questions\": [\n    \"How can the friendship between students be represented as a data structure?\",\n    \"What does it mean by assigning colors of the T-shirts in the specified manner?\",\n    \"Since the friendship graph is connected, what algorithm will be helpful to traverse the graph?\",\n    \"What constitutes an inversion and how can it be calculated during the graph traversal?\",\n    \"How do you choose the assignment that minimizes the number of inversions?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The friendships can be represented as a graph where students are nodes and friendships are edges. An adjacency list or matrix can be used to represent the graph.\",\n    \"Assigning colors in the specified manner means that no two friends have the same color T-shirt. In other words, if a student has a Pink T-shirt, then all of his/her friends must have Blue T-shirts, and vice-versa.\",\n    \"Depth First Search (DFS) can be used to traverse the connected friendship graph, assigning colors to each student based on the color of their friends.\",\n    \"An inversion occurs when a boy wears a Pink T-shirt or a girl wears a Blue T-shirt. This number is calculated as we traverse and assign the colors. For each student, check if assigned color matches their gender. If not, increment the inversion count.\",\n    \"Because there are no disjoint components in the graph, there will only be two possibilities for color assignments. Running the DFS starting from an arbitrary node, we can try both assigning Blue and Pink, calculating total inversions for each, and choose the minimum of the two.\"\n  ]\n}\n```"