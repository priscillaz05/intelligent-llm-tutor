"```json\n{\n  \"Coding Problem\": \"Read problems statements in Mandarin Chinese here \\n\\n------ Problem Statement ------ \\n\\nLittle Elephant from Zoo of Lviv likes bamboo very much. He currently has n stems of bamboo, H_{i} - height of i-th stem of bamboo (0-based numeration). \\n\\nToday inspector Andrii from World Bamboo Association is visiting the plantation. He doesn't like current situation. He wants the height of i-th stem to be D_{i}, for each i from 0 to n-1, inclusive.\\n\\nLittle Elephant is going to buy some special substance. One bottle of such substance he can use to single stem of bamboo. After using substance for stem i, the height of i-th stem is decrased by 1 and the height of j-th stem is increased by 1 for each j not equal to i. Note that it is possible for some of the stems to have negative height, but after all transformations all stems should have positive height.\\n\\nSubstance is very expensive. Help Little Elephant and find the minimal number of bottles of substance required for changing current plantation to one that inspector wants. If it's impossible, print -1.\\n\\n------ Input ------ \\n\\nFirst line contain single integer T - the number of test cases. T test cases follow. First line of each test case contains single integer n - the number of stems in the plantation. Second line contains n integers separated by single space - starting plantation. Next line of each test case contains n integers - plantation that inspector Andrii requires.\\n\\n------ Output ------ \\n\\nIn T lines print T integers - the answers for the corresponding test cases.\\n\\n------ Constraints ------ \\n\\n1 \u2264 T \u2264 50\\n\\n1 \u2264 n \u2264 50\\n\\n1 \u2264 H_{i}, D_{i} \u2264 50\\n\\n----- Sample Input 1 ------ \\n3\\n1\\n1\\n2\\n2\\n1 2\\n2 1\\n3\\n3 2 2\\n4 5 3\\n----- Sample Output 1 ------ \\n-1\\n1\\n5\",\n  \"Ground Truth Solution\": \"class Solu(object):\\n\\n\\tdef solve(self, N, H, D):\\n\\t\\tif N == 1:\\n\\t\\t\\treturn max(H[0] - D[0], -1)\\n\\t\\telif N == 2:\\n\\t\\t\\ta = H[0] - D[0]\\n\\t\\t\\tb = H[1] - D[1]\\n\\t\\t\\tif a == 0 and b == 0:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telif a != b and abs(a) == abs(b):\\n\\t\\t\\t\\treturn abs(a)\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn -1\\n\\t\\telse:\\n\\t\\t\\td = sum(D)\\n\\t\\t\\th = sum(H)\\n\\t\\t\\tif d < h:\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\tr = (d - h) % (N - 2)\\n\\t\\t\\tif r != 0:\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\ts = (d - h) / (N - 2)\\n\\t\\t\\tfor i in range(N):\\n\\t\\t\\t\\tr = (s + H[i] - D[i]) % 2\\n\\t\\t\\t\\tif r != 0:\\n\\t\\t\\t\\t\\treturn -1\\n\\t\\t\\t\\txi = 0.5 * (s + H[i] - D[i])\\n\\t\\t\\t\\tif xi < 0:\\n\\t\\t\\t\\t\\treturn -1\\n\\t\\t\\treturn int(s)\\nsol = Solu()\\nT = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\tH = input().split(' ')\\n\\tD = input().split(' ')\\n\\tfor i in range(0, len(H)):\\n\\t\\tH[i] = int(H[i])\\n\\t\\tD[i] = int(D[i])\\n\\tres = sol.solve(n, H, D)\\n\\tprint(res)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding the minimum number of substance bottles to transform initial bamboo heights \\\\(H_i\\\\) to desired heights \\\\(D_i\\\\). Each bottle reduces one stem's height by 1 and increases all other stems' heights by 1. The heights can temporarily be negative, but the final heights must be positive.\\n- Special Cases Identification: Identifying and handling the edge cases of \\(N = 1\\) and \\(N = 2\\) where the solution requires separate handling compared to larger values of N. For \\(N=1\\), the problem reduces to comparing individual heights and outputting their difference or -1 if not feasible. For \\(N=2\\), the logic gets complex around the equality and absolute values of differences.\\n- General Case Solution: For \\(N > 2\\), the total change needed is \\\\(\\\\sum{D} - \\\\sum{H}\\\\). This change must be evenly distributed among \\(N - 2\\) stems. In other words, \\\\(\\\\sum{D} - \\\\sum{H}\\\\) must be divisible by \\\\(N - 2\\\\). Furthermore, the resulting number of bottles should be non-negative. Additional constraints, such as all final heights being positive and integer values, should also be validated.\\n- Checking for Feasibility: Crucially, ensure that if the heights can be transformed, the final heights remain positive. This will validate whether the solution is feasible or -1 needs to be returned.\\n- Integer Division and Constraints: Ensuring the problem constraints, such as integer values and the divisibility of the height differences, are carefully validated to prevent incorrect computations.\",\n  \"LLM Questions\": [\n    \"How should the difference between the sum of desired heights and the sum of initial heights be used to determine the number of substance bottles required?\",\n    \"What are the feasibility conditions to ensure a solution is possible, considering all final bamboo heights must be positive?\",\n    \"How does the logic change when N equals 1 or 2, and what conditions should be checked in these special cases?\",\n    \"What are the important numerical considerations, such as the need for integer values and the result of division, to ensure accurate calculations and adherence to problem constraints?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The difference represents the total height change needed. If the sum of desired heights is less than the sum of initial heights, the solution is impossible. Otherwise, this difference helps determine the number of substance bottles required, but it must be checked against other conditions like divisibility.\",\n    \"Feasibility depends on the ability to achieve the desired height configuration using the described operations and ensuring all final bamboo heights are positive. If any final height results in a non-positive value, the solution is not feasible, and -1 should be returned.\",\n    \"When N=1, directly compare initial and desired heights; if initial height is greater, it's impossible, otherwise return the difference. When N=2, verify that the individual height adjustments are either equal or their absolute values are equal, accounting for the redistribution of height changes between the two stems. If these are not satisfied, then it is impossible.\",\n    \"Calculations must ensure that the number of bottles used is an integer. The divisibility of the difference in sums by \\\\(N - 2\\\\) must hold, and intermediate computations must avoid floating-point errors by explicitly converting to integers where necessary. Also, the calculated number of bottles must be non-negative.\"\n  ]\n}\n```"