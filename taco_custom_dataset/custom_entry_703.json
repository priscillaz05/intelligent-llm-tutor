"```json\n{\n  \"Coding Problem\": \"Matrix of given integers\\n\\n\\na1,1 a1,2 ... a1, n\\na2,1 a2,2 ... a2, n\\n::\\nan, 1 an, 2 ... an, n\\n\\n\\nThen, create a program that outputs the maximum value of the sum of one or more consecutive terms (submatrix) in the vertical and horizontal directions and ends.\\n\\n\\n\\nInput\\n\\nThe input data is given in the following format.\\n\\n\\nn\\na1,1 a1,2 ... a1, n\\na2,1 a2,2 ... a2, n\\n::\\nan, 1 an, 2 ... an, n\\n\\n\\nn is 1 or more and 100 or less, and ai, j is -10000 or more and 10000 or less.\\n\\nOutput\\n\\nPrint the maximum value on one line.\\n\\nExamples\\n\\nInput\\n\\n3\\n1 -2 3\\n-4 5 6\\n7 8 -9\\n\\n\\nOutput\\n\\n16\\n\\n\\nInput\\n\\n4\\n1 3 -9 2\\n2 7 -1 5\\n-8 3 2 -1\\n5 0 -3 1\\n\\n\\nOutput\\n\\n15\",\n  \"Ground Truth Solution\": \"n = int(input())\\ns = [[0 for i in range(n + 1)] for j in range(n + 1)]\\nfor r in range(n):\\n\\tinp = list(map(int, input().split()))\\n\\tfor c in range(n):\\n\\t\\ts[r + 1][c + 1] = inp[c] + s[r][c + 1]\\nans = -10001\\nfor r_end in range(1, n + 1):\\n\\tfor r_start in range(r_end):\\n\\t\\tdp = [-10001]\\n\\t\\tfor c in range(1, n + 1):\\n\\t\\t\\ts_tmp = s[r_end][c] - s[r_start][c]\\n\\t\\t\\tdp.append(max(dp[c - 1] + s_tmp, s_tmp))\\n\\t\\tans = max(ans, max(dp))\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding the maximum sum of any contiguous submatrix within a given matrix.  The submatrix can be of any size from a single element to the entire matrix. The program should handle negative values.\\n- Choosing an Appropriate Algorithm: Kadane's Algorithm is used to find the maximum sum of a contiguous subarray in a 1D array. This algorithm can be extended to a 2D matrix.  Specifically, we can iterate through all possible pairs of rows (r_start, r_end).  For each pair, we calculate the sum of the elements between those rows for each column. This forms a 1D array, which we can apply Kadane's Algorithm.\\n- Preprocessing the Input: We need to read the matrix from the input and store it in a suitable data structure. A 2D array (list of lists) is a good choice. To improve efficiency, a cumulative sum matrix `s` can be precomputed to calculate the sum of elements between two rows in O(1) time.\\n- Kadane's Algorithm Implementation: The key is to maintain the maximum sum ending at each column, and the overall maximum sum found so far.\\n- Handling Negative Values: The algorithm needs to correctly handle cases where all elements are negative. Initializing the maximum sum to a very small negative value (e.g., -10001) ensures this is accounted for.\",\n  \"LLM Questions\": [\n    \"What is the size limit of the matrix and what is the range of values for each element in the matrix?\",\n    \"Can you explain Kadane's Algorithm and how it helps in finding the maximum sum of a contiguous subarray in one dimension?\",\n    \"How can you adapt Kadane's Algorithm for finding the maximum sum of a contiguous submatrix?\",\n    \"How does precomputing the cumulative sum of rows optimize the calculation of submatrix sums?\",\n    \"How do you handle the case where all the values are negative, ensuring your algorithm still identifies a valid maximum sum (even if negative)?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The matrix size is between 1x1 and 100x100. Each element in the matrix can range from -10000 to 10000.\",\n    \"Kadane's Algorithm efficiently finds the maximum sum of a contiguous subarray in a 1D array. It works by iterating through the array, maintaining a running sum and a maximum sum found so far.  If the running sum becomes negative, it's reset to zero to avoid affecting future sums.\",\n    \"To adapt Kadane's Algorithm to a 2D matrix, iterate through all possible row pairs (r_start, r_end). For each pair, create a 1D array where each element is the sum of elements between r_start and r_end for each column.  Then, apply Kadane's Algorithm on this 1D array to find the maximum sum of a contiguous submatrix between r_start and r_end.\",\n    \"Precomputing the cumulative sum of rows allows you to calculate the sum of elements between any two rows (r_start, r_end) for a given column in O(1) time.  Without it, you would need to iterate through the rows between r_start and r_end for each column, resulting in a higher time complexity.\",\n    \"Initialize the maximum sum variable to a very small negative value, such as -10001 (a value smaller than the lowest possible value in the input), before applying Kadane's Algorithm. This ensures that even if all elements are negative, the algorithm will still correctly identify the maximum (least negative) sum among the submatrices.\"\n  ]\n}\n```"