"```json\n{\n  \"Coding Problem\": \"The principal of a school likes to put challenges to the students related with finding words of certain features.\\nOne day she said: \\\"Dear students, the challenge for today is to find a word that has only one vowel and seven consonants but cannot have the letters \\\"y\\\" and \\\"m\\\". I'll give a special award for the first student that finds it.\\\" One of the students used his dictionary and spent all the night without sleeping, trying in vain to find the word. The next day, the word had not been found yet.\\nThis student observed that the principal has a pattern in the features for the wanted words: \\n\\n- The word should have **n** vowels, may be repeated, for example: in \\\"engineering\\\", n = 5.\\n\\n- The word should have **m** consonants, may be repeated also: in \\\"engineering\\\", m = 6.\\n\\n- The word should not have some forbidden letters (in an array), forbid_letters\\n\\nYou will be provided with a list of words, WORD_LIST(python/crystal), wordList(javascript), wordList (haskell), $word_list(ruby), and you have to create the function, ```wanted_words()```, that receives the three arguments in the order given above, ```wanted_words(n, m, forbid_list)```and output an array with the word or an array, having the words in the order given in the pre-loaded list, in the case of two or more words were found.\\n\\nLet's see some cases:\\n\\n```python\\nwanted_words(1, 7, [\\\"m\\\", \\\"y\\\"]) == [\\\"strength\\\"]\\nwanted_words(3, 7, [\\\"m\\\", \\\"y\\\"]) == ['afterwards', 'background', 'photograph', 'successful', 'understand']\\n```\\n\\nFor cases where no words are found the function will output an empty array.\\n\\n```python\\nwanted_words(3, 7, [\\\"a\\\", \\\"s\\\" , \\\"m\\\", \\\"y\\\"]) == []\\n```\\n\\nHelp our student to win this and the next challenges of the school. He needs to sure about a suspect that he has. That many times there are no solutions for what the principal is asking for.\\nAll words have its letters in lowercase format.\\nEnjoy it!\",\n  \"Ground Truth Solution\": \"def wanted_words(vowels, consonants, forbidden):\\n\\treturn [w for w in WORD_LIST if len(w) == vowels + consonants and sum(map(w.count, 'aeiou')) == vowels and (not any((c in w for c in forbidden)))]\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: Recognize that the task is to filter a list of words based on the number of vowels, consonants, and forbidden letters.\\n- Identifying Potential Pitfalls: Consider edge cases such as an empty word list or a forbidden list containing all vowels. Ensure accurate counting of vowels and consonants and efficient checking for forbidden letters.\\n- Selecting an Algorithmic Strategy: Use list comprehension combined with built-in string methods to filter the list of words efficiently. The filter criteria will involve checking word length, the number of vowels, and the presence of forbidden letters.\\n- Implementation Considerations: Ensure the vowel count accurately reflects 'aeiou' regardless of case. Optimize forbidden letter checks to avoid redundant iterations or string operations.\",\n  \"LLM Questions\": [\n    \"What does the function need to do in terms of inputs and expected outputs?\",\n    \"Expected Answer: The function should take the number of vowels, number of consonants and a list of forbidden characters as inputs, and return a list of words from a predefined word list that match the required vowel and consonant counts and do not contain any of the forbidden characters.\",\n    \"How can you efficiently check if a word contains any of the forbidden characters?\",\n    \"Expected Answer: You can use a boolean 'any' combined with a generator expression to efficiently check if any forbidden character exists in a word. This avoids unnecessary iterations once a forbidden character is found.\",\n    \"How do you accurately count the number of vowels in a word, and what should you consider?\",\n    \"Expected Answer: To count vowels, you can iterate over the vowels ('aeiou') and sum the occurrences of each vowel in the word using the `count` method. Ensure you are considering only the specified vowels, and handle cases if different vowels are required.\",\n    \"What data structures and built-in functions in Python would be most effective for solving this problem, and why?\",\n    \"Expected Answer: List comprehension provides a concise way to generate the list of wanted words. The 'any' function helps stop forbidden character checking as soon as one is found. The count function helps efficiently count vowels in the word.\",\n    \"What are the boundary conditions or edge cases that you might encounter and need to handle?\",\n    \"Expected Answer: Consider cases where no word matches the criteria (return an empty list), or all letters in word are vowels (not enough consonants). Ensuring the code handles these cases without errors or incorrect results is important.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The function should take the number of vowels, number of consonants and a list of forbidden characters as inputs, and return a list of words from a predefined word list that match the required vowel and consonant counts and do not contain any of the forbidden characters.\",\n    \"You can use a boolean 'any' combined with a generator expression to efficiently check if any forbidden character exists in a word. This avoids unnecessary iterations once a forbidden character is found.\",\n    \"To count vowels, you can iterate over the vowels ('aeiou') and sum the occurrences of each vowel in the word using the `count` method. Ensure you are considering only the specified vowels, and handle cases if different vowels are required.\",\n    \"List comprehension provides a concise way to generate the list of wanted words. The 'any' function helps stop forbidden character checking as soon as one is found. The count function helps efficiently count vowels in the word.\",\n    \"Consider cases where no word matches the criteria (return an empty list), or all letters in word are vowels (not enough consonants). Ensuring the code handles these cases without errors or incorrect results is important.\"\n  ]\n}\n```"