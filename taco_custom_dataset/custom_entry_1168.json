"```json\n{\n  \"Coding Problem\": \"Polycarp is flying in the airplane. Finally, it is his favorite time \u2014 the lunchtime. The BerAvia company stewardess is giving food consecutively to all the passengers from the 1-th one to the last one. Polycarp is sitting on seat m, that means, he will be the m-th person to get food.\\n\\nThe flight menu has k dishes in total and when Polycarp boarded the flight, he had time to count the number of portions of each dish on board. Thus, he knows values a_1, a_2, ..., a_{k}, where a_{i} is the number of portions of the i-th dish.\\n\\nThe stewardess has already given food to m - 1 passengers, gave Polycarp a polite smile and asked him what he would prefer. That's when Polycarp realized that they might have run out of some dishes by that moment. For some of the m - 1 passengers ahead of him, he noticed what dishes they were given. Besides, he's heard some strange mumbling from some of the m - 1 passengers ahead of him, similar to phrase 'I'm disappointed'. That happened when a passenger asked for some dish but the stewardess gave him a polite smile and said that they had run out of that dish. In that case the passenger needed to choose some other dish that was available. If Polycarp heard no more sounds from a passenger, that meant that the passenger chose his dish at the first try.\\n\\nHelp Polycarp to find out for each dish: whether they could have run out of the dish by the moment Polyarp was served or that dish was definitely available.\\n\\n\\n-----Input-----\\n\\nEach test in this problem consists of one or more input sets. First goes a string that contains a single integer t (1 \u2264 t \u2264 100 000) \u2014 the number of input data sets in the test. Then the sets follow, each set is preceded by an empty line.\\n\\nThe first line of each set of the input contains integers m, k (2 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 100 000) \u2014 the number of Polycarp's seat and the number of dishes, respectively.\\n\\nThe second line contains a sequence of k integers a_1, a_2, ..., a_{k} (1 \u2264 a_{i} \u2264 100 000), where a_{i} is the initial number of portions of the i-th dish.\\n\\nThen m - 1 lines follow, each line contains the description of Polycarp's observations about giving food to a passenger sitting in front of him: the j-th line contains a pair of integers t_{j}, r_{j} (0 \u2264 t_{j} \u2264 k, 0 \u2264 r_{j} \u2264 1), where t_{j} is the number of the dish that was given to the j-th passenger (or 0, if Polycarp didn't notice what dish was given to the passenger), and r_{j} \u2014 a 1 or a 0, depending on whether the j-th passenger was or wasn't disappointed, respectively.\\n\\nWe know that sum a_{i} equals at least m, that is,Polycarp will definitely get some dish, even if it is the last thing he wanted. It is guaranteed that the data is consistent.\\n\\nSum m for all input sets doesn't exceed 100 000. Sum k for all input sets doesn't exceed 100 000.\\n\\n\\n-----Output-----\\n\\nFor each input set print the answer as a single line. Print a string of k letters \\\"Y\\\" or \\\"N\\\". Letter \\\"Y\\\" in position i should be printed if they could have run out of the i-th dish by the time the stewardess started serving Polycarp.\\n\\n\\n-----Examples-----\\nInput\\n2\\n\\n3 4\\n2 3 2 1\\n1 0\\n0 0\\n\\n5 5\\n1 2 1 3 1\\n3 0\\n0 0\\n2 1\\n4 0\\n\\nOutput\\nYYYY\\nYYYNY\\n\\n\\n-----Note-----\\n\\nIn the first input set depending on the choice of the second passenger the situation could develop in different ways:  If he chose the first dish, then by the moment the stewardess reaches Polycarp, they will have run out of the first dish;  If he chose the fourth dish, then by the moment the stewardess reaches Polycarp, they will have run out of the fourth dish;  Otherwise, Polycarp will be able to choose from any of the four dishes. \\n\\nThus, the answer is \\\"YNNY\\\".\\n\\nIn the second input set there is, for example, the following possible scenario. First, the first passenger takes the only third dish, then the second passenger takes the second dish. Then, the third passenger asks for the third dish, but it is not available, so he makes disappointed muttering and ends up with the second dish. Then the fourth passenger takes the fourth dish, and Polycarp ends up with the choice between the first, fourth and fifth dish.\\n\\nLikewise, another possible scenario is when by the time the stewardess comes to Polycarp, they will have run out of either the first or the fifth dish (this can happen if one of these dishes is taken by the second passenger). It is easy to see that there is more than enough of the fourth dish, so Polycarp can always count on it. Thus, the answer is \\\"YYYNY\\\".\",\n  \"Ground Truth Solution\": \"import sys\\nn = int(input())\\nfor i in range(n):\\n\\tsys.stdin.readline()\\n\\t(q, w) = map(int, sys.stdin.readline().split())\\n\\tkol = list(map(int, sys.stdin.readline().split()))\\n\\tr = []\\n\\te = []\\n\\tfor ii in range(q - 1):\\n\\t\\t(a, s) = map(int, sys.stdin.readline().split())\\n\\t\\ta -= 1\\n\\t\\tr.append(a)\\n\\t\\te.append(s)\\n\\trw = [0 for uu in kol]\\n\\tfor ii in range(q - 1):\\n\\t\\tif r[ii] != -1:\\n\\t\\t\\trw[r[ii]] += 1\\n\\tnd = [0 for uu in kol]\\n\\tl = [uu for uu in kol]\\n\\trez = [False for uu in kol]\\n\\tqw = 0\\n\\ttr = True\\n\\tfor ii in range(q - 1):\\n\\t\\tif e[ii] == 1 and tr:\\n\\t\\t\\tsu = []\\n\\t\\t\\tfor iii in range(w):\\n\\t\\t\\t\\tif nd[iii] < rw[iii]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tif l[iii] > qw:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tsu.append(iii)\\n\\t\\t\\tif len(su) == 0:\\n\\t\\t\\t\\traise AssertionError\\n\\t\\t\\tfor iii in su:\\n\\t\\t\\t\\trez[iii] = True\\n\\t\\t\\tqw -= min(map(lambda iii: l[iii], su))\\n\\t\\t\\ttr = False\\n\\t\\tif r[ii] != -1:\\n\\t\\t\\tl[r[ii]] -= 1\\n\\t\\t\\tnd[r[ii]] += 1\\n\\t\\t\\tif l[r[ii]] == 0:\\n\\t\\t\\t\\ttr = False\\n\\t\\telse:\\n\\t\\t\\tqw += 1\\n\\tfor iii in range(w):\\n\\t\\tif l[iii] <= qw:\\n\\t\\t\\trez[iii] = True\\n\\tsys.stdout.write(''.join(map(lambda x: 'Y' if x else 'N', rez)) + '\\\\n')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The task is to determine, for each dish, whether it's possible that the dish has run out by the time Polycarp is served. The input provides the number of dishes, the initial quantity of each dish, and a record of what dishes were taken by previous passengers, including whether they were disappointed (meaning their first choice was unavailable).\\n- Identify Key Factors: The 'disappointment' events are crucial. If a passenger was disappointed, it means at least one dish was unavailable. If we don't know what dish they initially wanted, any dish *could* have been the one that ran out. If a passenger *wasn't* disappointed and we know what they selected, that dish count goes down.\\n- Develop a Strategy: Simulate possible scenarios. Keep track of the minimum possible quantity remaining for each dish, considering all possible choices of disappointed passengers. If the minimum possible quantity is zero, then that dish could have run out.\\n- Implement Possible Scenarios: Iterate through the passengers ahead of Polycarp. If a passenger took a known dish, decrement its count. If a passenger was disappointed and the dish taken isn't known, increment the 'unknown disappointed' counter. After processing all passengers, check if the count of each dish is less than or equal to the number of 'unknown disappointed' passengers. If it is, then it is possible for the dish to be unavailable.\",\n  \"LLM Questions\": [\n    \"What does the 'disappointed' status of a passenger tell you, and how does that impact the availability of dishes?\",\n    \"How do you keep track of the minimum possible remaining quantity of each dish, considering the uncertainty introduced by 'disappointed' passengers?\",\n    \"If a passenger is disappointed but you don't know their initial dish choice, what does that imply for the availability of other dishes?\",\n    \"After simulating the passengers' choices, how do you determine whether a dish could have run out by the time Polycarp is served?\",\n    \"Are there any specific edge cases or constraints to consider beyond what is explicitly stated in the problem?\",\n    \"How does the assumption that sum a_i >= m simplify the problem?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If a passenger is 'disappointed', it means at least one dish was unavailable when they initially asked for it. This means some dish had a chance of running out.\",\n    \"Keep a running count of portions left for each dish. Whenever a 'disappointed' event happens with an unknown dish selection, increase the number of possible unfulfilled requests.\",\n    \"If a passenger is disappointed and you don't know their initial choice, *any* dish could have been their first choice. This affects the count of each dish and could lead to the dish being unavailable for Polycarp.\",\n    \"A dish can run out if the initial count minus the known portions taken is less than or equal to the total possible unfulfilled requests.\",\n    \"Consider cases where the initial counts are very small, or the number of disappointed passengers is high.  There are no specific edge cases to be especially concerned about, since input data is guaranteed to be consistent.\",\n    \"It guarantees that even in the worst case when all other available dishes have been taken, Polycarp can still get some dish so there's no need to consider the scenario where Polycarp can't pick anything.\"\n  ]\n}\n```"