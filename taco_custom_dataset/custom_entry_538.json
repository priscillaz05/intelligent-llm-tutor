"```json\n{\n  \"Coding Problem\": \"You got a job as a marketer in a pet shop, and your current task is to boost sales of cat food. One of the strategies is to sell cans of food in packs with discounts. \\n\\nSuppose you decided to sell packs with $a$ cans in a pack with a discount and some customer wants to buy $x$ cans of cat food. Then he follows a greedy strategy:   he buys $\\\\left\\\\lfloor \\\\frac{x}{a} \\\\right\\\\rfloor$ packs with a discount;  then he wants to buy the remaining $(x \\\\bmod a)$ cans one by one. \\n\\n$\\\\left\\\\lfloor \\\\frac{x}{a} \\\\right\\\\rfloor$ is $x$ divided by $a$ rounded down, $x \\\\bmod a$ is the remainer of $x$ divided by $a$.\\n\\nBut customers are greedy in general, so if the customer wants to buy $(x \\\\bmod a)$ cans one by one and it happens that $(x \\\\bmod a) \\\\ge \\\\frac{a}{2}$ he decides to buy the whole pack of $a$ cans (instead of buying $(x \\\\bmod a)$ cans). It makes you, as a marketer, happy since the customer bought more than he wanted initially.\\n\\nYou know that each of the customers that come to your shop can buy any number of cans from $l$ to $r$ inclusive. Can you choose such size of pack $a$ that each customer buys more cans than they wanted initially?\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $t$ ($1 \\\\le t \\\\le 1000$)\u00a0\u2014 the number of test cases.\\n\\nThe first and only line of each test case contains two integers $l$ and $r$ ($1 \\\\le l \\\\le r \\\\le 10^9$)\u00a0\u2014 the range of the number of cans customers can buy.\\n\\n\\n-----Output-----\\n\\nFor each test case, print YES if you can choose such size of pack $a$ that each customer buys more cans than they wanted initially. Otherwise, print NO.\\n\\nYou can print each character in any case.\\n\\n\\n-----Example-----\\nInput\\n3\\n3 4\\n1 2\\n120 150\\n\\nOutput\\nYES\\nNO\\nYES\\n\\n\\n-----Note-----\\n\\nIn the first test case, you can take, for example, $a = 5$ as the size of the pack. Then if a customer wants to buy $3$ cans, he'll buy $5$ instead ($3 \\\\bmod 5 = 3$, $\\\\frac{5}{2} = 2.5$). The one who wants $4$ cans will also buy $5$ cans.\\n\\nIn the second test case, there is no way to choose $a$.\\n\\nIn the third test case, you can take, for example, $a = 80$.\",\n  \"Ground Truth Solution\": \"def inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\ntest = inp()\\nmatrix = []\\nfor i in range(test):\\n\\tt = inlt()\\n\\tmatrix.append(t)\\nfor i in range(test):\\n\\tif int(matrix[i][0]) > int(matrix[i][1]) / 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to determine if there exists a pack size 'a' such that for every possible number of cans a customer wants to buy (from l to r), they will end up buying more cans due to the rule: if (x mod a) >= a/2, the customer buys a full pack of size 'a'.\\n- Identifying the Condition for Extra Purchase: The key condition is (x mod a) >= a/2. This means that the remainder when x is divided by a must be greater than or equal to half of a. If this condition holds, the customer buys 'a' cans instead of (x mod a).\\n- Finding a Suitable Value for 'a': We need to find an 'a' that works for all x in the range [l, r]. A possible strategy is to choose 'a' such that the smallest possible value 'l' always satisfies the condition (l mod a) >= a/2. This will ensure that customers always buy a full pack. If l > r/2, then we can set a = l * 2, in this case, l mod a = l, a / 2 = l, and therefore l mod a >= a/2.\\n- Deriving the Condition l > r/2: This is the main observation. If l > r/2, then for any x between l and r, we can always find an 'a' that makes the customer buy more cans. This is because the smallest possible value in our range 'l' will trigger the extra purchase condition.\\n- Handling the Edge Cases: There might not always exist such an 'a' that guarantees every customer buys more cans. If l <= r/2, then it is not possible to choose such a size of the pack.\",\n  \"LLM Questions\": [\n    \"What is the main goal of the problem, and what conditions need to be satisfied for the customer to buy more cans than initially intended?\",\n    \"How does the greedy strategy of the customer affect the number of cans they end up buying?\",\n    \"What does the condition (x mod a) >= a/2 signify in the context of the problem?\",\n    \"Can you explain why l > r/2 is the crucial condition for the existence of a suitable pack size 'a'?\",\n    \"What should the program print if there is no such size of pack 'a' that each customer buys more cans than they wanted initially?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The goal is to find a pack size 'a' that makes every customer who wants to buy between l and r cans end up buying more cans. The condition (x mod a) >= a/2 must be satisfied for each x in the range [l, r].\",\n    \"The customer first buys as many full packs as possible (floor(x/a)), and then decides whether to buy the remaining cans individually or buy another full pack. If the remaining cans (x mod a) are more than or equal to half the pack size (a/2), the customer buys a full pack.\",\n    \"The condition (x mod a) >= a/2 indicates that the remainder when the number of cans a customer wants to buy (x) is divided by the pack size (a) is at least half of the pack size. In this case, the customer will buy a full pack instead of buying the remaining cans individually.\",\n    \"If l > r/2, it guarantees that for any x in the range [l, r], setting 'a' appropriately will always make (x mod a) >= a/2. It ensures that the smallest number of cans a customer could want to buy 'l' will trigger the extra purchase.\",\n    \"If there is no such pack size 'a', the program should print NO.\"\n  ]\n}\n```"