"```json\n{\n  \"Coding Problem\": \"Okabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.\\n\\nConsider the point (x, y) in the 2D plane such that x and y are integers and 0 \u2264 x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation $y = - \\frac{x}{m} + b$. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.\\n\\nHelp Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.\\n\\nOkabe is sure that the answer does not exceed 10^18. You can trust him.\\n\\n\\n-----Input-----\\n\\nThe first line of input contains two space-separated integers m and b (1 \u2264 m \u2264 1000, 1 \u2264 b \u2264 10000).\\n\\n\\n-----Output-----\\n\\nPrint the maximum number of bananas Okabe can get from the trees he cuts.\\n\\n\\n-----Examples-----\\nInput\\n1 5\\n\\nOutput\\n30\\n\\nInput\\n2 3\\n\\nOutput\\n25\\n\\n\\n-----Note----- [Image]\\n\\nThe graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.\",\n  \"Ground Truth Solution\": \"import sys\\n\\ndef main():\\n\\t(m, b) = list(map(int, sys.stdin.readline().split()))\\n\\n\\tdef calc(y):\\n\\t\\tx = (b - y) * m\\n\\t\\treturn (y * (y + 1) * (x + 1) >> 1) + (x * (x + 1) * (y + 1) >> 1)\\n\\tres = 0\\n\\tfor i in range(b + 1):\\n\\t\\tt = calc(i)\\n\\t\\tif t > res:\\n\\t\\t\\tres = t\\n\\tprint(res)\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to find a rectangle under the line y = -x/m + b that maximizes the number of bananas. Each point (x, y) contains x + y bananas, and the rectangle must have axis-aligned sides with x, y >= 0.\\n- Identifying Key Constraints: m and b are integers. The rectangle's corners must be integer coordinates. The goal is to maximize the total number of bananas within the selected rectangle.\\n- Choosing an Algorithmic Approach: Since the bounds for m and b are relatively small (m <= 1000, b <= 10000), we can iterate through possible values of y for the top edge of the rectangle.  For each y, calculate the corresponding x using the equation of the line, which defines the right edge of the rectangle. Then calculate the total bananas in the corresponding rectangle and keep track of the maximum total.\\n- Calculating the Number of Bananas: Given a rectangle with corners (0, 0) and (x, y), the total number of bananas can be calculated by summing x + y for all points (i, j) where 0 <= i <= x and 0 <= j <= y. The sum of x + y from (0,0) to (x,y) can be expressed as (sum of i from 0 to x) * (y + 1) + (sum of j from 0 to y) * (x + 1), where sum of i from 0 to x equals x * (x + 1) / 2, and sum of j from 0 to y equals y * (y+1) / 2. So, the total is (x * (x + 1) / 2) * (y + 1) + (y * (y + 1) / 2) * (x + 1).\\n- Optimization and Efficiency: Iterate through all possible y values from 0 to b. For each y, calculate x = (b - y) * m. Since x and y need to be integers, x becomes floor((b - y) * m). Calculate the total number of bananas for this rectangle.  Update the maximum total as necessary. Note the >> 1 operator is used for integer division by 2.\",\n  \"LLM Questions\": [\n    \"What is the formula to calculate total number of bananas within a rectangle with corners (0,0) and (x,y) given that each point (i,j) in the rectangle has i+j bananas?\",\n    \"Given a y coordinate, how do we compute the corresponding x coordinate that satisfies the line equation y = -x/m + b?\",\n    \"What range of y values should be considered in order to guarantee the optimal solution is found?\",\n    \"How can integer division be efficiently computed in python?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The total number of bananas is (x * (x + 1) / 2) * (y + 1) + (y * (y + 1) / 2) * (x + 1).\",\n    \"The corresponding x coordinate is x = (b - y) * m.\",\n    \"All possible y values between 0 and b inclusive should be considered.\",\n    \"The right bit shift operator >> can be used to compute integer division by 2.\"\n  ]\n}\n```"