"```json\n{\n  \"Coding Problem\": \"Professor Sharma gives the following problem to his students: given two integers X( \u2265 2) and Y( \u2265 2)\\n and tells them to find the smallest positive integral exponent E such that the decimal expansion of X^E begins with Y.\\nFor example, if X = 8 and Y= 51, then X^3 = 512 begins with Y= 51, so E= 3. \\nProfessor Sharma has also announced that he is only interested in values of X such that\\nX is not a power of 10. The professor has a proof that in this case, at least one value of E exists for any Y.\\nnow your task is to perform professor's theory and check his theory for different values of X and Y .\\n\\nInput :\\nThe first line contains the number of test cases N(0<N \u2264 9).\\nFor each test case, there is a single line containing the integers X and Y.\\n\\nOutput :\\nFor each test case, print the case number, followed by a space and a  colon, followed by a space, followed by a single integer showing the value of the smallest exponent E.\\n\\nConstraints\\n         1<T<10 \\n         2<X,Y \u2264 10^5\\n\\nSAMPLE INPUT\\n2\\n5 156\\n16 40\\n\\nSAMPLE OUTPUT\\nCase 1: 6\\nCase 2: 3\\n\\nExplanation\\n\\nCase 1: \\n55 = 255 =1255 = 6255 = 3125*5 = 15625 =  6\\nso after 6 turns we gets our answer cos 156 is present in 15625.\\n\\nCase 2: \\n1616 = 25616 = 4096 = 3\\nso after 3 turns we gets our answer  cos 40 which is present in 4096\",\n  \"Ground Truth Solution\": \"for t in range(eval(input())):\\n\\ta,b=list(map(int,input().split()))\\n\\ti=1\\n\\tb=str(b)\\n\\tl=len(b)\\n\\tmul=a\\n\\twhile True:\\n\\t\\ta=a*mul\\n\\t\\tif str(a)[0:l]==b:\\n\\t\\t\\ti=i+1\\n\\t\\t\\tbreak\\n\\t\\ti=i+1\\n\\tprint(\\\"Case \\\"+str(t+1)+\\\":\\\",i)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The task is to find the smallest exponent `E` such that `X^E` begins with the digits of `Y`. X and Y are integers greater than or equal to 2, and X is not a power of 10.\\n- Identifying Edge Cases and Constraints: Handle multiple test cases. `X` and `Y` are within the range [2, 10^5].  The number of test cases `N` is between 1 and 9. Need to convert Y to a string to check prefixes.\\n- Developing an Algorithm: Iterate through exponents `E` starting from 1. Calculate `X^E` in each iteration. Convert `X^E` to a string and check if it starts with the string representation of `Y`. If it does, return `E`. If not, increment `E` and repeat.  Optimize the calculation by only multiplying by `X` instead of calculating `X^E` from scratch each time. Also, increment `i` two times in each iteration (or one, depending on when the number becomes equal to `b`).\",\n  \"LLM Questions\": [\n    \"How do you handle multiple test cases in the input?\",\n    \"How do you determine if the decimal expansion of X^E begins with Y?\",\n    \"What data type conversions are necessary to compare X^E and Y effectively?\",\n    \"How can you optimize the calculation of X^E in each iteration of the loop?\",\n    \"Given that X and Y can be large, what considerations are important for computational efficiency?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Multiple test cases are handled by iterating through a range specified by the first line of input, which represents the number of test cases N.\",\n    \"To determine if X^E begins with Y, convert both to strings and check if the string representation of Y is a prefix of the string representation of X^E.\",\n    \"Y needs to be converted to a string so that it can be compared with part of the string created from X^E.\",\n    \"Optimize the calculation of X^E by iteratively multiplying the previous power of X by X, instead of calculating X^E from scratch each time. Store the result and update it with each iteration. This will improve the time complexity.\",\n    \"Since X and Y can be up to 10^5, it's important to ensure that intermediate calculations (such as X^E) do not cause overflow errors. Multiplying by X in each turn will make sure that a large number doesn't occur. Also, the comparison and string operations should be efficient to minimize the overall runtime.\"\n  ]\n}\n```"