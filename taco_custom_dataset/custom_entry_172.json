"```json\n{\n  \"Coding Problem\": \"Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\\n\\n\\n-----Input-----\\n\\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\\n\\nEach test case is given in two lines.\\n\\nThe first line contains two integers $a_1$ and $b_1$ ($1 \\le a_1, b_1 \\le 100$) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\\n\\nThe second line contains two integers $a_2$ and $b_2$ ($1 \\le a_2, b_2 \\le 100$) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\\n\\n\\n-----Output-----\\n\\nPrint $t$ answers, each of which is a string \\\"YES\\\" (in the case of a positive answer) or \\\"NO\\\" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).\\n\\n\\n-----Example-----\\nInput\\n3\\n2 3\\n3 1\\n3 2\\n1 3\\n3 3\\n1 3\\n\\nOutput\\nYes\\nYes\\nNo\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor i in range(t):\\n\\tsides1 = list(map(int, input().split()))\\n\\tsides2 = list(map(int, input().split()))\\n\\tsides1.sort()\\n\\tsides2.sort()\\n\\tif sides1[-1] == sides2[-1] and sides2[0] + sides1[0] == sides2[-1]:\\n\\t\\tprint('Yes')\\n\\telse:\\n\\t\\tprint('No')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to determine if two rectangles can form a square.\\n- Identifying Key Conditions: A square has equal sides. Therefore, if we can arrange the two rectangles such that they form a square, it means they share a common side length equal to the side length of the potential square. If the sum of their other sides is equal to this side length, it's possible.\\n- Algorithmic Strategy: For each test case, read the dimensions of the two rectangles. For each rectangle, determine which side is potentially the side of the square. Check if their lengths can be the same to be the side of the potential square, and if so, check if the sum of the other side can forms the same length.\\n- Edge Cases and Constraints:  Each dimension is between 1 and 100. There are multiple test cases. Consider that the sides of the rectangle might be in any order.\\n\",\n  \"LLM Questions\": [\n    \"What are the conditions for two rectangles to form a square when combined?\",\n    \"How should you handle the fact that the dimensions of the rectangles are given in random order?\",\n    \"What are the possible configurations when you try to combine the two rectangles?\",\n    \"How to deal with multiple test cases to process the input and provide the correct output for each case?\",\n    \"What edge cases or constraints need to be considered in the solution?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The rectangles must share a common side, and the sum of their other sides must be equal to the common side length to form a square.\",\n    \"Since the dimensions are in random order, you need to consider all possible orientations by sorting the sides of both rectangle.\",\n    \"Since each rectangle can be oriented in two ways, consider those rotations, and check for horizontal and vertical combination if that square is possible\",\n    \"Read and process each test case independently within a loop and printing the result (YES/NO) at the end of each loop.\",\n    \"Consider input constraints to avoid any potential errors. If the combination is not possible for a given pair, the output is NO.\"\n  ]\n}\n```"