"```json\n{\n  \"Coding Problem\": \"You are given an array $a$ of size $n$.\\n\\nYou can perform the following operation on the array:\\n\\nChoose two different integers $i, j$ $(1 \\\\leq i < j \\\\leq n$), replace $a_i$ with $x$ and $a_j$ with $y$. In order not to break the array, $a_i | a_j = x | y$ must be held, where $|$ denotes the bitwise OR operation . Notice that $x$ and $y$ are non-negative integers.\\n\\nPlease output the minimum sum of the array you can get after using the operation above any number of times.\\n\\n\\n-----Input-----\\n\\nEach test contains multiple test cases. The first line contains the number of test cases $t$ $(1 \\\\leq t \\\\leq 1000)$. Description of the test cases follows.\\n\\nThe first line of each test case contains an integer $n$ $(2 \\\\leq n \\\\leq 100)$ \u2014 the size of array $a$.\\n\\nThe second line of each test case contains $n$ integers $a_1, a_2, \\\\ldots ,a_n$ $(0 \\\\leq a_i < 2^{30})$.\\n\\n\\n-----Output-----\\n\\nFor each test case, print one number in a line \u2014 the minimum possible sum of the array.\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n3\\n1 3 2\\n5\\n1 2 4 8 16\\n2\\n6 6\\n3\\n3 5 6\\nOutput\\n3\\n31\\n6\\n7\\n\\n\\n-----Note-----\\n\\nIn the first example, you can perform the following operations to obtain the array $[1, 0, 2]$:\\n\\n1. choose $i = 1, j = 2$, change $a_1 = 1$ and $a_2 = 2$, it's valid since $1 | 3 = 1 | 2$. The array becomes $[1, 2, 2]$.\\n\\n2. choose $i = 2, j = 3$, change $a_2 = 0$ and $a_3 = 2$, it's valid since $2 | 2 = 0 | 2$. The array becomes $[1, 0, 2]$.\\n\\nWe can prove that the minimum sum is $1 + 0 + 2 = 3\\n\\nIn the second example, We don't need any operations.\",\n  \"Ground Truth Solution\": \"for s in [*open(0)][2::2]:\\n\\tx = 0\\n\\tprint([(x := (x | int(i))) for i in s.split()][-1])\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The core task is to minimize the sum of an array by applying a bitwise OR operation. The rule for the operation is that when you replace two elements `a[i]` and `a[j]` with `x` and `y` respectively, it must hold that `a[i] | a[j] = x | y`. The goal is to find the minimal possible sum after any number of these operations.\\n- Identifying Key Constraints: The main constraint is the bitwise OR condition `a[i] | a[j] = x | y`. The problem requires that we can perform the operations an unlimited number of times, which hints at a strategy to consolidate the OR values into a single element.\\n- Devising a Strategy:  The key insight is that the minimal sum is achieved when all the bitwise OR operations of the array's elements are consolidated into a single element. This means you can reduce the entire array to all zeros, except for one element that holds the bitwise OR of all original elements. All other elements are effectively set to 0, thus minimizing the sum.\\n- Edge Cases and Simplifications: There are no explicit edge cases. The simplification lies in recognizing that the order of operations doesn't matter and that performing multiple operations can be distilled into consolidating all OR values into one element.\\n- Constructing the Solution: Calculate the bitwise OR of all elements in the array. The minimal sum will then be equal to the result of this bitwise OR operation since the other elements can be made zero.\",\n  \"LLM Questions\": [\n    \"What is the core task of the problem, and what operation are you allowed to perform?\",\n    \"What is the constraint for the operation involving replacing two elements in the array?\",\n    \"What strategy can you use to minimize the sum of the array elements, given that you can perform the operation multiple times?\",\n    \"How do you calculate the minimum possible sum of the array after applying the given operation any number of times?\",\n    \"Are there any edge cases to consider when solving this problem, and how do they impact the solution?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The core task is to minimize the sum of the array by using an operation that replaces two elements, ai and aj, with x and y, such that ai | aj = x | y.\",\n    \"The constraint is that when you replace a[i] and a[j] with x and y, the bitwise OR of the original elements must equal the bitwise OR of the new elements: a[i] | a[j] = x | y.\",\n    \"The best strategy is to consolidate all bitwise OR values into a single element and make all other elements zero, thus minimizing the sum.\",\n    \"The minimum possible sum is equal to the result of the bitwise OR of all the original elements in the array, since this value represents the only non-zero element in the minimized array.\",\n    \"No, there are no specific edge cases to consider. The given operation will always lead to a solution where all the initial values are `OR`ed together, and all other positions become zero, thus resulting in a minimum sum.\"\n  ]\n}\n```"