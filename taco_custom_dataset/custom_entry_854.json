"```json\n{\n  \"Coding Problem\": \"Ronit is working on HackerEarth Profile. Right now he is working on User Statistics.\\nOne of the statistics data (Code Streak) is as follows:\\n\\nGiven the User Activity Data, find the maximum number of continuous correct solutions submitted by any user.\\nSeems easy eh? Here's the catch! In order to maximize this number a user could have submitted a correct answer to the same problem which he has already solved. Now such cases cannot be tolerated. (See test case for clarification). \\nAlso in all the continuous correct submissions multiple correct submissions to same problem should be counted only once.\\n\\nUser Activity Data will be as follows:\\nTotal number of submissions by the user - N\\nFor each submission its Submission ID - S and Result - R (Solved or Unsolved) will be given.\\nSolved is represented by integer 1 and Unsolved by 0.\\n\\nInput:\\nFirst line contains integer T - number of test cases. T test cases follow. First line of each test case will contain N. Next N lines each will contain two space separated integers S and R.\\n\\nOuput:\\nFor each test case output in a single line the required answer.\\n\\nConstraints:\\n1 \u2264 T \u2264 1000\\n1 \u2264 N \u2264 1000000 (106)\\n1 \u2264 S \u2264 1000000 (106)\\n0 \u2264 R \u2264 1\\n\\nSAMPLE INPUT\\n3\\n6\\n1 0\\n2 1\\n3 1\\n4 1\\n5 1\\n6 0\\n5\\n1 1\\n2 0\\n3 1\\n1 1\\n2 1\\n4\\n1 1\\n2 1\\n2 1\\n3 1\\n\\nSAMPLE OUTPUT\\n4\\n2\\n3\",\n  \"Ground Truth Solution\": \"noOfTestCases = int(input())\\n\\n\\ndef maxSequence(lis):\\n\\texcludeList = {}\\n\\tcounts = []\\n\\tcount = 0\\n\\tfor n in lis:\\n\\t\\t#print n\\n\\t\\tif(n[1] == '1' and (n[0] in excludeList) == False):\\n\\t\\t\\tcount += 1\\n\\t\\t\\texcludeList[n[0]] = 1\\n\\t\\telif(n[1] == '0'):\\n\\t\\t\\tcounts.append(count)\\n\\t\\t\\tcount = 0\\n\\t\\n\\tif(lis[len(lis) - 1][1] == '1'):\\n\\t\\tcounts.append(count)\\n\\tprint(max(counts))\\t\\t\\n\\nfor caseNo in range(1, noOfTestCases + 1):\\n\\tcount = int(input())\\n\\tlis = []\\n\\tfor c in range(1, count + 1):\\n\\t\\tlis.append(input().split(\\\" \\\"))\\n\\tmaxSequence(lis)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding the maximum continuous streak of correct solutions, considering that submitting the same problem multiple times only counts once per streak.\\n- Data Structure Choice: Use a dictionary or set to keep track of the problems already solved within the current streak. This helps ensure that each solved problem is counted only once.\\n- Algorithm Strategy: Iterate through the submissions. If a submission is correct and the problem hasn't been solved in the current streak, increment the streak count and add the problem ID to the set of solved problems. If a submission is incorrect, the current streak ends, and its length needs to be recorded. Start a new streak.\\n- Edge Cases: Handle the case where the last submission is correct. This might result in an unrecorded streak. Also, initialize the max_streak to 0.\",\n  \"LLM Questions\": [\n    \"What data structure would be most suitable for tracking problems solved in the current streak, and why?\",\n    \"How would you handle the end of a streak when an incorrect submission is encountered?\",\n    \"How do you account for the constraint that each problem is counted only once in a streak?\",\n    \"How should the algorithm handle the case where the user's last submission is correct?\",\n    \"How can you ensure that the solution is efficient given the large input size (N up to 10^6)?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A dictionary or a set would be suitable because they provide fast lookups (O(1) on average). Using a set is sufficient here since we only need to check for the existence of a problem ID.\",\n    \"When an incorrect submission is encountered, the current streak count should be recorded (if it's greater than the current maximum streak), and the set of solved problems for the streak should be cleared to start a new streak.\",\n    \"By checking if the problem ID is already in the set of solved problems before incrementing the streak count. If it's already present, the problem is skipped, and the streak count is not incremented.\",\n    \"After iterating through all submissions, it should be checked whether a current streak is active. If it is (i.e., the last submission was correct), the length of this streak should be compared with the current maximum streak and updated accordingly.\",\n    \"To ensure efficiency, use appropriate data structures (like sets for O(1) lookups) and avoid unnecessary operations within the loop. Ensure efficient memory usage by not storing unnecessary data. Also, be mindful of input parsing to avoid potential bottlenecks.\"\n  ]\n}\n```"