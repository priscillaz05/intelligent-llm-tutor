"```json\n{\n  \"Coding Problem\": \"You are given an array A of N integers A_{1}, A_{2}, \\\\ldots, A_{N}. Determine if there are two [permutations] B and C of this array, for which the following condition is satisfied:\\n\\n* There doesn't exist a pair of integers (i, j) such that 1 \u2264 i \u2264 j \u2264 N and (i, j) \\\\neq (1, N), for which the subarray B[i:j] is a permutation of subarray C[i:j].\\n\\nIf there exist such permutations, find any of them.\\n\\nAs a reminder, B[i:j] refers to the subarray [B_{i}, B_{i+1}, \\\\ldots, B_{j}]\\n\\n------ Input Format ------ \\n\\n- The first line of the input contains a single integer T, the number of test cases. The description of the test cases follows.\\n- The first line of each test case contains a single integer N \u2014 the number of integers.\\n- The second line of each test case contains N space-separated integers A_{1}, A_{2}, \\\\ldots, A_{N}.\\n\\n------ Output Format ------ \\n\\nFor each test case, if there are no such permutations B and C, output NO.\\n\\nOtherwise, on the first line output YES. In the next line, output N integers B_{1}, B_{2}, \\\\ldots, B_{N}. In the next line, output N integers C_{1}, C_{2}, \\\\ldots, C_{N}.\\n\\nYou may print each character of YES/NO in either uppercase or lowercase (for example, the strings YES, yeS, YeS, and yEs will all be treated as identical).\\n\\n------ Constraints ------ \\n\\n$1 \u2264T \u2264100$\\n$3 \u2264N \u22641000$\\n$0 \u2264A_{i} \u226410^{9}$\\n- The sum of $N$ over all test cases doesn't exceed $2000$.\\n\\n----- Sample Input 1 ------ \\n3\\n3\\n1 1 2\\n4\\n19 39 19 84\\n6\\n1 2 3 1 2 3\\n----- Sample Output 1 ------ \\nNO\\nYES\\n19 19 39 84 \\n39 84 19 19 \\nYES\\n1 1 2 2 3 3 \\n2 3 3 1 1 2 \\n----- explanation 1 ------ \\nTest case $1$: There are $3 \\\\times 3 = 9$ pairs of permutations of the given array. Here's why they're all bad:\\n- If $B = [1, 1, 2]$ and $C = [1, 1, 2]$, $B[1:1] = C[1:1]$\\n- If $B = [1, 1, 2]$ and $C = [1, 2, 1]$, $B[1:1] = C[1:1]$\\n- If $B = [1, 1, 2]$ and $C = [2, 1, 1]$, $B[2:2] = C[2:2]$\\n- If $B = [1, 2, 1]$ and $C = [1, 1, 2]$, $B[1:1] = C[1:1]$\\n- If $B = [1, 2, 1]$ and $C = [1, 2, 1]$, $B[1:1] = C[1:1]$\\n- If $B = [1, 2, 1]$ and $C = [2, 1, 1]$, $B[3:3] = C[3:3]$\\n- If $B = [2, 1, 1]$ and $C = [1, 1, 2]$, $B[2:2] = C[2:2]$\\n- If $B = [2, 1, 1]$ and $C = [1, 2, 1]$, $B[3:3] = C[3:3]$\\n- If $B = [2, 1, 1]$ and $C = [2, 1, 1]$, $B[1:1] = C[1:1]\",\n  \"Ground Truth Solution\": \"from math import ceil, log, floor, sqrt, gcd\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tf = {}\\n\\tfor i in l:\\n\\t\\ttry:\\n\\t\\t\\tf[i] += 1\\n\\t\\texcept:\\n\\t\\t\\tf[i] = 1\\n\\tif max(f.values()) > n // 2 or len(set(l)) <= 2:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\n\\t\\tl.sort()\\n\\t\\tprint(*l)\\n\\t\\tprint(*l[n // 2:] + l[:n // 2])\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the problem: The problem asks to find two permutations of the input array A, such that no subarray (except the whole array) of one permutation is a permutation of the corresponding subarray of the other permutation. If such permutations exist, the program needs to print \\\"YES\\\" followed by the two permutations; otherwise, print \\\"NO\\\".\\n- Identifying edge cases: The crucial observation is that if the array has a majority element (an element that appears more than n/2 times), or the number of distinct elements is less than or equal to 2, then it's impossible to find such permutations, and the output should be \\\"NO\\\".\\n- Algorithmic strategy: If the array does not have a majority element and has more than two distinct elements, then it is always possible to find such permutations. Sort the original array to create the first permutation B. For the second permutation C, rotate the first half of B to the end. This should prevent any subarray of B from being a permutation of any corresponding subarray of C.\\n- Handling input/output: The program needs to handle multiple test cases, read the input array A for each test case, and print the output according to the problem's requirement.\",\n  \"LLM Questions\": [\n    \"What condition on the input array A would make it impossible to find two permutations B and C that satisfy the given condition?\",\n    \"How can you create two permutations B and C such that no subarray of B is a permutation of the corresponding subarray of C?\",\n    \"What is a majority element, and how does its existence affect the problem's solution?\",\n    \"If the array has a length of N and a certain element appears more than N/2 times, what outcome should the algorithm produce?\",\n    \"What should the output be when the number of unique elements in the array is less than or equal to 2?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If the input array A has a majority element (an element that appears more than n/2 times), or if the number of distinct elements is less than or equal to 2, then it's impossible to find such permutations.\",\n    \"One possible way is to sort the array A to get permutation B and then rotate the first half of B to the end to get permutation C. This rotation should disrupt any matching subarrays.\",\n    \"A majority element is an element that appears more than n/2 times in an array of length n. If a majority element exists, the algorithm should output \\\"NO\\\".\",\n    \"If a certain element appears more than N/2 times in an array of length N, the algorithm should output \\\"NO\\\".\",\n    \"If the number of unique elements is less than or equal to 2, the algorithm should output \\\"NO\\\".\"\n  ]\n}\n```"