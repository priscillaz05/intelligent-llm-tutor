"```json\n{\n  \"Coding Problem\": \"King Tle4Ever of Time Limit Exceeded is really fascinated about Tic Tac Toe. He organizes a national level contest for Tic Tac Toe every year in Time Limit Exceeded. (Though I agree you need to be really stupid to loose a game of Tic Tac Toe but for the sake of question assume playing Tic Tac Toe for them is same as playing Chess for us :P ). \\nEvery year the contest has lots of participants. This year there are n participants from all over the country. Seeing this huge participation he asks Moron a simple question.\\nSuppose participant pi wins wi matches. The king wants to know the sum of wi^2 from 1 to n. Now as you already know Moron is not good with maths, he asks you to help him.\\nGiven the value of n find the minimum and maximum value of sum of wi^2 from 1 to n. As values can be too large output the values mod 10^9+7.\\n[Input]\\nFirst line contains a single integer t denoting number of test cases.\\nNext t lines contains a single integer n denoting the number of participants.\\n\\n[Output]\\nFor each test case output the minimum and maximum value mod 10^9+7. Say minimum is minx and maximum is maxx than you should print \\\"minx maxx\\\".\\n[Constraints]\\n1 \u2264 t \u2264 10^5\\n3 \u2264 n \u2264 10^9\\nNOTE : n will be an odd integer\\n\\nSAMPLE INPUT\\n2\\n3\\n5\\n\\nSAMPLE OUTPUT\\n3 5\\n20 30\",\n  \"Ground Truth Solution\": \"#-------------------------------------------------------------------------------\\n# Name:        module1\\n# Purpose:\\n#\\n# Author:      onkar shandilya\\n#\\n# Created:     08/11/2014\\n# Copyright:   (c) onkar shandilya 2014\\n# Licence:     <your licence>\\n#-------------------------------------------------------------------------------\\n\\ndef find_min_max(T):\\n\\ta = 0\\n\\twhile a < T:\\n\\t\\tn = int(eval(input()))\\n\\t\\tn1 = n-1\\n\\t\\tmod = 1000000007\\n\\t\\tmatches = n1*(n1+1)/2\\n\\t\\tmin = int(((matches/n)*(matches/n)*n)%mod)\\n\\t\\tmax = int(((n1)*(n1+1)*(2*n1+1)/6)%mod)\\n\\t\\tprint((str(min) +' '+str(max)))\\n\\t\\ta = a+1\\n\\n\\ndef main():\\n\\tT = int(eval(input()))\\n\\tfind_min_max(T)\\n\\tpass\\n\\nif __name__ == '__main__':\\n\\tmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to find the minimum and maximum possible values of the sum of squares of wins for n participants, given that the total number of matches played is the sum of the first n-1 natural numbers (n*(n-1)/2). The output should be modulo 10^9 + 7.\\n- Identifying the Minimum Sum of Squares: To minimize the sum of squares, distribute the wins as evenly as possible among the participants.  Each participant should ideally have approximately the same number of wins. This involves calculating the average wins per participant and ensuring the distribution is as close to uniform as possible.\\n- Identifying the Maximum Sum of Squares: To maximize the sum of squares, concentrate the wins in as few participants as possible. The maximum sum of squares is achieved when one participant wins all the matches and the remaining participants win nothing.\\n- Mathematical Formulation:  Let 'matches' = n*(n-1)/2. For minimum sum of squares, wins for each participant will be approximately 'matches/n'. For maximum sum of squares, one participant wins 'matches' matches, and the rest win 0.\\n- Implementing Modulo Arithmetic: Ensure all calculations are performed modulo 10^9 + 7 to prevent overflow and satisfy problem constraints.\",\n  \"LLM Questions\": [\n    \"How is the total number of matches to be played determined given n participants?\",\n    \"How can the wins be distributed among participants to minimize the sum of squares?\",\n    \"How can the wins be distributed among participants to maximize the sum of squares?\",\n    \"Why is modulo arithmetic important in this problem, and how should it be implemented?\",\n    \"Given the constraints, what data types should be used to prevent overflow errors during calculation?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The total number of matches is the sum of the first n-1 natural numbers which can be calculated as n*(n-1)/2.\",\n    \"To minimize the sum of squares, the wins should be distributed as evenly as possible among the participants, such that the wins for each participant are as close to the average matches/n as possible.\",\n    \"To maximize the sum of squares, concentrate all the wins to one participant, such that one participant wins all matches (n*(n-1)/2) and all other participants win 0 matches.\",\n    \"Modulo arithmetic prevents overflow errors because intermediate calculations can become very large. Modulo 10^9 + 7 (1000000007) should be applied after each multiplication and addition to keep results within manageable bounds.\",\n    \"Since n can be as large as 10^9, intermediate calculations could overflow the int datatype. Use long long (in C++) or equivalent data types to store the intermediate results and final answer to avoid overflow errors.\"\n  ]\n}\n```"