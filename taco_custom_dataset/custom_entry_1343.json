"```json\n{\n  \"Coding Problem\": \"In the capital city of Berland, Bertown, demonstrations are against the recent election of the King of Berland. Berland opposition, led by Mr. Ovalny, believes that the elections were not fair enough and wants to organize a demonstration at one of the squares.\\n\\nBertown has n squares, numbered from 1 to n, they are numbered in the order of increasing distance between them and the city center. That is, square number 1 is central, and square number n is the farthest from the center. Naturally, the opposition wants to hold a meeting as close to the city center as possible (that is, they want an square with the minimum number).\\n\\nThere are exactly k (k < n) days left before the demonstration. Now all squares are free. But the Bertown city administration never sleeps, and the approval of an application for the demonstration threatens to become a very complex process. The process of approval lasts several days, but every day the following procedure takes place:\\n\\n  * The opposition shall apply to hold a demonstration at a free square (the one which isn't used by the administration). \\n  * The administration tries to move the demonstration to the worst free square left. To do this, the administration organizes some long-term activities on the square, which is specified in the application of opposition. In other words, the administration starts using the square and it is no longer free. Then the administration proposes to move the opposition demonstration to the worst free square. If the opposition has applied for the worst free square then request is accepted and administration doesn't spend money. If the administration does not have enough money to organize an event on the square in question, the opposition's application is accepted. If administration doesn't have enough money to organize activity, then rest of administration's money spends and application is accepted \\n  * If the application is not accepted, then the opposition can agree to the administration's proposal (that is, take the worst free square), or withdraw the current application and submit another one the next day. If there are no more days left before the meeting, the opposition has no choice but to agree to the proposal of City Hall. If application is accepted opposition can reject it. It means than opposition still can submit more applications later, but square remains free. \\n\\n\\n\\nIn order to organize an event on the square i, the administration needs to spend ai bourles. Because of the crisis the administration has only b bourles to confront the opposition. What is the best square that the opposition can take, if the administration will keep trying to occupy the square in question each time? Note that the administration's actions always depend only on the actions of the opposition.\\n\\nInput\\n\\nThe first line contains two integers n and k \u2014 the number of squares and days left before the meeting, correspondingly (1 \u2264 k < n \u2264 105).\\n\\nThe second line contains a single integer b \u2014 the number of bourles the administration has (1 \u2264 b \u2264 1018).\\n\\nThe third line contains n space-separated integers ai \u2014 the sum of money, needed to organise an event on square i (1 \u2264 ai \u2264 109).\\n\\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\\n\\nOutput\\n\\nPrint a single number \u2014 the minimum number of the square where the opposition can organize the demonstration.\\n\\nExamples\\n\\nInput\\n\\n5 2\\n8\\n2 4 5 3 1\\n\\n\\nOutput\\n\\n2\\n\\n\\nInput\\n\\n5 2\\n8\\n3 2 4 1 5\\n\\n\\nOutput\\n\\n5\\n\\n\\nInput\\n\\n5 4\\n1000000000000000\\n5 4 3 2 1\\n\\n\\nOutput\\n\\n5\\n\\nNote\\n\\nIn the first sample the opposition can act like this. On day one it applies for square 3. The administration has to organize an event there and end up with 3 bourles. If on the second day the opposition applies for square 2, the administration won't have the money to intervene.\\n\\nIn the second sample the opposition has only the chance for the last square. If its first move occupies one of the first four squares, the administration is left with at least 4 bourles, which means that next day it can use its next move to move the opposition from any square to the last one.\\n\\nIn the third sample administration has a lot of money, so opposition can occupy only last square.\",\n  \"Ground Truth Solution\": \"from sys import stdin, stdout\\n(n, k) = map(int, stdin.readline().split())\\nvalue = int(stdin.readline())\\nprices = list(map(int, stdin.readline().split()))\\nused = {}\\nchallengers = prices[:-1]\\nfor i in range(n - 1):\\n\\tchallengers[i] = (challengers[i], i)\\nchallengers.sort(reverse=True)\\nind = challengers[k - 1][1]\\ncnt = 0\\nfor i in range(k):\\n\\tused[challengers[i][1]] = challengers[i][0]\\n\\tcnt += challengers[i][0]\\nfor i in range(n - 1):\\n\\tif not i in used and value < cnt - used[ind] + prices[i]:\\n\\t\\tstdout.write(str(i + 1))\\n\\t\\tbreak\\n\\telif i in used and value < cnt:\\n\\t\\tstdout.write(str(i + 1))\\n\\t\\tbreak\\nelse:\\n\\tstdout.write(str(n))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: Comprehend the game-like scenario where the opposition tries to secure a square closest to the city center, while the administration attempts to thwart them by occupying squares with their limited budget.\\n- Identifying Constraints and Objectives: Recognize that the opposition wants the smallest-numbered square, the administration has a limited budget, and each square has an associated cost to occupy. The opposition has a limited number of days (moves).\\n- Formulating a Strategy: Realize that the opposition's best strategy involves identifying which squares they can afford to secure given the administration's budget and strategy. The opposition needs to consider what the administration can force them to take.\\n- Optimization and Decision Making: Determine the optimal square the opposition can secure by simulating the interaction with the administration and predicting their moves. Consider using the sorted costs to determine which squares the administration will likely target first.\\n- Edge Case Handling: Consider cases where the administration's budget is very high or very low and how this affects the opposition's strategy.\",\n  \"LLM Questions\": [\n    \"How does the limited budget of the administration affect the opposition's choice of squares?\",\n    \"If the opposition applies for square i, what determines whether the administration can force them to move to a worse square?\",\n    \"Given k days, how can the opposition strategically apply for squares to minimize the final square number they occupy?\",\n    \"What squares would the administration prioritize occupying if they have unlimited funds?\",\n    \"What is the significance of the number of days (k) in influencing the opposition's strategy?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The limited budget constrains the administration's ability to block the opposition. The opposition can aim for squares the administration can't afford to move them from.\",\n    \"The administration can only force a move if they have enough money to occupy the opposition's initially requested square.\",\n    \"The opposition needs to calculate which squares the administration would target first based on cost, and whether applying for those squares initially reduces the overall possible occupied square number.\",\n    \"The administration would start occupying squares in increasing order of their proximity to the center (i.e., from square 1 onwards) to ensure the opposition is pushed further away from the center.\",\n    \"The value of k determines how many attempts the opposition has, influencing their strategy to either aim for a quick win or carefully plan over several days.\"\n  ]\n}\n```"