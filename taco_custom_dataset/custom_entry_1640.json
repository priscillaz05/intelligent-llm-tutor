"```json\n{\n  \"Coding Problem\": \"Amugae is in a very large round corridor. The corridor consists of two areas. The inner area is equally divided by $n$ sectors, and the outer area is equally divided by $m$ sectors. A wall exists between each pair of sectors of same area (inner or outer), but there is no wall between the inner area and the outer area. A wall always exists at the 12 o'clock position.\\n\\n $0$ \\n\\nThe inner area's sectors are denoted as $(1,1), (1,2), \\\\dots, (1,n)$ in clockwise direction. The outer area's sectors are denoted as $(2,1), (2,2), \\\\dots, (2,m)$ in the same manner. For a clear understanding, see the example image above.\\n\\nAmugae wants to know if he can move from one sector to another sector. He has $q$ questions.\\n\\nFor each question, check if he can move between two given sectors.\\n\\n\\n-----Input-----\\n\\nThe first line contains three integers $n$, $m$ and $q$ ($1 \\\\le n, m \\\\le 10^{18}$, $1 \\\\le q \\\\le 10^4$)\u00a0\u2014 the number of sectors in the inner area, the number of sectors in the outer area and the number of questions.\\n\\nEach of the next $q$ lines contains four integers $s_x$, $s_y$, $e_x$, $e_y$ ($1 \\\\le s_x, e_x \\\\le 2$; if $s_x = 1$, then $1 \\\\le s_y \\\\le n$, otherwise $1 \\\\le s_y \\\\le m$; constraints on $e_y$ are similar). Amague wants to know if it is possible to move from sector $(s_x, s_y)$ to sector $(e_x, e_y)$.\\n\\n\\n-----Output-----\\n\\nFor each question, print \\\"YES\\\" if Amugae can move from $(s_x, s_y)$ to $(e_x, e_y)$, and \\\"NO\\\" otherwise.\\n\\nYou can print each letter in any case (upper or lower).\\n\\n\\n-----Example-----\\nInput\\n4 6 3\\n1 1 2 3\\n2 6 1 2\\n2 6 2 4\\n\\nOutput\\nYES\\nNO\\nYES\\n\\n\\n\\n-----Note-----\\n\\nExample is shown on the picture in the statement.\",\n  \"Ground Truth Solution\": \"def ceil(x, y):\\n\\tif x % y == 0:\\n\\t\\treturn x // y\\n\\treturn x // y + 1\\nfrom math import gcd\\n(n, m, q) = map(int, input().split(' '))\\ninn = n // gcd(n, m)\\ninm = m // gcd(n, m)\\nfor _ in range(q):\\n\\t(sx, sy, ex, ey) = map(int, input().split(' '))\\n\\tif n == 1 or m == 1:\\n\\t\\tprint('YES')\\n\\telif sx != ex:\\n\\t\\tif sx == 1:\\n\\t\\t\\tif ceil(sy, inn) == ceil(ey, inm):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\telif ceil(ey, inn) == ceil(sy, inm):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif sx == 1:\\n\\t\\tif ceil(sy, inn) == ceil(ey, inn):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif ceil(ey, inm) == ceil(sy, inm):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem describes a corridor divided into inner and outer sectors. The task is to determine if it is possible to move between two given sectors, with movement allowed between adjacent sectors within the same area (inner or outer) and between corresponding sectors between the areas, but no movement allowed across walls within the same area. A wall exists at the 12 o'clock position.\\n- Simplifying the Problem: The core concept is whether two sectors are in the same 'connected component'. Because sectors are linked across inner and outer areas at intervals determined by `n` and `m`, the key is whether the start and end sectors fall within the same range of sectors. GCD (Greatest Common Divisor) helps to define the interval.\\n- Algorithmic Approach: The solution involves calculating the greatest common divisor (GCD) of `n` and `m`. This GCD is used to determine the angular size of the connectable sectors. Determine the 'ceiling' of sector indices divided by n/gcd(n,m) or m/gcd(n,m). If ceilings are the same, then sectors are connectable.\\n- Edge Cases: Consider cases when either n or m is equal to 1. When n=1 or m=1, all sectors are effectively connected because of only one inner or outer sector, so any move is possible.\\n- Implementation Detail: Use ceil(x,y) to determine the containing sector index. If start and end sectors are in different areas, calculate ceil(start_sector, n//gcd(n,m)) and ceil(end_sector, m//gcd(n,m)). If they are the same, return 'YES', otherwise 'NO'. When start and end sectors are in the same area, use n//gcd(n,m) for inner and m//gcd(n,m) for outer area, in the same way.\",\n  \"LLM Questions\": [\n    \"What does it mean for two sectors to be 'connected' in this problem's context?\",\n    \"How does the greatest common divisor (GCD) of 'n' and 'm' help in determining whether two sectors are connectable?\",\n    \"Could you explain the purpose of the `ceil` function and how it is used in the solution to calculate sector index?\",\n    \"What special considerations are needed when either 'n' or 'm' is equal to 1, and why?\",\n    \"Can you walk me through an example where the starting and ending sectors are in different areas, and how the solution determines whether they are connected?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Two sectors are 'connected' if there's a path between them, either by moving within the same inner or outer area to an adjacent sector or by moving directly across between the inner and outer areas. Walls between sectors of same area block movement, unless it's wall existing at the 12 o'clock position.\",\n    \"The GCD of 'n' and 'm' helps define the angular range in which sectors are considered connected. It allows us to think of the corridor as divided into larger sections. Sectors within the same section are connectable.\",\n    \"The `ceil(x, y)` function calculates the smallest integer greater than or equal to x/y.  In the solution, it determines which of the larger sections a given sector is in by mapping it to a section index using the values of n//gcd(n,m) or m//gcd(n,m).\",\n    \"If either 'n' or 'm' is equal to 1, then all sectors are considered to be connected because only a single inner or outer sectors are present. In this case, there is a direct path between any two given sectors, so the answer should always be 'YES'.\",\n    \"Let's say n=4, m=6, starting sector is (1,1) and ending sector is (2,3). Then gcd(4,6)=2. So n//gcd(n,m) is 2 and m//gcd(n,m) is 3. ceil(1, 2) = 1 and ceil(3, 3) = 1. Since they're equal, the solution would return 'YES'.\"\n  ]\n}\n```"