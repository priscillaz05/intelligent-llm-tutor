"```json\n{\n  \"Coding Problem\": \"This is the hard version of the problem. The only difference between the easy and hard versions is that in the hard one, there are no constraints on the number of employees in every department.\\n\\nChefCorp has N employees. Each employee belongs to exactly one of the M departments. Each department is headed by exactly one of the employees belonging to that department.\\n\\nThe management structure of ChefCorp is as follows:\\nEach employee of a department (including its head) is *in contact* with every other employee of that department.\\nThe head of each department is *in contact* with the heads of all the other departments.\\n\\nFor example, let N = 7, M = 3 and employees 1, \\\\textbf{2}, 3 belong to the first department, employees \\\\textbf{4}, 5 belong to the second department and employees \\\\textbf{6}, 7 belong to the third department (employees in bold represent the heads of the departments). The following pairs of employees are in contact with each other: (1, 2), (1, 3), (2, 3), (4, 5), (6, 7), (2, 4), (4, 6), (2, 6).\\n\\nHowever, due to some inexplicable reasons, ChefCorp loses all its data on the departments. Given the total number of employees N and every pair of employees who are *in contact* with each other, can you help recover the number of departments and the employees belonging to each of the departments?\\n\\n------ Input Format ------ \\n\\n- The first line contains a single integer T \u2014 the number of test cases. Then the test cases follow.\\n- The first line of each test case contains a single integer N \u2014 the total number of employees in ChefCorp.\\n- The second line of each test case contains a single integer K \u2014 the number of pairs of employees *in contact* with each other.\\n- K lines follow. The i^{th} of these K lines contain two space-separated integers u_{i} and v_{i}, denoting that employee u_{i} is *in contact* with v_{i}.\\n\\n------ Output Format ------ \\n\\n- For each test case, output the following:\\n- In the first line output M \u2014 the number of departments.\\n- In the second line, output N space-separated integers D_{1}, D_{2}, \\\\ldots, D_{N} (1 \u2264 D_{i} \u2264 M) \u2014 denoting that the i^{th} employee belongs to the D_{i}^{th} department.\\n- In the third line, output M space-separated integers H_{1}, H_{2}, \\\\ldots, H_{M} (1 \u2264 H_{i} \u2264 N, H_{i} \\\\neq H_{j} when i \\\\neq j) \u2014 denoting that the H_{i}^{th} employee is the head of the i^{th} department.\\n\\nIf there are multiple answers, output any. It is guaranteed that at least one solution always exists.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 1000$\\n$2 \u2264 N \u2264 1000$\\n$1 \u2264 K \u2264 \\\\frac{N\\\\cdot(N-1)}{2}$\\n$1 \u2264 u_{i}, v_{i} \u2264 N$\\n$u_{i} \\\\neq v_{i}$ for each $1 \u2264 i \u2264 K$.\\n- The sum of $N$ over all test cases does not exceed $3000$.\\n\\n----- Sample Input 1 ------ \\n4\\n7\\n8\\n1 2\\n1 3\\n2 3\\n4 5\\n6 7\\n2 4\\n4 6\\n2 6\\n2\\n1\\n1 2\\n3\\n2\\n3 2\\n3 1\\n6\\n8\\n6 2\\n5 4\\n3 1\\n5 2\\n3 6\\n2 1\\n6 1\\n2 3\\n\\n----- Sample Output 1 ------ \\n3\\n1 1 1 2 2 3 3\\n2 4 6\\n2\\n1 2\\n1 2\\n2\\n1 2 1\\n3 2\\n2\\n1 1 1 2 2 1\\n2 5\\n\",\n  \"Ground Truth Solution\": \"tc = int(input())\\nfor _ in range(tc):\\n\\tn = int(input())\\n\\tk = int(input())\\n\\tadjl = [set() for _ in range(n)]\\n\\tfor i in range(k):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tadjl[u - 1].add(v - 1)\\n\\t\\tadjl[v - 1].add(u - 1)\\n\\tmaxd = 0\\n\\tmd = -1\\n\\tfor i in range(n):\\n\\t\\tif len(adjl[i]) > maxd:\\n\\t\\t\\tmaxd = len(adjl[i])\\n\\t\\t\\tmd = i\\n\\tmf = False\\n\\tfor v in adjl[md]:\\n\\t\\tp = set(adjl[v])\\n\\t\\tp.remove(md)\\n\\t\\tp.add(v)\\n\\t\\tif len(p.difference(adjl[md])) != 0:\\n\\t\\t\\tmanagers = adjl[md].intersection(p)\\n\\t\\t\\tmf = True\\n\\t\\t\\tbreak\\n\\tif not mf:\\n\\t\\tmanagers = p\\n\\tmanagers.add(md)\\n\\tm = len(managers)\\n\\tprint(m)\\n\\td = [0 for i in range(n)]\\n\\tk = 1\\n\\tmanx = list(managers)\\n\\tfor tm in manx:\\n\\t\\td[tm] = k\\n\\t\\tfor v in adjl[tm]:\\n\\t\\t\\tif not v in managers:\\n\\t\\t\\t\\td[v] = k\\n\\t\\tk += 1\\n\\tprint(*d)\\n\\tprint(*[t + 1 for t in manx])\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem describes a company with N employees divided into M departments. Employees within a department are in contact, and department heads are in contact with each other. The goal is to reconstruct the department structure (number of departments, department assignments, and heads) from the contact information.\\n- Identifying the Core Idea: The key is to use the contact graph to find a set of 'managers' (department heads) and then assign employees to departments based on their connections to these managers. The high degree node is a good starting point for finding managers.\\n- Selecting an Algorithm: A graph-based approach seems most suitable. Adjacency lists can represent the contact network. Iterating through the employees can help identify potential department heads and build the departments.\\n- Handling Edge Cases: Consider cases where there might be a single department or where the graph is disconnected. Ensure all employees are assigned to a department.\\n- Constructing the Solution: Build an adjacency list representing the contact network. Find the node (employee) with the highest degree. This employee is likely a department head. Iterate through their contacts, checking for overlap in contacts, and potentially finding more heads. Once heads are identified, assign remaining employees based on their connections.\",\n  \"LLM Questions\": [\n    \"How do you represent the contact network between employees? Which data structure is most suitable?\",\n    \"What are the defining characteristics of a department head in the contact graph, and how can these be used to identify them?\",\n    \"How do you determine the department assignments for employees that are not department heads?\",\n    \"What steps do you take to handle cases where the contact graph may not be fully connected, or where there is a single department?\",\n    \"How can you verify that the reconstructed department structure satisfies all the conditions of the problem statement?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"An adjacency list is well-suited for representing the contact network. Each employee can be a node, and their contacts are stored as a list of adjacent nodes.\",\n    \"Department heads are in contact with all other heads and all members of their own department. One strategy is to start with the employee with the maximum degree as that employee is a possible head. Then check for common connections.\",\n    \"Non-head employees are assigned to the same department as a head they are in contact with. If an employee is in contact with multiple heads, choosing any of those heads is acceptable according to the problem.\",\n    \"For a disconnected graph, each connected component represents a separate group of departments/employees. The same department identification logic is applied within each component. A single department implies all employees are connected.\",\n    \"Verify that each department has a single head, all employees in a department are connected, and heads are connected to all other heads. Ensure all employees are assigned to a department.\"\n  ]\n}\n```"