"```json\n{\n  \"Coding Problem\": \"Polycarp wants to assemble his own keyboard. Layouts with multiple rows are too complicated for him \u2014 his keyboard will consist of only one row, where all $26$ lowercase Latin letters will be arranged in some order.\\n\\nPolycarp uses the same password $s$ on all websites where he is registered (it is bad, but he doesn't care). He wants to assemble a keyboard that will allow to type this password very easily. He doesn't like to move his fingers while typing the password, so, for each pair of adjacent characters in $s$, they should be adjacent on the keyboard. For example, if the password is abacaba, then the layout cabdefghi... is perfect, since characters a and c are adjacent on the keyboard, and a and b are adjacent on the keyboard. It is guaranteed that there are no two adjacent equal characters in $s$, so, for example, the password cannot be password (two characters s are adjacent).\\n\\nCan you help Polycarp with choosing the perfect layout of the keyboard, if it is possible?\\n\\n\\n-----Input-----\\n\\nThe first line contains one integer $T$ ($1 \\\\le T \\\\le 1000$) \u2014 the number of test cases.\\n\\nThen $T$ lines follow, each containing one string $s$ ($1 \\\\le |s| \\\\le 200$) representing the test case. $s$ consists of lowercase Latin letters only. There are no two adjacent equal characters in $s$.\\n\\n\\n-----Output-----\\n\\nFor each test case, do the following:\\n\\n  if it is impossible to assemble a perfect keyboard, print NO (in upper case, it matters in this problem);  otherwise, print YES (in upper case), and then a string consisting of $26$ lowercase Latin letters \u2014 the perfect layout. Each Latin letter should appear in this string exactly once. If there are multiple answers, print any of them. \\n\\n\\n-----Example-----\\nInput\\n5\\nababa\\ncodedoca\\nabcda\\nzxzytyz\\nabcdefghijklmnopqrstuvwxyza\\n\\nOutput\\nYES\\nbacdefghijklmnopqrstuvwxyz\\nYES\\nedocabfghijklmnpqrstuvwxyz\\nNO\\nYES\\nxzytabcdefghijklmnopqrsuvw\\nNO\",\n  \"Ground Truth Solution\": \"testCases = int(input())\\nfor i1 in range(testCases):\\n\\tused = [False] * 26\\n\\ts = input()\\n\\tt = s[0]\\n\\tused[ord(s[0]) - ord('a')] = True\\n\\tpos = 0\\n\\tresult = 'YES'\\n\\tfor i2 in range(1, len(s), 1):\\n\\t\\tif used[ord(s[i2]) - ord('a')]:\\n\\t\\t\\tif pos > 0 and t[pos - 1] == s[i2]:\\n\\t\\t\\t\\tpos -= 1\\n\\t\\t\\telif pos < len(t) - 1 and t[pos + 1] == s[i2]:\\n\\t\\t\\t\\tpos += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tresult = 'NO'\\n\\t\\t\\t\\tbreak\\n\\t\\telif pos == 0:\\n\\t\\t\\tt = s[i2] + t\\n\\t\\telif pos == len(t) - 1:\\n\\t\\t\\tt += s[i2]\\n\\t\\t\\tpos += 1\\n\\t\\telse:\\n\\t\\t\\tresult = 'NO'\\n\\t\\t\\tbreak\\n\\t\\tused[ord(s[i2]) - ord('a')] = True\\n\\tfor i2 in range(26):\\n\\t\\tif not used[i2]:\\n\\t\\t\\tt += chr(i2 + ord('a'))\\n\\tprint(result)\\n\\tif result == 'YES':\\n\\t\\tprint(t)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires creating a keyboard layout (a string of 26 unique lowercase letters) where adjacent characters in a given password string 's' are also adjacent on the keyboard. If such a layout is impossible, output 'NO'.\\n- Identifying Constraints: The keyboard must contain all 26 letters exactly once. Adjacent characters in 's' must be adjacent on the keyboard layout. The input string 's' contains no two adjacent equal characters.\\n- Choosing a Strategy: Start building the keyboard layout by adding letters from 's'. Keep track of which letters are used. If a letter in 's' is already in the layout, ensure it's adjacent to the previously placed character. If a letter isn't in the layout, add it to either end of the layout if possible. If neither is possible, the answer is 'NO'. After processing 's', add the remaining unused letters to the layout to complete the 26-letter keyboard.\",\n  \"LLM Questions\": [\n    \"What does it mean for characters to be adjacent on the keyboard layout?\",\n    \"How should you handle cases where a character from the input string 's' is already present in the keyboard layout being built?\",\n    \"If you encounter a letter from 's' that is not in the existing layout, how do you decide where to place it?\",\n    \"What criteria determine if a perfect keyboard layout is impossible to create?\",\n    \"After processing all characters in 's', how do you complete the keyboard layout to contain all 26 letters?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Adjacent characters on the keyboard layout means that the letters are next to each other in the 26-character string representing the keyboard.\",\n    \"If a character is already in the layout, check if it's adjacent to the previously placed character from 's'. If it is not, the layout is not possible.\",\n    \"If the letter isn't present, it can be added to either end of the current layout. If adding to either end creates a valid layout, do it; otherwise, it indicates the keyboard layout is not possible.\",\n    \"A perfect keyboard layout is impossible if, at any point, an adjacent character from 's' cannot be placed next to the previously placed characters in the layout because it's not available to be placed at either end of partially formed layout or already exists but is not adjacent to the existing characters.\",\n    \"After processing 's', iterate through all lowercase letters. If a letter is not yet in the layout, append it to the end of the layout to complete the 26-character string.\"\n  ]\n}\n```"