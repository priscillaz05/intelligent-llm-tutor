"```json\n{\n  \"Coding Problem\": \"There is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\\n\\nOn this sequence, Snuke can perform the following operation:\\n\\n* Choose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\\n\\n\\n\\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times. Find the minimum number of operations required. It can be proved that, Under the constraints of this problem, this objective is always achievable.\\n\\nConstraints\\n\\n* 2 \\\\leq K \\\\leq N \\\\leq 100000\\n* A_1, A_2, ..., A_N is a permutation of 1, 2, ..., N.\\n\\nInput\\n\\nInput is given from Standard Input in the following format:\\n\\n\\nN K\\nA_1 A_2 ... A_N\\n\\n\\nOutput\\n\\nPrint the minimum number of operations required.\\n\\nExamples\\n\\nInput\\n\\n4 3\\n2 3 1 4\\n\\n\\nOutput\\n\\n2\\n\\n\\nInput\\n\\n3 3\\n1 2 3\\n\\n\\nOutput\\n\\n1\\n\\n\\nInput\\n\\n8 3\\n7 3 1 8 4 6 2 5\\n\\n\\nOutput\\n\\n4\",\n  \"Ground Truth Solution\": \"import math\\n(n, k) = map(int, input().split())\\nprint(math.ceil((n - k) / (k - 1) + 1))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires determining the minimum number of operations to make all elements in a permutation equal by choosing K consecutive elements and setting them to the minimum of those elements. Since the permutation contains numbers from 1 to N, making all elements equal to 1 guarantees the array's equality.\\n- Identifying the Key Insight: The crucial insight is that the element '1' must be included in each operation. The goal is to propagate this '1' across the entire array using the given operation.  The position of '1' is irrelevant because we can slide the window to include it.\\n- Formulating a Strategy: Find the number of operations needed to spread the minimum value (which is 1) across the entire array. This involves calculating how many times we need to cover the remaining (N - K) elements with windows of size K.\\n- Deriving the Formula: The number of operations to cover the remaining elements can be found by determining the number of non-overlapping segments of length (K-1) within the section of length N-K, and add 1 to account for the operation needed to put the 1 there in the first place. The formula is ceil((N - K) / (K - 1)) + 1.\",\n  \"LLM Questions\": [\n    \"What is the significance of the sequence being a permutation of numbers from 1 to N, and how does this help in solving the problem?\",\n    \"Why is it beneficial to make all the elements equal to 1?\",\n    \"Given the constraint of choosing K consecutive elements, how can the number '1' be strategically used in the operations?\",\n    \"How do you determine the number of operations required to spread the minimum value (1) across the entire sequence?\",\n    \"How does the relative size of K and N impact the calculation of the minimum number of operations?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Since it's a permutation of 1 to N, we know the minimum value in the array is 1. This value can be used to make all elements equal.\",\n    \"Making all elements equal to 1 is the simplest way to ensure all elements are equal using the provided operation.\",\n    \"The goal is to have '1' be the minimum in each selected K consecutive elements. This means we must ensure that '1' is always part of any operation.\",\n    \"Calculate how many operations are required to cover the remaining elements (N-K) with K-sized segments, ensuring that 1 is captured.\",\n    \"The calculation depends on how many overlapping segments of length K are required to cover the remaining N-K elements to spread the mininum '1' to the entire array. K will determine how many elements are affected with each operation.\"\n  ]\n}\n```"