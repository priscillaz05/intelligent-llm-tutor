"```json\n{\n  \"Coding Problem\": \"Little Petya very much likes rectangles and especially squares. Recently he has received 8 points on the plane as a gift from his mother. The points are pairwise distinct. Petya decided to split them into two sets each containing 4 points so that the points from the first set lay at the vertexes of some square and the points from the second set lay at the vertexes of a rectangle. Each point of initial 8 should belong to exactly one set. It is acceptable for a rectangle from the second set was also a square. If there are several partitions, Petya will be satisfied by any of them. Help him find such partition. Note that the rectangle and the square from the partition should have non-zero areas. The sides of the figures do not have to be parallel to the coordinate axes, though it might be the case.\\n\\nInput\\n\\nYou are given 8 pairs of integers, a pair per line \u2014 the coordinates of the points Petya has. The absolute value of all coordinates does not exceed 104. It is guaranteed that no two points coincide.\\n\\nOutput\\n\\nPrint in the first output line \\\"YES\\\" (without the quotes), if the desired partition exists. In the second line output 4 space-separated numbers \u2014 point indexes from the input, which lie at the vertexes of the square. The points are numbered starting from 1. The numbers can be printed in any order. In the third line print the indexes of points lying at the vertexes of a rectangle in the similar format. All printed numbers should be pairwise distinct.\\n\\nIf the required partition does not exist, the first line should contain the word \\\"NO\\\" (without the quotes), after which no output is needed.\\n\\nExamples\\n\\nInput\\n\\n0 0\\n10 11\\n10 0\\n0 11\\n1 1\\n2 2\\n2 1\\n1 2\\n\\n\\nOutput\\n\\nYES\\n5 6 7 8\\n1 2 3 4\\n\\n\\nInput\\n\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n\\n\\nOutput\\n\\nNO\\n\\n\\nInput\\n\\n0 0\\n4 4\\n4 0\\n0 4\\n1 2\\n2 3\\n3 2\\n2 1\\n\\n\\nOutput\\n\\nYES\\n1 2 3 4\\n5 6 7 8\\n\\nNote\\n\\nPay attention to the third example: the figures do not necessarily have to be parallel to the coordinate axes.\",\n  \"Ground Truth Solution\": \"import itertools\\nimport math\\nimport os\\nimport sys\\neps = 1e-08\\ncoord = [[]] + [list(map(int, input().split())) for _ in range(8)]\\nidx = list(range(1, 9))\\n\\ndef perpendicular(v1, v2):\\n\\treturn sum([x * y for (x, y) in zip(v1, v2)]) < eps\\n\\ndef all_perpendicular(vs):\\n\\treturn all([perpendicular(vs[i], vs[(i + 1) % 4]) for i in range(4)])\\n\\ndef rect_sides(vs):\\n\\tls = list(map(lambda v: math.hypot(*v), vs))\\n\\treturn abs(ls[0] - ls[2]) < eps and abs(ls[1] - ls[3]) < eps\\n\\ndef square_sides(vs):\\n\\tls = list(map(lambda v: math.hypot(*v), vs))\\n\\tl = ls[0]\\n\\tfor lx in ls:\\n\\t\\tif abs(lx - l) > eps:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef coords_to_vecs(cs):\\n\\treturn [[cs[(i + 1) % 4][0] - cs[i][0], cs[(i + 1) % 4][1] - cs[i][1]] for i in range(4)]\\n\\ndef is_square(coords):\\n\\tfor p in itertools.permutations(coords):\\n\\t\\tvs = coords_to_vecs(p)\\n\\t\\tif all_perpendicular(vs) and square_sides(vs):\\n\\t\\t\\treturn True\\n\\treturn False\\n\\ndef is_rect(coord):\\n\\tfor p in itertools.permutations(coord):\\n\\t\\tvs = coords_to_vecs(p)\\n\\t\\tif all_perpendicular(vs) and rect_sides(vs):\\n\\t\\t\\treturn True\\n\\treturn False\\nfor comb in itertools.combinations(idx, 4):\\n\\tfsi = list(comb)\\n\\tssi = list(set(idx) - set(comb))\\n\\tfs = [coord[i] for i in fsi]\\n\\tss = [coord[i] for i in ssi]\\n\\tif is_square(fs) and is_rect(ss):\\n\\t\\tprint('YES')\\n\\t\\tprint(' '.join(map(str, fsi)))\\n\\t\\tprint(' '.join(map(str, ssi)))\\n\\t\\tsys.exit(0)\\n\\tif is_square(ss) and is_rect(fs):\\n\\t\\tprint('YES')\\n\\t\\tprint(' '.join(map(str, ssi)))\\n\\t\\tprint(' '.join(map(str, fsi)))\\n\\t\\tsys.exit(0)\\nprint('NO')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires dividing 8 distinct points into two sets of 4, where one set forms a square and the other forms a rectangle. The rectangle can also be a square. The sides don't have to be parallel to coordinate axes.\\n- Identifying Key Geometric Properties: Key properties of squares and rectangles are needed.  A square has all sides equal and all angles are 90 degrees. A rectangle has opposite sides equal and all angles are 90 degrees. The problem also implies that we need to check for non-zero area.\\n- Choosing an Algorithmic Approach: The algorithm needs to check all possible combinations of points to form square and rectangle.  This suggests using combinations to generate all possible sets of 4 points. For each such set, check if it forms a square and if the remaining 4 points form a rectangle. Consider all permutations of the points in each group to ensure we handle different orderings.\\n- Implementing Geometric Checks: Implement functions to check if a set of points forms a square or a rectangle. This involves calculating distances between points and checking for perpendicularity (dot product being near zero) and equality of sides.\\n- Optimization Considerations: Since the problem guarantees that no two points coincide, no special handling for duplicate points is needed. If a suitable partition is found, immediately print the result and exit to save time.\",\n  \"LLM Questions\": [\n    \"What are the essential geometric properties of a square and a rectangle that distinguish them?\",\n    \"How can you determine if two sides (represented as vectors) are perpendicular in the plane?\",\n    \"What is the best way to generate all possible combinations of 4 points out of 8 to form the candidate sets?\",\n    \"How do you handle the cases where the sides are not necessarily parallel to the coordinate axes when determining if the figure is a square or rectangle?\",\n    \"What conditions must be met for an arrangement of four points to form a valid square or rectangle (with non-zero area)?\",\n    \"Can you explain how to use permutations to test different possible orderings of the points within a potential square or rectangle?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A square has four equal sides and four right angles. A rectangle has opposite sides equal and four right angles.\",\n    \"Two vectors are perpendicular if their dot product is approximately zero (within a small epsilon value due to floating-point inaccuracies).\",\n    \"The `itertools.combinations` function in Python efficiently generates all possible combinations of elements from a given iterable.\",\n    \"Check for perpendicularity using the dot product of the vectors representing the sides, and check for equal side lengths by calculating the Euclidean distance between the points and comparing these distances.\",\n    \"For a square, all sides must be equal in length, and adjacent sides must be perpendicular. For a rectangle, opposite sides must be equal in length, and adjacent sides must be perpendicular.  The points must not be collinear so the area is non-zero.\",\n    \"Iterate through all permutations of the four points. For each permutation, calculate side lengths and check for perpendicularity. This ensures that any valid ordering of the points forming a square or rectangle is detected.\"\n  ]\n}\n```"