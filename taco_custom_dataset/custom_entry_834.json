"```json\n{\n  \"Coding Problem\": \"Pinkie Pie has bought a bag of patty-cakes with different fillings! But it appeared that not all patty-cakes differ from one another with filling. In other words, the bag contains some patty-cakes with the same filling.\\n\\nPinkie Pie eats the patty-cakes one-by-one. She likes having fun so she decided not to simply eat the patty-cakes but to try not to eat the patty-cakes with the same filling way too often. To achieve this she wants the minimum distance between the eaten with the same filling to be the largest possible. Herein Pinkie Pie called the distance between two patty-cakes the number of eaten patty-cakes strictly between them.\\n\\nPinkie Pie can eat the patty-cakes in any order. She is impatient about eating all the patty-cakes up so she asks you to help her to count the greatest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating!\\n\\nPinkie Pie is going to buy more bags of patty-cakes so she asks you to solve this problem for several bags!\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $T$ ($1 \\\\le T \\\\le 100$): the number of bags for which you need to solve the problem.\\n\\nThe first line of each bag description contains a single integer $n$ ($2 \\\\le n \\\\le 10^5$): the number of patty-cakes in it. The second line of the bag description contains $n$ integers $a_1, a_2, \\\\ldots, a_n$ ($1 \\\\le a_i \\\\le n$): the information of patty-cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty-cakes with the same filling. \\n\\nIt is guaranteed that the sum of $n$ over all bags does not exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nFor each bag print in separate line one single integer: the largest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating for that bag.\\n\\n\\n-----Example-----\\nInput\\n4\\n7\\n1 7 1 6 4 4 6\\n8\\n1 1 4 6 4 6 4 7\\n3\\n3 3 3\\n6\\n2 5 2 3 1 4\\n\\nOutput\\n3\\n2\\n0\\n4\\n\\n\\n-----Note-----\\n\\nFor the first bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): $1$, $6$, $4$, $7$, $1$, $6$, $4$ (in this way, the minimum distance is equal to $3$).\\n\\nFor the second bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): $1$, $4$, $6$, $7$, $4$, $1$, $6$, $4$ (in this way, the minimum distance is equal to $2$).\",\n  \"Ground Truth Solution\": \"from collections import Counter\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = Counter(a)\\n\\tm = max(x.values())\\n\\ts = list(x.values()).count(m)\\n\\tx = n - s * m\\n\\tx = x // (m - 1)\\n\\tprint(x + s - 1)\",\n  \"LLM CoT Steps Breakdown\": \"- Understand the Problem: The problem asks to find the largest possible minimum distance between patty-cakes of the same filling when eaten in a particular order.\\n- Identify Key Variables: n (number of patty-cakes), a (list of fillings), and the frequency of each filling.\\n- Formulate a Strategy: Realize that the limiting factor for the minimum distance is the most frequent filling. The goal is to spread out the most frequent filling as much as possible. Calculate the maximum frequency (m) and number of fillings with maximum frequency (s). The number of remaining slots is n - s * m. These remaining slots are to be distributed among the m-1 gaps between the most frequent fillings.\\n- Address Edge Cases: Consider cases with small n or when there are many fillings with the same maximum frequency. If the number of remaining slots is not evenly divisible by m-1, perform integer division.\\n- Translate into Code: Use Counter to count frequencies, determine the maximum frequency, calculate the number of remaining slots, and calculate the maximum minimum distance.\",\n  \"LLM Questions\": [\n    \"How can you efficiently count the frequency of each filling in the bag?\",\n    \"What is the relationship between the maximum frequency of any filling and the minimum distance that can be achieved?\",\n    \"How do you handle the remaining patty-cakes to maximize the minimum distance between the most frequent patty-cakes?\",\n    \"What edge cases are important to consider in this problem, especially with respect to the input constraints?\",\n    \"Can you explain how the formula `x + s - 1` calculates the largest minimum distance, where x is the number of remaining slots divided by `m - 1` and s is the count of maximum frequencies?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"You can efficiently count the frequency of each filling using Python's `Counter` object from the `collections` module.\",\n    \"The maximum frequency of any filling directly influences the minimum distance. A higher maximum frequency means the same filling appears more often, potentially decreasing the minimum distance between them.\",\n    \"To maximize the minimum distance, you need to distribute the remaining patty-cakes as evenly as possible between the most frequent patty-cakes. This is achieved by dividing the count of remaining patty-cakes by one less than the maximum frequency (m-1).\",\n    \"Edge cases include scenarios where n is small, or when many fillings have the same maximum frequency. Also consider cases where all cakes have the same filling, or the number of other cakes is insufficient to separate the most frequent ones.\",\n    \"The formula 'x + s - 1' determines the largest minimum distance by calculating the number of gaps each most frequent cake must be separated by. 'x' accounts for evenly distributed cakes amongst 'm-1' gaps between the most frequent ones. 's - 1' accounts for the number of most frequent cake repetitions - 1. The sum gives us the best possible spread\"\n  ]\n}\n```"