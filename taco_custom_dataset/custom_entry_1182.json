"```json\n{\n  \"Coding Problem\": \"Chef has gone shopping with his 5-year old son. They have bought N items so far. The items are numbered from 1 to N, and the item i weighs Wi grams.\\n\\nChef's son insists on helping his father in carrying the items. He wants his dad to give him a few items. Chef does not want to burden his son. But he won't stop bothering him unless he is given a few items to carry. So Chef decides to give him some items. Obviously, Chef wants to give the kid less weight to carry.\\n\\nHowever, his son is a smart kid. To avoid being given the bare minimum weight to carry, he suggests that the items are split into two groups, and one group contains exactly K items. Then Chef will carry the heavier group, and his son will carry the other group.\\n\\nHelp the Chef in deciding which items should the son take. Your task will be simple. Tell the Chef the maximum possible difference between the weight carried by him and the weight carried by the kid.\\n\\n-----Input:-----\\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test contains two space-separated integers N and K. The next line contains N space-separated integers W1, W2, ..., WN.\\n\\n-----Output:-----\\nFor each test case, output the maximum possible difference between the weights carried by both in grams.\\n\\n-----Constraints:-----\\n- 1 \u2264 T \u2264 100\\n- 1 \u2264 K < N \u2264 100\\n- 1 \u2264 Wi \u2264 100000 (105)\\n\\n-----Example:-----\\nInput:\\n2\\n5 2\\n8 4 5 2 10\\n8 3\\n1 1 1 1 1 1 1 1\\n\\nOutput:\\n17\\n2\\n\\n-----Explanation:-----\\nCase #1: The optimal way is that Chef gives his son K=2 items with weights 2 and 4. Chef carries the rest of the items himself. Thus the difference is: (8+5+10) \u2212 (4+2) = 23 \u2212 6 = 17.\\n\\nCase #2: Chef gives his son 3 items and he carries 5 items himself.\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor _ in range(t):\\n\\t(n, k) = map(int, input().split())\\n\\tcarryBag = list(map(int, input().split()))\\n\\tcarryBag.sort()\\n\\tw1 = min(k, n - k)\\n\\tson = sum(carryBag[:w1])\\n\\tfather = sum(carryBag[w1:])\\n\\tprint(father - son)\",\n  \"LLM CoT Steps Breakdown\": \"- Problem Decomposition: The problem requires dividing N items into two groups: one with K items and the other with N-K items. The goal is to maximize the difference between the sum of weights of the two groups.\\n- Optimization Strategy: Sorting the weights allows assigning the lightest items to the son and the heaviest to the Chef, or vice versa. Taking the minimum of K and N-K for son assignment ensures the smallest possible sum for the son's bag.\\n- Edge Case Consideration: If k is greater than n - k we should pick n-k items for the son to minimize son's load.\\n- Algorithm Selection: Choosing to sort the item weights and then assign items based on a comparison of k and n-k is a good strategy.\",\n  \"LLM Questions\": [\n    \"Why is it crucial to sort the item weights before assigning them to Chef and his son?\",\n    \"How do you determine whether to give the K lightest or K heaviest items to the son to minimize his load and maximize the difference?\",\n    \"What is the significance of comparing 'K' and 'N-K' and using the 'min()' function in the solution?\",\n    \"How would the solution change if the goal was to minimize the difference in weights between what Chef and his son carry?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Sorting allows the solution to easily assign the K lightest items to the son (or the N-K lightest if N-K is less than K) and the remaining items to the Chef, maximizing the weight difference between the two.\",\n    \"To minimize the son's load and maximize the difference, you should give the son the lighter items, so sort the array and give the first k items (or first n-k if n-k < k) to the son.\",\n    \"Comparing K and N-K determines which group size is smaller. Assigning the items to the son using min(K, N-K) ensures that the son always carries the smaller group's weight, thus minimizing the son's load and maximizing the weight difference.\",\n    \"If the goal were to minimize the difference, a more complex dynamic programming approach would be required to find a subset of K items whose sum is as close as possible to half the total weight of all N items. This would be a much more computationally intensive task.\"\n  ]\n}\n```"