"```json\n{\n  \"Coding Problem\": \"Two players are playing a game. The game is played on a sequence of positive integer pairs. The players make their moves alternatively. During his move the player chooses a pair and decreases the larger integer in the pair by a positive multiple of the smaller integer in the pair in such a way that both integers in the pair remain positive. If two numbers in some pair become equal then the pair is removed from the sequence. The player who can not make any move loses (or in another words the player who encounters an empty sequence loses). Given the sequence of positive integer pairs determine whether the first player can win or not (assuming that both players are playing optimally).\\n\\n-----Input-----\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nEach test starts with an integer N denoting the number of pairs. Each of the next N lines contains a pair of positive integers. \\n\\n-----Output-----\\nFor each test case, output a single line containing \\\"YES\\\" if the first player can win and \\\"NO\\\" otherwise. \\n\\n-----Constraints-----\\n- 1 \u2264 T \u2264 100\\n- 1 \u2264 N \u2264 100\\n- All other integers are between 1 to 108\\n- The integers in each pair will be different\\n\\n-----Example-----\\nInput:\\n3\\n1\\n2 3\\n2\\n4 5\\n5 6\\n2\\n2 3\\n3 5\\n\\nOutput:\\nNO\\nNO\\nYES\\n\\n\\n-----Explanation-----\\nExample case 1. The first player don't have any choice other subtracting 2 from 3. So during the turn of the second player integer pair will be (2,1). The second player will win by subtracting 1 from 2. \\nExample case 2. If the first player choose to move (4,5) to (4,1) the second player will make it to (1,1). If the first player choose to move (5,6) to (5,1) the second player will make it to (1,1). So regardless of the move of the first player, the second will always win.\\nExample case 3. The first player will select pair (3,5) and make it to (3,2). Now both pairs are equal. So whatever the move of second player he will just mirror that move in another pair. This will ensure his win.\",\n  \"Ground Truth Solution\": \"import sys\\nt = int(input())\\n\\ndef g(a, b):\\n\\tif a > b:\\n\\t\\ttmp = a\\n\\t\\ta = b\\n\\t\\tb = tmp\\n\\tif b == a:\\n\\t\\treturn 0\\n\\tif b % a == 0:\\n\\t\\treturn int(b / a) - 1\\n\\tr = g(b % a, a)\\n\\tq = int(b / a)\\n\\tif r >= q:\\n\\t\\treturn q - 1\\n\\telse:\\n\\t\\treturn q\\n\\ndef mex(x):\\n\\tn = len(list(x.keys()))\\n\\tfor i in range(n):\\n\\t\\tif i not in x:\\n\\t\\t\\treturn i\\n\\treturn i\\n\\ndef g2(a, b):\\n\\tif a == b:\\n\\t\\treturn 0\\n\\tif a > b:\\n\\t\\ttmp = a\\n\\t\\ta = b\\n\\t\\tb = tmp\\n\\tif b % a == 0:\\n\\t\\treturn int(b / a) - 1\\n\\tq = int(b / a)\\n\\tx = {}\\n\\tr = b % a\\n\\tfor i in range(q):\\n\\t\\tx[g2(r + i * a, a)] = True\\n\\treturn mex(x)\\nwhile t:\\n\\tn = int(input())\\n\\tx = 0\\n\\twhile n:\\n\\t\\tline = input().split()\\n\\t\\ta = int(line[0])\\n\\t\\tb = int(line[1])\\n\\t\\tx ^= g(a, b)\\n\\t\\tn -= 1\\n\\tif x:\\n\\t\\tsys.stdout.write('YES\\\\n')\\n\\telse:\\n\\t\\tsys.stdout.write('NO\\\\n')\\n\\tt -= 1\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Game: The game involves two players and a sequence of number pairs. Players take turns reducing the larger number by a multiple of the smaller number such that both remain positive. If two numbers become equal, the pair is removed. The player who cannot make a move loses.\\n- Identifying Winning Strategy: The problem requires determining whether the first player can win, assuming both play optimally. This suggests a game theory approach.\\n- Recognizing Nim Game Connection: The game on each pair can be seen as a variation of the game of Nim. The grundy value of each pair can be computed independently, and XOR sum of these grundy values determines if the first player has winning strategy. The calculation of the grundy value requires recursively exploring possible moves to find the MEX of reachable states.\\n- Algorithm for Each Pair: To determine the winner, calculate the Grundy value for each pair and XOR them. If the result is non-zero, the first player wins, otherwise the second player wins.\\n- Test Cases Management: The input has T test cases, and for each case, the number of pairs N is provided followed by N lines of integer pairs.\",\n  \"LLM Questions\": [\n    \"How does reducing the larger number by a multiple of the smaller number affect the game state, and what condition causes a pair to be removed?\",\n    \"In this game, what are the criteria for determining whether the first player has a winning strategy?\",\n    \"Can the game be simplified or related to a well-known combinatorial game theory problem like Nim, and how would that influence the strategy?\",\n    \"How can the Grundy value be calculated efficiently for each pair, and what does it represent in the context of this game?\",\n    \"After computing the Grundy values for all pairs, what operation is needed to determine if the first player wins, and what does the result signify?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Reducing the larger number by a multiple of the smaller number changes the values within the pair while ensuring they remain positive. If both numbers in a pair become equal, that pair is removed from the game.\",\n    \"The first player has a winning strategy if they can make a move that leads to a state where the XOR sum of Grundy values of all pairs is zero, forcing the second player into a losing position.\",\n    \"Yes, this game can be related to Nim. Each pair's game can be considered a Nim heap, and the Grundy value represents the equivalent heap size. The winning strategy involves making moves such that the XOR sum of all 'heap sizes' becomes zero.\",\n    \"The Grundy value can be calculated recursively. For each possible move, calculate the Grundy value of the resulting state, and then take the MEX (minimum excluded value) of these Grundy values. This accounts for all reachable states from the current state.\",\n    \"The Grundy values of all pairs must be XORed together. If the result is non-zero, the first player has a winning strategy; otherwise, the second player wins. A non-zero XOR sum indicates an unbalanced game state where the first player can force a win.\"\n  ]\n}\n```"