"```json\n{\n  \"Coding Problem\": \"Jeff's got n cards, each card contains either digit 0, or digit 5. Jeff can choose several cards and put them in a line so that he gets some number. What is the largest possible number divisible by 90 Jeff can make from the cards he's got?\\n\\nJeff must make the number without leading zero. At that, we assume that number 0 doesn't contain any leading zeroes. Jeff doesn't have to use all the cards.\\n\\n\\n-----Input-----\\n\\nThe first line contains integer n (1 \u2264 n \u2264 10^3). The next line contains n integers a_1, a_2, ..., a_{n} (a_{i} = 0 or a_{i} = 5). Number a_{i} represents the digit that is written on the i-th card.\\n\\n\\n-----Output-----\\n\\nIn a single line print the answer to the problem \u2014 the maximum number, divisible by 90. If you can't make any divisible by 90 number from the cards, print -1.\\n\\n\\n-----Examples-----\\nInput\\n4\\n5 0 5 0\\n\\nOutput\\n0\\n\\nInput\\n11\\n5 5 5 5 5 5 5 5 0 5 5\\n\\nOutput\\n5555555550\\n\\n\\n-----Note-----\\n\\nIn the first test you can make only one number that is a multiple of 90 \u2014 0.\\n\\nIn the second test you can make number 5555555550, it is a multiple of 90.\",\n  \"Ground Truth Solution\": \"while 1:\\n\\ttry:\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tcount5 = a.count(5)\\n\\t\\tcount0 = a.count(0)\\n\\t\\tif count5 // 9 == 0 and count0 != 0:\\n\\t\\t\\tprint(0)\\n\\t\\telif count0 == 0:\\n\\t\\t\\tprint(-1)\\n\\t\\telse:\\n\\t\\t\\tprint(count5 // 9 * 9 * '5' + count0 * '0')\\n\\texcept EOFError:\\n\\t\\tbreak\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the divisibility rule for 90: A number is divisible by 90 if it is divisible by both 9 and 10. Divisibility by 10 requires the number to end in 0, and divisibility by 9 requires the sum of its digits to be a multiple of 9.\\n- Counting the number of 5s and 0s: Count the occurrences of the digits 5 and 0 in the input. These counts are critical to forming the largest possible number divisible by 90.\\n- Forming the largest number: To create the largest number divisible by 90, prioritize using as many 5s as possible, as long as their sum is a multiple of 9, and ensure there is at least one 0 at the end.\\n- Handling edge cases: Deal with cases where the number of 5s is not sufficient to form a multiple of 9, or there are no 0s available, which would make it impossible to form a number divisible by 90.\",\n  \"LLM Questions\": [\n    \"How do you determine if a number is divisible by 90, and why is this important for solving the problem?\",\n    \"What are the critical conditions for constructing a valid number divisible by 90 from the available digits?\",\n    \"Given the counts of 5s and 0s, how do you maximize the value of the number while ensuring it is divisible by 90?\",\n    \"What are the edge cases to consider, and how do you handle them to meet the problem's requirements?\",\n    \"Can you explain the logic for constructing the final string representation of the number based on the available 5s and 0s?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A number is divisible by 90 if it is divisible by both 9 and 10. This is important because the problem requires forming the largest possible number divisible by 90 from a given set of digits.\",\n    \"The critical conditions are that the number must end in 0 (divisibility by 10) and the sum of its digits must be a multiple of 9 (divisibility by 9). Since the available digits are only 5 and 0, we need at least one 0 and a number of 5s that sum up to a multiple of 9.\",\n    \"To maximize the value, use as many 5s as possible, provided their sum is a multiple of 9, and append at least one 0. If the number of 5s is not a multiple of 9, reduce their count until it is, and then append the 0(s).\",\n    \"Edge cases include scenarios where there are no 0s, or the number of 5s is less than 9. If there are no 0s, it's impossible to form a number divisible by 90, so return -1. If there are not enough 5s to sum to a multiple of 9, but there is at least one 0, return 0.\",\n    \"The string is constructed by repeating '5' as many times as possible, such that the number of 5s is a multiple of 9, and then appending the string '0' as many times as there are 0s available. If the constructed string is empty after this process (i.e., no 5s could be used), and there is at least one 0, return 0 instead.\"\n  ]\n}\n```"