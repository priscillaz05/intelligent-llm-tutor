"```json\n{\n  \"Coding Problem\": \"Maria is the most active old lady in her house. She was tired of sitting at home. She decided to organize a ceremony against the coronavirus.\\n\\nShe has $n$ friends who are also grannies (Maria is not included in this number). The $i$-th granny is ready to attend the ceremony, provided that at the time of her appearance in the courtyard there will be at least $a_i$ other grannies there. Note that grannies can come into the courtyard at the same time. Formally, the granny $i$ agrees to come if the number of other grannies who came earlier or at the same time with her is greater than or equal to $a_i$.\\n\\nGrannies gather in the courtyard like that.  Initially, only Maria is in the courtyard (that is, the initial number of grannies in the courtyard is $1$). All the remaining $n$ grannies are still sitting at home. On each step Maria selects a subset of grannies, none of whom have yet to enter the courtyard. She promises each of them that at the time of her appearance there will be at least $a_i$ other grannies (including Maria) in the courtyard. Maria can call several grannies at once. In this case, the selected grannies will go out into the courtyard at the same moment of time. She cannot deceive grannies, that is, the situation when the $i$-th granny in the moment of appearing in the courtyard, finds that now there are strictly less than $a_i$ other grannies (except herself, but including Maria), is prohibited. Please note that if several grannies appeared in the yard at the same time, then each of them sees others at the time of appearance. \\n\\nYour task is to find what maximum number of grannies (including herself) Maria can collect in the courtyard for the ceremony. After all, the more people in one place during quarantine, the more effective the ceremony!\\n\\nConsider an example: if $n=6$ and $a=[1,5,4,5,1,9]$, then:  at the first step Maria can call grannies with numbers $1$ and $5$, each of them will see two grannies at the moment of going out into the yard (note that $a_1=1 \\\\le 2$ and $a_5=1 \\\\le 2$);  at the second step, Maria can call grannies with numbers $2$, $3$ and $4$, each of them will see five grannies at the moment of going out into the yard (note that $a_2=5 \\\\le 5$, $a_3=4 \\\\le 5$ and $a_4=5 \\\\le 5$);  the $6$-th granny cannot be called into the yard \\u00a0\\\\u2014 therefore, the answer is $6$ (Maria herself and another $5$ grannies). \\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $t$ ($1 \\\\le t \\\\le 10^4$) \\u2014 the number of test cases in the input. Then test cases follow.\\n\\nThe first line of a test case contains a single integer $n$ ($1 \\\\le n \\\\le 10^5$) \\u2014 the number of grannies (Maria is not included in this number).\\n\\nThe second line contains $n$ integers $a_1, a_2, \\\\ldots, a_n$ ($1 \\\\le a_i \\\\le 2\\\\cdot10^5$).\\n\\nIt is guaranteed that the sum of the values $n$ over all test cases of the input does not exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case, print a single integer $k$ ($1 \\\\le k \\\\le n + 1$) \\u2014 the maximum possible number of grannies in the courtyard.\\n\\n\\n-----Example-----\\nInput\\n4\\n5\\n1 1 2 2 1\\n6\\n2 3 4 5 6 7\\n6\\n1 5 4 5 1 9\\n5\\n1 2 3 5 6\\n\\nOutput\\n6\\n1\\n6\\n4\\n\\n\\n-----Note-----\\n\\nIn the first test case in the example, on the first step Maria can call all the grannies. Then each of them will see five grannies when they come out. Therefore, Maria and five other grannies will be in the yard.\\n\\nIn the second test case in the example, no one can be in the yard, so Maria will remain there alone.\\n\\nIn the third test case in the example is described in the details above.\\n\\nIn the fourth test case in the example, on the first step Maria can call grannies with numbers $1$, $2$ and $3$. If on the second step Maria calls $4$ or $5$ (one of them), then when a granny appears in the yard, she will see only four grannies (but it is forbidden). It means that Maria can't call the $4$-th granny or the $5$-th granny separately (one of them). If she calls both: $4$ and $5$, then when they appear, they will see $4+1=5$ grannies. Despite the fact that it is enough for the $4$-th granny, the $5$-th granny is not satisfied. So, Maria cannot call both the $4$-th granny and the $5$-th granny at the same time. That is, Maria and three grannies from the first step will be in the yard in total.\",\n  \"Ground Truth Solution\": \"for s in [*open(0)][2::2]:\\n\\tprint(max((i * (x <= i) for (i, x) in enumerate(sorted(map(int, s.split())), 1))) + 1)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem describes a scenario where Maria invites grannies to a ceremony. Each granny has a condition for attending: they require a certain number of other grannies already present (including Maria). The task is to maximize the number of grannies attending.\\n- Identify Key Constraints: Grannies arrive simultaneously in groups. A granny will only come if their requirement (ai) is met by the number of grannies already present. Grannies cannot be deceived (their requirement must be strictly met upon arrival). Maria is always present and counts towards the requirement.\\n- Developing a Strategy: Sort the grannies' requirements in ascending order. Iterate through the sorted requirements and keep track of how many grannies can be invited up to each point. This allows us to efficiently determine the maximum number of grannies that can be successfully invited. Starting with Maria, iterate through the sorted list and see how many grannies she can successfully invite without violating any requirements.\\n- Algorithmic Considerations: Consider sorting the array to help efficiently find how many can be successfully invited.\",\n  \"LLM Questions\": [\n    \"How does sorting the grannies' requirements help find the maximum number of grannies that can be invited?\",\n    \"What are the conditions under which a granny can be invited to the ceremony?\",\n    \"If the grannies' requirements are [1, 5, 4, 5, 1, 9], what is the sorted order and how does that affect the invitation process?\",\n    \"Why must the grannies' requirements be strictly met upon arrival, and how does this constraint affect the solution?\",\n    \"How do you keep track of the number of grannies already present when considering inviting a new group of grannies?\",\n    \"In cases where a granny's requirement cannot be met by the current number of attendees, what should be done?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Sorting the requirements helps by allowing us to iteratively check whether we can invite grannies one by one, ensuring each new invitation satisfies all previous ones.\",\n    \"A granny can be invited if the number of grannies already present (including Maria) is greater than or equal to their requirement (ai).\",\n    \"The sorted order is [1, 1, 4, 5, 5, 9]. Sorting helps to invite grannies with lower requirements first, thereby increasing the number of grannies present and making it easier to satisfy the requirements of other grannies.\",\n    \"The grannies cannot be deceived; thus, the number of grannies present must be greater than or equal to the granny's requirement to ensure that the condition is met upon arrival. This constraint ensures that we must be careful about selecting groups of grannies.\",\n    \"By keeping track of the total number of grannies already present (including Maria), we can ensure that the requirement of a new group of grannies can be met, adding them to the tally.\",\n    \"If a granny's requirement cannot be met, they cannot be invited. We must continue to the next potential invitee and reconsider them only if more grannies are invited.\"\n  ]\n}\n```"