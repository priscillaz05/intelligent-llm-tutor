"```json\n{\n  \"Coding Problem\": \"Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string $s$ and a number $k$ ($0 \\le k < |s|$).\\n\\nAt the beginning of the game, players are given a substring of $s$ with left border $l$ and right border $r$, both equal to $k$ (i.e. initially $l=r=k$). Then players start to make moves one by one, according to the following rules: A player chooses $l^{\\\\prime}$ and $r^{\\\\prime}$ so that $l^{\\\\prime} \\\\le l$, $r^{\\\\prime} \\\\ge r$ and $s[l^{\\\\prime}, r^{\\\\prime}]$ is lexicographically less than $s[l, r]$. Then the player changes $l$ and $r$ in this way: $l := l^{\\\\prime}$, $r := r^{\\\\prime}$. Ann moves first. The player, that can't make a move loses.\\n\\nRecall that a substring $s[l, r]$ ($l \\\\le r$) of a string $s$ is a continuous segment of letters from s that starts at position $l$ and ends at position $r$. For example, \\\"ehn\\\" is a substring ($s[3, 5]$) of \\\"aaaehnsvz\\\" and \\\"ahz\\\" is not.\\n\\nMike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn't scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only $s$ and $k$.\\n\\nUnfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes $s$ and determines the winner for all possible $k$.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains a single string $s$ ($1 \\\\leq |s| \\\\leq 5 \\\\cdot 10^5$) consisting of lowercase English letters.\\n\\n\\n-----Output-----\\n\\nPrint $|s|$ lines.\\n\\nIn the line $i$ write the name of the winner (print Mike or Ann) in the game with string $s$ and $k = i$, if both play optimally\\n\\n\\n-----Examples-----\\nInput\\nabba\\n\\nOutput\\nMike\\nAnn\\nAnn\\nMike\\n\\nInput\\ncba\\n\\nOutput\\nMike\\nMike\\nMike\",\n  \"Ground Truth Solution\": \"import atexit\\nimport io\\nimport sys\\n_I_B = sys.stdin.read().splitlines()\\ninput = iter(_I_B).__next__\\n_O_B = io.StringIO()\\nsys.stdout = _O_B\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_O_B.getvalue())\\n\\ndef main():\\n\\ts = input()\\n\\tmn = s[0]\\n\\tfor i in range(len(s)):\\n\\t\\tmn = min(mn, s[i])\\n\\t\\tif s[i] > mn:\\n\\t\\t\\tprint('Ann')\\n\\t\\telse:\\n\\t\\t\\tprint('Mike')\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: Realize that the problem is a game theory question where two players, Mike and Ann, take turns modifying a substring of a given string `s`.\\n- Identifying Game Rules: Note that the players start with a substring of length 1 (l=r=k) and can expand it (l' <= l, r' >= r) as long as the new substring is lexicographically smaller than the previous one. Ann goes first, and the player who can't make a move loses.\\n- Simplifying the Winning Condition: A player loses if no move is possible, meaning there is no lexicographically smaller substring to choose.\\n- Finding a Pattern: Observe that the key to winning is to make a move toward the lexicographically smallest character seen so far. If the current character at index `k` is greater than the smallest character seen before that index, then Ann can make a move to a smaller substring. If the current character is the smallest seen so far, Mike wins, since there are no substrings lexicographically smaller than the current substring.\\n- Algorithm Development: Iterate through the string `s`. Keep track of the minimum character seen so far. If the character at the current index `i` is greater than the minimum character seen so far, Ann wins. Otherwise, Mike wins.\",\n  \"LLM Questions\": [\n    \"How can you determine if a move is possible given the current substring s[l, r]?\",\n    \"If you encounter a character s[k] that is the smallest encountered so far, what does it tell you about who wins the game?\",\n    \"If s[k] is greater than the minimum character encountered up to that point, who wins the game?\",\n    \"What does it mean for a substring to be lexicographically smaller than another substring?\",\n    \"Is it possible to determine who wins without simulating the entire game?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A move is possible if there exists a substring s[l', r'] such that l' <= l, r' >= r, and s[l', r'] is lexicographically smaller than s[l, r].\",\n    \"If the character at s[k] is the smallest encountered so far, then Mike wins because there is no lexicographically smaller substring available for Ann to select as her first move.\",\n    \"If s[k] is greater than the minimum character encountered up to that point, then Ann wins, as she can always make a valid move to select a smaller substring.\",\n    \"A substring s1 is lexicographically smaller than s2 if s1 comes before s2 in dictionary order. This can be determined by comparing the characters of s1 and s2 from left to right until a difference is found.\",\n    \"Yes, it is possible to determine the winner without simulating the game by tracking the lexicographically smallest character encountered so far and comparing it with the character at the current index `k`.\"\n  ]\n}\n```"