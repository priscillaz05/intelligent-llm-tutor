"```json\n{\n  \"Coding Problem\": \"Given two matrices A and B. Both have N rows and M columns. In the matrix A, numbers from 1 to MN have been written in row major order. Row major order numbers cells from left to right, and top to bottom. That is,\\n\\n1                  2                 3             ...     M\\nA  =    M+1             M+2            M+3        ...     2M\\n2M+1           2M+2          2M+3       ...   3M\\n.                   .                  .              ...      .\\n.                   .                  .               ...      .\\n(N-1)M+1    (N-1)M+2    (N-1)M+3   ...   NM\\n\\nSimilarly, in the matrix B, numbers from 1 to MN have been written in column major order. Column major order numbers cells from top to bottom and left to right.\\n\\nYou are to count number of pairs (i,j) such that A_{i,j}=B_{i,j}.\\n\\n------ Input ------ \\n\\nThe input consists of multiple test cases. The first line of input contains a single integer T, the number of test cases. T test cases follow. Each test case is described by one line containing two space separated integers, N and M\\n\\n------ Output ------ \\n\\nOutput T lines, i^{th} line containing answer of the i^{th} test case.\\n\\n------ Constraints ------ \\n\\n1 \u2264 T \u2264 10^{5} 1 \u2264 N, M \u2264 10^{9}\\n\\n----- Sample Input 1 ------ \\n1\\n4 5\\n----- Sample Output 1 ------ \\n2\\n----- explanation 1 ------ \\nFor the first case two matrices look as follows:\\nA=\\n1 2 3 4 5 \\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20B=\\n1 5 9 13 17\\n2 6 10 14 18\\n3 7 11 15 19\\n4 8 12 16 20\\nA1,1=B1,1A4,5=B4,5\",\n  \"Ground Truth Solution\": \"import fractions\\nT = int(input())\\nfor t in range(T):\\n\\t(N, M) = map(int, input().split())\\n\\tprint(fractions.gcd(N - 1, M - 1) + 1)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem involves two matrices, A and B, both of size N x M. Matrix A is populated in row-major order, while matrix B is populated in column-major order. The goal is to count the number of cells (i, j) where the values in A and B are equal, i.e., A[i][j] = B[i][j].\\n- Deriving the Condition for Equality: The value in A at (i, j) is (i-1) * M + j. The value in B at (i, j) is (j-1) * N + i. We need to find when these are equal, which leads to the equation: (i-1) * M + j = (j-1) * N + i. Rearranging, we get i * M - M + j = j * N - N + i, which simplifies to i * (M - 1) - j * (N - 1) = M - N.\\n- Finding the Solutions: The simplified equation is a linear Diophantine equation: i * (M - 1) - j * (N - 1) = M - N. We can rewrite this as i * (M - 1) + j * (-(N - 1)) = M - N. The number of solutions to this equation is related to the greatest common divisor (GCD) of (M - 1) and (N - 1).\\n- GCD and Number of Solutions: Let g = gcd(M - 1, N - 1). We need to check if g divides (M - N). If it does, then the number of solutions is related to g. Specifically, the number of solutions is gcd(N-1, M-1) + 1.\\n- Implementation Strategy: Calculate the GCD of (N - 1) and (M - 1). Print the GCD + 1 as the answer for each test case.\",\n  \"LLM Questions\": [\n    \"How are the matrices A and B populated differently, and how does this affect the values at A[i][j] and B[i][j]?\",\n    \"What is the equation that represents the condition when A[i][j] is equal to B[i][j]?\",\n    \"Why is the greatest common divisor (GCD) of (N-1) and (M-1) important in solving this problem?\",\n    \"Given that the problem involves large values of N and M (up to 10^9), how can you efficiently compute the GCD without causing overflow issues?\",\n    \"Once you calculate the GCD of (N-1) and (M-1), how do you derive the final answer from that value?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Matrix A is populated in row-major order, meaning elements are numbered from left to right, then top to bottom. Matrix B is populated in column-major order, meaning elements are numbered from top to bottom, then left to right. This results in A[i][j] being (i-1) * M + j, and B[i][j] being (j-1) * N + i.\",\n    \"The equation representing the condition when A[i][j] = B[i][j] is (i-1) * M + j = (j-1) * N + i, which simplifies to i * (M - 1) - j * (N - 1) = M - N.\",\n    \"The GCD is important because it helps determine the number of integer solutions to the Diophantine equation i * (M - 1) - j * (N - 1) = M - N. The number of solutions is related to the GCD of (M-1) and (N-1).\",\n    \"The GCD can be computed efficiently using the Euclidean algorithm, which involves repeated modulo operations. Since Python has arbitrary precision integers, overflow is less of a concern, but using the Euclidean algorithm avoids potentially large intermediate values.\",\n    \"The final answer is simply the GCD of (N-1) and (M-1) plus 1. So, you calculate gcd(N-1, M-1) and then return gcd(N-1, M-1) + 1.\"\n  ]\n}\n```"