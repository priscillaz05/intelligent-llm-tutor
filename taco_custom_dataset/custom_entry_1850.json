"```json\n{\n  \"Coding Problem\": \"This Christmas Santa gave Masha a magic picture and a pencil. The picture consists of n points connected by m segments (they might cross in any way, that doesn't matter). No two segments connect the same pair of points, and no segment connects the point to itself. Masha wants to color some segments in order paint a hedgehog. In Mashas mind every hedgehog consists of a tail and some spines. She wants to paint the tail that satisfies the following conditions:   Only segments already presented on the picture can be painted;  The tail should be continuous, i.e. consists of some sequence of points, such that every two neighbouring points are connected by a colored segment;  The numbers of points from the beginning of the tail to the end should strictly increase. \\n\\nMasha defines the length of the tail as the number of points in it. Also, she wants to paint some spines. To do so, Masha will paint all the segments, such that one of their ends is the endpoint of the tail. Masha defines the beauty of a hedgehog as the length of the tail multiplied by the number of spines. Masha wants to color the most beautiful hedgehog. Help her calculate what result she may hope to get.\\n\\nNote that according to Masha's definition of a hedgehog, one segment may simultaneously serve as a spine and a part of the tail (she is a little girl after all). Take a look at the picture for further clarifications.\\n\\n\\n-----Input-----\\n\\nFirst line of the input contains two integers n and m(2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 200 000)\\u00a0\u2014 the number of points and the number segments on the picture respectively. \\n\\nThen follow m lines, each containing two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\\u00a0\u2014 the numbers of points connected by corresponding segment. It's guaranteed that no two segments connect the same pair of points.\\n\\n\\n-----Output-----\\n\\nPrint the maximum possible value of the hedgehog's beauty.\\n\\n\\n-----Examples-----\\nInput\\n8 6\\n4 5\\n3 5\\n2 5\\n1 2\\n2 8\\n6 7\\n\\nOutput\\n9\\n\\nInput\\n4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\\nOutput\\n12\\n\\n\\n\\n-----Note-----\\n\\nThe picture below corresponds to the first sample. Segments that form the hedgehog are painted red. The tail consists of a sequence of points with numbers 1, 2 and 5. The following segments are spines: (2, 5), (3, 5) and (4, 5). Therefore, the beauty of the hedgehog is equal to 3\u00b73 = 9.\\n\\n[Image]\",\n  \"Ground Truth Solution\": \"(n, m) = [int(x) for x in input().split()]\\nvalues = [1] * n\\nnodes = [list() for _ in range(n)]\\nspikes = [0] * n\\nfor _ in range(m):\\n\\t(n1, n2) = [int(x) for x in input().split()]\\n\\tif n1 > n2:\\n\\t\\t(n1, n2) = (n2, n1)\\n\\tnodes[n1 - 1].append(n2 - 1)\\n\\tspikes[n1 - 1] += 1\\n\\tspikes[n2 - 1] += 1\\nfor i in range(0, n):\\n\\tfor node in nodes[i]:\\n\\t\\tvalues[node] = max(values[node], values[i] + 1)\\nm = max(list(range(n)), key=lambda i: spikes[i] * values[i])\\nprint(spikes[m] * values[m])\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem is to find the most beautiful 'hedgehog' in a graph, where a hedgehog is defined by a tail (a strictly increasing sequence of connected nodes) and spines (edges connected to the end of the tail). The beauty is calculated as the product of the tail length and the number of spines connected to the tail's end.\\n- Data Structures: Represent the graph using an adjacency list. Use an array to store the maximum tail length ending at each node. Use another array to store the degree of each node (number of connected edges, which represents potential spines).\\n- Algorithm: Iterate through the nodes, building potential tails. The tail must be a strictly increasing sequence of node indices. For each node, calculate the maximum possible tail length ending at that node. At the end of the tail, compute the number of spines connected to that node (its degree). Finally, calculate the beauty of the hedgehog for each possible tail end and select the maximum beauty.\\n- Optimization: The key is to dynamically compute the maximum possible tail length at each node based on tails ending at nodes with smaller indices. Also, pre-calculating the degree of each node simplifies the spine calculation.\",\n  \"LLM Questions\": [\n    \"How do you represent the graph to efficiently find the tails and spines?\",\n    \"How can you ensure that the tail is a continuous, strictly increasing sequence of nodes?\",\n    \"How do you calculate the length of the tail ending at each node?\",\n    \"How do you determine the number of spines connected to the end of the tail?\",\n    \"How do you optimize the calculation of the hedgehog's beauty to handle large inputs efficiently?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The graph can be represented using an adjacency list, where each node has a list of its adjacent nodes. This allows efficient traversal of connected edges.\",\n    \"The tail can be built by iterating through the nodes and checking if there's an edge between the current node and a previous node in the tail. The node indices must also be strictly increasing.\",\n    \"The length of the tail ending at a node can be calculated dynamically. Start with a tail length of 1 for each node. If a node can be added to the end of an existing tail, update its tail length to be 1 more than the tail length of the previous node.\",\n    \"The number of spines connected to the end of the tail is the degree of the node at the end of the tail. This can be pre-calculated and stored in an array.\",\n    \"Optimization can be achieved by pre-calculating the degree of each node. Dynamic programming is used to avoid redundant computations of tail lengths.\"\n  ]\n}\n```"