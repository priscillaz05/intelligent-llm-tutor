"```json\n{\n  \"Coding Problem\": \"Chef has $N$ [6-sided standard dice]. Each die has dimensions $1 \\\\times 1 \\\\times 1$. Since Chef is bored during the quarantine, he decides to stack dice for fun.\\n\\nFirst, Chef forms four vertical stacks of dice (not necessarily with the same height; empty stacks are allowed) on his table, which together make up a pile of dice with base area up to $2 \\\\times 2$. Among all such structures, the total visible surface area of Chef's structure must be the smallest possible. \\n\\nThen, Chef calculates the number of [pips]  on the visible faces of all dice in the structure. A face of a die is visible if it does not touch the table or another die.\\n\\nNow, he is wondering: among all possible arrangements of dice, what is the maximum possible total number of visible pips? Since he is busy cooking, he is asking you to solve this.\\n\\n------ Input ------\\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\\nThe first and only line of each test case contains a single integer $N$.\\n\\n------ Output ------\\nFor each test case, print a single line containing one integer \u2015 the maximum possible number of visible pips.\\n\\n------ Constraints ------\\n$1 \u2264 T \u2264 10^{5}$\\n$1 \u2264 N \u2264 10^{12}$\\n\\n------ Subtasks ------\\nSubtask #1 (10 points):\\n$T \u2264 100$\\n$N \u2264 4$\\n\\nSubtask #2 (10 points):\\n$T \u2264 100$\\n$N \u2264 8$\\n\\nSubtask #3 (25 points):\\n$T \u2264 100$\\n$N \u2264 10^{4}$\\n\\nSubtask #4 (55 points): original constraints\\n\\n----- Sample Input 1 ------ \\n1\\n\\n1\\n----- Sample Output 1 ------ \\n20\\n----- explanation 1 ------ \\nExample case 1: There is only one die. If Chef places it on the table with 1 pip facing down, the visible pips are 2, 3, 4, 5 and 6, and their sum is $20$.\",\n  \"Ground Truth Solution\": \"(L1, L2) = ([0, 20, 36, 51], [16, 21, 22, 22])\\nfor T in range(int(input())):\\n\\tn = int(input())\\n\\tif n < 4:\\n\\t\\tprint(L1[n])\\n\\telse:\\n\\t\\tprint(L2[n % 4] + 11 * n)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: Recognize that Chef stacks N dice into at most four stacks arranged in a 2x2 grid. The objective is to maximize the visible pips.\\n- Identifying Potential Pitfalls: Consider cases with small numbers of dice (N < 4) and large numbers of dice. Realize that minimizing the contact area between dice will maximize the number of visible pips.\\n- Selecting an Algorithmic Strategy: For N <= 4, precalculate the maximum visible pips. For N > 4, arrange the dice such that all faces except the bottom one are visible. The minimum face (1) should be on the bottom.\\n- Implementing Formula: For N > 4, the visible pips for each die will be 2 + 3 + 4 + 5 + 6 = 20, and when the number 1 is at the bottom, the sum will be 21. Consider that the arrangement after every 4 dice gives some remainder. The core visible amount is `11 * n`. Need to check what are the offset when n > 4 and n % 4 == 0, 1, 2, 3\",\n  \"LLM Questions\": [\n    \"What is the objective function we are trying to maximize?\",\n    \"How does the number of dice stacks relate to the total visible pips?\",\n    \"How can we determine the number of invisible pips?\",\n    \"For N > 4, is there a pattern in visible pips?\",\n    \"What are the base cases and how should they be handled?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"We are trying to maximize the total number of visible pips on all dice.\",\n    \"The number of dice stacks impacts how many faces are hidden. Fewer stacks minimize the contact area, increasing visible faces.\",\n    \"The number of invisible pips is equal to the number of contacts between dice, since we put number 1 on the bottom to minimize pips.\",\n    \"For N > 4, we can calculate a base visible pips and calculate a periodic offset every 4 dice. Specifically, each die has 5 visible sides and the side at the bottom has the least number which is 1 so each die contributes to 21 - 1 = 20 visible pips. Thus total visible pips = 5 * sum(dice) = 5 * (n * (n+1) / 2). However we need to put the number one on the bottom so that the rest sum up to 20.\",\n    \"When N < 4, use a pre-calculated values and return the corresponding answers. When N = 0 return 0. When N = 1, 2, 3, return the visible pips for each cases.\"\n  ]\n}\n```"