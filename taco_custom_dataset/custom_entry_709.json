"```json\n{\n  \"Coding Problem\": \"Andrew has $n$ piles with stones. The $i$-th pile contains $a_i$ stones. He wants to make his table clean so he decided to put every stone either to the $1$-st or the $n$-th pile.\\n\\nAndrew can perform the following operation any number of times: choose $3$ indices $1 \\\\le i < j < k \\\\le n$, such that the $j$-th pile contains at least $2$ stones, then he takes $2$ stones from the pile $j$ and puts one stone into pile $i$ and one stone into pile $k$.\\n\\nTell Andrew what is the minimum number of operations needed to move all the stones to piles $1$ and $n$, or determine if it's impossible.\\n\\n\\n-----Input-----\\n\\nThe input contains several test cases. The first line contains one integer $t$ ($1 \\\\leq t \\\\leq 10000$) \u2014 the number of test cases.\\n\\nThe first line for each test case contains one integer $n$ ($3 \\\\leq n \\\\leq 10^5$) \u2014 the length of the array.\\n\\nThe second line contains a sequence of integers $a_1, a_2, \\\\ldots, a_n$ ($1 \\\\leq a_i \\\\leq 10^9$) \u2014 the array elements.\\n\\nIt is guaranteed that the sum of the values $n$ over all test cases does not exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case print the minimum number of operations needed to move stones to piles $1$ and $n$, or print $-1$ if it's impossible.\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n5\\n1 2 2 3 6\\n3\\n1 3 1\\n3\\n1 2 1\\n4\\n3 1 1 2\\nOutput\\n4\\n-1\\n1\\n-1\\n\\n\\n-----Note-----\\n\\nIn the first test case, it is optimal to do the following:\\n\\nSelect $(i, j, k) = (1, 2, 5)$. The array becomes equal to $[2, 0, 2, 3, 7]$.\\n\\nSelect $(i, j, k) = (1, 3, 4)$. The array becomes equal to $[3, 0, 0, 4, 7]$.\\n\\nTwice select $(i, j, k) = (1, 4, 5)$. The array becomes equal to $[5, 0, 0, 0, 9]$. This array satisfy the statement, because every stone is moved to piles $1$ and $5$.\\n\\nThere are $4$ operations in total.\\n\\nIn the second test case, it's impossible to put all stones into piles with numbers $1$ and $3$:\\n\\nAt the beginning there's only one possible operation with $(i, j, k) = (1, 2, 3)$. The array becomes equal to $[2, 1, 2]$.\\n\\nNow there is no possible operation and the array doesn't satisfy the statement, so the answer is $-1$.\\n\\nIn the third test case, it's optimal to do the following:\\n\\nSelect $(i, j, k) = (1, 2, 3)$. The array becomes equal to $[2, 0, 2]$. This array satisfies the statement, because every stone is moved to piles $1$ and $3$.\\n\\nThe is $1$ operation in total.\\n\\nIn the fourth test case, it's impossible to do any operation, and the array doesn't satisfy the statement, so the answer is $-1.\",\n  \"Ground Truth Solution\": \"for s in [*open(0)][2::2]:\\n\\ta = list(map(int, s.split()))[1:-1]\\n\\tif len(a) == 1 and a[0] & 1 or a.count(1) == len(a):\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(sum([(i + 1) // 2 for i in a]))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The problem asks for the minimum number of operations to move all stones to the first and last piles. Each operation involves taking two stones from pile $j$ and moving one to pile $i$ and one to pile $k$, where $1 \\\\le i < j < k \\\\le n$.\\n- Identifying Constraints and Edge Cases: The middle pile must have at least two stones for an operation. If it's impossible to move all stones to the first and last piles, return -1. An impossible case is identified if all middle piles have only 1 stone or when there's only one middle pile which has an odd number of stone.\\n- Devising a Strategy: The number of operations needed for each middle pile $j$ is $\\\\lceil \\\\frac{a_j}{2} \\\\rceil$, if $a_j > 1$. Sum the operation counts for all middle piles to find the total operations.\\n- Checking for Infeasibility: Check if all middle piles have only one stone. If so, it's impossible if any of the middle piles exist since they can't be reduced to zero.\",\n  \"LLM Questions\": [\n    \"How do you determine if it is impossible to move all the stones to piles 1 and n?\",\n    \"How do you calculate the minimum number of operations for a single middle pile with more than one stone?\",\n    \"How do you combine the operations from all middle piles to get the total number of operations?\",\n    \"What are the key constraints on the indices i, j, and k when performing the stone movement operation?\",\n    \"What are the edge cases related to the number of stones in each pile that need to be considered?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"It's impossible if all the middle piles have at most one stone or if there's only one pile and it has an odd number of stones.\",\n    \"The minimum number of operations is the ceiling of $a_j / 2$ where $a_j$ is the number of stones in pile j.\",\n    \"Sum the minimum number of operations for each middle pile.\",\n    \"The indices must satisfy $1 \\\\le i < j < k \\\\le n$, meaning i, j, and k must be distinct, in ascending order, and within the bounds of the array.\",\n    \"If a middle pile has fewer than two stones, no operation can be performed on it. If all middle piles have at most one stone, or if there is only one middle pile and it has an odd number of stones, it's impossible to move all stones to the first and last piles.\"\n  ]\n}\n```"