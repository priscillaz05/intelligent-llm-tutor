"```json\n{\n  \"Coding Problem\": \"Little penguin Polo adores strings. But most of all he adores strings of length n.\\n\\nOne day he wanted to find a string that meets the following conditions:  The string consists of n lowercase English letters (that is, the string's length equals n), exactly k of these letters are distinct.  No two neighbouring letters of a string coincide; that is, if we represent a string as s = s_1s_2... s_{n}, then the following inequality holds, s_{i} \u2260 s_{i} + 1(1 \u2264 i < n).  Among all strings that meet points 1 and 2, the required string is lexicographically smallest. \\n\\nAmong all strings that meet points 1 and 2, the required string is lexicographically smallest. \\n\\nHelp him find such string or state that such string doesn't exist.\\n\\nString x = x_1x_2... x_{p} is lexicographically less than string y = y_1y_2... y_{q}, if either p < q and x_1 = y_1, x_2 = y_2, ... , x_{p} = y_{p}, or there is such number r (r < p, r < q), that x_1 = y_1, x_2 = y_2, ... , x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1. The characters of the strings are compared by their ASCII codes.\\n\\n\\n-----Input-----\\n\\nA single line contains two positive integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26) \u2014 the string's length and the number of distinct letters.\\n\\n\\n-----Output-----\\n\\nIn a single line print the required string. If there isn't such string, print \\\"-1\\\" (without the quotes).\\n\\n\\n-----Examples-----\\nInput\\n7 4\\n\\nOutput\\nababacd\\n\\nInput\\n4 7\\n\\nOutput\\n-1\",\n  \"Ground Truth Solution\": \"(n, m) = list(map(int, input().split()))\\nif m > n or (m == 1 and n > 1):\\n\\tprint(-1)\\n\\treturn\\nif m == 1:\\n\\tprint('a')\\n\\treturn\\nl = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\\ns = ''\\nfor i in range(2, m):\\n\\ts += l[i]\\nn -= m - 2\\nl = ''\\nl += 'ab' * int(n / 2)\\nif n % 2 != 0:\\n\\tl += 'a'\\nprint(l + s)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The string must be of length `n`, contain `k` distinct lowercase letters, and have no two adjacent characters equal. The output string has to be the lexicographically smallest one that satisfies the conditions.\\n- Identifying Potential Pitfalls: If `k > n`, then we cannot construct a string of length `n` with `k` distinct characters. Also, if `k = 1` and `n > 1`, we cannot construct a string of length `n` such that no two adjacent characters are equal.\\n- Selecting an Algorithmic Strategy: Use 'a' and 'b' as much as possible at the begining to build the lexicographically smallest string that satisfied the adjacent characters are not same. After that, add other characters ('c','d'...) to satisfy number of distinct characters. We build the initial part of the string with alternating 'a' and 'b' until only k distinct character is left. Add the remaing distinct characers.\\n- Implementation Considerations: Carefully handle the conditions `k > n` or `k = 1` and `n > 1`, where no valid string exists. Construct the initial alternating 'a' and 'b' part. Add the remaining distinct characters 'c', 'd', ... to satisfy the requirement of k distinct characters.\",\n  \"LLM Questions\": [\n    \"What are the conditions for the string to be valid, and why are they important?\",\n    \"When is it impossible to construct such a string and what should you output in those cases?\",\n    \"How can you construct the lexicographically smallest string that satisfies the conditions, particularly the alternating characters and distinct character count?\",\n    \"If n=7, k=4 what would be the number of 'a','b' pairs?\",\n    \"How would you deal with edge cases?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The conditions are: the string must be of length `n`, consist of `k` distinct lowercase letters, and have no two adjacent characters equal. They are important because they define the criteria for a valid string.\",\n    \"It is impossible if `k > n` or `k = 1` and `n > 1`. In these cases, you should output \\\"-1\\\".\",\n    \"Start by alternating 'a' and 'b' as much as possible to form the beginning of the string. Then, add the remaining distinct characters ('c', 'd', etc.) until you have `k` distinct characters.\",\n    \"If n = 7 and k = 4, we will use 'a','b' as much as possible. After that add 'c' and 'd' in the tail. In that case, 'ab' would appears twice to keep it lexicographically smallest string. \\n\",\n    \"Handle the conditions when `k > n` or `k = 1 and n > 1`. Also when constructing the alternating string, we need to verify the number of pairs is not bigger than n to avoid index out of boundary.\"\n  ]\n}\n```"