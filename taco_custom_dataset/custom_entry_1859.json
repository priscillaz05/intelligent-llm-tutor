"```json\n{\n  \"Coding Problem\": \"# Story\\n\\nThose pesky rats have returned and this time they have taken over the Town Square.\\n\\nThe Pied Piper has been enlisted again to play his magical tune and coax all the rats towards him.\\n\\nBut some of the rats are deaf and are going the wrong way!\\n\\n# Kata Task\\n\\nHow many deaf rats are there?\\n\\n## Input Notes\\n\\n* The Town Square is a rectangle of square paving stones (the Square has 1-15 pavers per side)\\n* The Pied Piper is always present\\n\\n## Output Notes\\n* Deaf rats are those that are moving to paving stone **further away** from the Piper than where they are now\\n* Use Euclidian distance for your calculations\\n\\n## Legend\\n\\n* `P` = The Pied Piper\\n* `\u2190` `\u2191` `\u2192` `\u2193` `\u2196` `\u2197` `\u2198` `\u2199` = Rats going in different directions\\n* space = Everything else\\n\\n\\n\\n# Examples\\n\\nex1 - has 1 deaf rat\\n\\n\\n\u2197 P              \\n  \u2198   \u2196\\n  \u2191              \\n\u2197        \\n\\n\\n---\\n\\nex2 - has 7 deaf rats\\n\\n\\n    \u2197            \\nP \u2193   \u2196 \u2191\\n    \u2190   \u2193\\n  \u2196 \u2199   \u2199\\n\u2193 \u2193 \u2193\",\n  \"Ground Truth Solution\": \"from math import hypot\\nDIRS = {'\u2190': (0, -1), '\u2191': (-1, 0), '\u2192': (0, 1), '\u2193': (1, 0), '\u2196': (-1, -1), '\u2197': (-1, 1), '\u2198': (1, 1), '\u2199': (1, -1)}\\n\\ndef count_deaf_rats(town):\\n\\tpipper = next(((x, y) for (x, r) in enumerate(town) for (y, c) in enumerate(r) if c == 'P'))\\n\\treturn sum((isDeaf(pipper, x, y, *DIRS[c]) for (x, r) in enumerate(town) for (y, c) in enumerate(r) if c in DIRS))\\n\\ndef isDeaf(pipper, x, y, dx, dy):\\n\\t(dCurrent, dNext) = (hypot(*(a - b for (a, b) in zip(pipper, pos))) for pos in ((x, y), (x + dx, y + dy)))\\n\\treturn dCurrent < dNext\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The problem requires determining the number of 'deaf rats' in a town square. A 'deaf rat' is one moving further away from the Pied Piper than its current location.\\n- Representing the Town Square: The town square is represented as a grid where 'P' denotes the Pied Piper and directional symbols denote rats moving in that direction.\\n- Distance Calculation: Euclidean distance should be used to calculate distances between locations.\\n- Identifying Rat Positions: The program must identify the coordinates of each rat and the Pied Piper.\\n- Determining Deaf Rats: For each rat, calculate the distance to the Pied Piper from its current position and from where it will be after moving one step. If the distance after moving is greater, the rat is 'deaf'.\\n- Edge Cases: Handle cases where the rat might move off the grid.\\n- Special Cases: A grid with no rats or no Pied Piper.\",\n  \"LLM Questions\": [\n    \"How do you represent the town square and the positions of the rats and the Pied Piper in code?\",\n    \"How can you calculate the Euclidean distance between two points on the grid?\",\n    \"How would you determine the new position of a rat after it moves in a given direction?\",\n    \"How do you identify a 'deaf rat' based on its movement and distance from the Pied Piper?\",\n    \"What are the possible edge cases or special scenarios that might occur, and how do you handle them?\",\n    \"How can you ensure that your solution iterates efficiently through the grid to locate rats and the Pied Piper?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The town square can be represented as a list of lists (2D array), where each inner list represents a row. The Pied Piper is 'P', and rats are represented by directional symbols. Their positions can be determined by iterating through the 2D array and storing the row and column indices.\",\n    \"The Euclidean distance between two points (x1, y1) and (x2, y2) is sqrt((x2 - x1)^2 + (y2 - y1)^2). You can use the `math.hypot` function to directly calculate this.\",\n    \"Given a rat's current position (x, y) and a direction (e.g., '\u2191', '\u2192'), you can determine the new position by adding the corresponding directional vector to the current coordinates.  For example, '\u2191' could correspond to (-1, 0), so the new position would be (x-1, y).\",\n    \"A rat is 'deaf' if the distance between its new position and the Pied Piper is greater than the distance between its current position and the Pied Piper.\",\n    \"Edge cases include an empty town square, no Pied Piper, no rats, or a rat moving off the grid. To handle these, check for empty lists, handle the absence of 'P', and ensure that new rat positions remain within the bounds of the grid.\",\n    \"You can use nested loops to iterate through the rows and columns of the grid. You can optimize the search for the Pied Piper by exiting the loops once 'P' is found. Use helper functions to encapsulate distance calculations and rat movement logic for better readability and maintainability.\"\n  ]\n}\n```"