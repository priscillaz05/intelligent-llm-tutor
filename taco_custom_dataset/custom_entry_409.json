"```json\n{\n  \"Coding Problem\": \"Given an array arr[] of N integers, the task is to find a subsequence of size K whose product is maximum among all possible K sized subsequences of a given array.\\nExample 1:\\nInput: N = 4, K = 2\\narr[] = {1, 2, 0, 3} \\nOutput: 6\\nExplanation: Subsequence containing \\nelements {2, 3} gives maximum product: \\n2*3 = 6\\nExample 2:\\nInput: N = 6, K = 4\\narr[] = {1, 2, -1, -3, -6, 4}\\nOutput: 144\\nExplanation: Subsequence containing \\n{2, -3, -6, 4} gives maximum product: \\n2*(-3)*(-6)*4 = 144\\nYour Task:\\nThis is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function maxProductSubarrayOfSizeK() that takes array arr[], integer N and integer K as parameters and returns the desired product.\\n \\nExpected Time Complexity: O(NlogN).\\nExpected Auxiliary Space: O(1).\\n \\nConstraints:\\n1 \u2264 N \u2264 10^{5}\",\n  \"Ground Truth Solution\": \"class Solution:\\n\\n\\tdef maxProductSubarrayOfSizeK(self, arr, n, k):\\n\\t\\tproduct = 1\\n\\t\\tarr.sort()\\n\\t\\tif k % 2 and arr[-1] < 0:\\n\\t\\t\\tfor _ in range(k):\\n\\t\\t\\t\\tproduct *= arr.pop()\\n\\t\\t\\treturn product\\n\\t\\tif k % 2:\\n\\t\\t\\tproduct *= arr.pop()\\n\\t\\t\\tk -= 1\\n\\t\\twhile k:\\n\\t\\t\\tif arr[0] * arr[1] > arr[-1] * arr[-2]:\\n\\t\\t\\t\\tproduct *= arr.pop(0) * arr.pop(0)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tproduct *= arr.pop() * arr.pop()\\n\\t\\t\\tk -= 2\\n\\t\\treturn product\",\n  \"LLM CoT Steps Breakdown\": \"- Sort the input array to easily access the smallest and largest elements.\\n- Handle the case where k is odd: if the last element is negative we multiply all elements.\\n- Handle the case where k is even or k is odd and the last element is positive: iteratively select either two smallest elements or two largest elements for multiplication in order to maximize the product.\\n- Return the final product.\",\n  \"LLM Questions\": [\n    \"How does sorting the array simplify the task of finding the maximum product subsequence?\",\n    \"When k is odd, how does the sign of the largest element affect the selection of elements for the subsequence?\",\n    \"When selecting two elements at a time to maximize the product, how do you decide between choosing the two smallest or two largest elements?\",\n    \"What is the purpose of sorting the array and how does it enable efficient selection?\",\n    \"What are some potential edge cases to consider, and how would you handle them?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Sorting allows for easy access to the smallest and largest elements, which are crucial for maximizing the product, especially when dealing with negative numbers.\",\n    \"If the largest element is negative and k is odd, we must include it in the subsequence. In this case, all the largest K elements must be negative, so the correct answer will be their product\",\n    \"If the product of the two smallest elements is greater than the product of the two largest elements, it indicates that including the two smallest (presumably negative) elements will result in a higher overall product, we select two smallest. Otherwise, include two largest.\",\n    \"Sorting arranges the array in ascending order, enabling a direct comparison of the product of the two smallest elements (potentially negative) with the product of the two largest elements for subsequence selection.\",\n    \"Edge cases include when the array is empty or when k is zero, or when all array elements are zero. In these cases special conditional logic should be implemented to handle these conditions appropriately.\"\n  ]\n}\n```"