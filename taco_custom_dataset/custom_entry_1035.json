"```json\n{\n  \"Coding Problem\": \"You are given a string $s$. You need to find two non-empty strings $a$ and $b$ such that the following conditions are satisfied:\\n\\nStrings $a$ and $b$ are both subsequences of $s$.\\n\\nFor each index $i$, character $s_i$ of string $s$ must belong to exactly one of strings $a$ or $b$.\\n\\nString $a$ is lexicographically minimum possible; string $b$ may be any possible string.\\n\\nGiven string $s$, print any valid $a$ and $b$.\\n\\nReminder:\\n\\nA string $a$ ($b$) is a subsequence of a string $s$ if $a$ ($b$) can be obtained from $s$ by deletion of several (possibly, zero) elements. For example, \\\"dores\\\", \\\"cf\\\", and \\\"for\\\" are subsequences of \\\"codeforces\\\", while \\\"decor\\\" and \\\"fork\\\" are not.\\n\\nA string $x$ is lexicographically smaller than a string $y$ if and only if one of the following holds:\\n\\n$x$ is a prefix of $y$, but $x \\\\ne y$;\\n\\nin the first position where $x$ and $y$ differ, the string $x$ has a letter that appears earlier in the alphabet than the corresponding letter in $y$.\\n\\n\\n-----Input-----\\n\\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\\\le t \\\\le 1000$). Description of the test cases follows.\\n\\nThe first and only line of each test case contains one string $s$ ($2 \\\\le |s| \\\\le 100$ where $|s|$ means the length of $s$). String $s$ consists of lowercase Latin letters.\\n\\n\\n-----Output-----\\n\\nFor each test case, print the strings $a$ and $b$ that satisfy the given conditions. If there are multiple answers, print any.\\n\\n\\n-----Examples-----\\n\\nInput\\n3\\nfc\\naaaa\\nthebrightboiler\\nOutput\\nc f\\na aaa\\nb therightboiler\\n\\n\\n-----Note-----\\n\\nIn the first test case, there are only two choices: either $a =$ f and $b = $ c or $a = $ c and $b = $ f. And $a = $c is lexicographically smaller than $a = $ f.\\n\\nIn the second test case, a is the only character in the string.\\n\\nIn the third test case, it can be proven that b is the lexicographically smallest subsequence of $s$. The second string can be of two variants; one of them is given here.\",\n  \"Ground Truth Solution\": \"def read_nums():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef solve():\\n\\ts = input()\\n\\ta = min(s)\\n\\ti = s.index(a)\\n\\tb = s[:i] + s[i + 1:]\\n\\tprint(a, b)\\n\\ndef main():\\n\\t(t,) = read_nums()\\n\\tfor _ in range(t):\\n\\t\\tsolve()\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The problem requires dividing a given string `s` into two subsequences `a` and `b` such that every character of `s` belongs to exactly one of these subsequences, and `a` is lexicographically the smallest possible string. Essentially, this means finding the smallest character in `s` and assigning it to `a`, while the rest of the characters form `b`.\\n- Identifying Edge Cases: The problem states the string `s` will have at least two characters. Therefore, there will always be a minimum character in the string, and after removing this character, `b` will always contain at least one character.\\n- Algorithm Choice: The straightforward approach is to find the lexicographically smallest character in `s`. Then, we assign this character to `a`, and the remaining characters of `s` to `b`. The index of the first occurrence of minimum character will be used to construct string `b`.\\n- Implementation Details: We must efficiently find the minimum character and its index in string `s`. Then, construct `b` by concatenating the part of `s` before the index and the part after the index.\",\n  \"LLM Questions\": [\n    \"What does it mean for a string 'a' to be lexicographically smaller than another string 'b'?\",\n    \"How can you efficiently determine the lexicographically smallest character in a given string?\",\n    \"How do you ensure that every character in the original string 's' is included in either string 'a' or string 'b' and not in both?\",\n    \"How can we construct string 'b' from string 's' after finding the smallest character and adding it to 'a'?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A string 'x' is lexicographically smaller than 'y' if 'x' is a prefix of 'y' (but not equal), or if the first differing character in 'x' comes earlier in the alphabet than the corresponding character in 'y'.\",\n    \"Iterate through the string and keep track of the smallest character found so far. Update the smallest character if a smaller character is encountered.\",\n    \"By removing the characters that are put into string 'a' from the original string 's', and forming string 'b' with the remaining characters. Therefore, each character of 's' appears exactly once in either `a` or `b`.\",\n    \"After identifying the smallest character and its index, string 'b' can be constructed by concatenating the substring of 's' before the index of smallest character, and the substring after the index. This removes the smallest character from 's'.\"\n  ]\n}\n```"