"```json\n{\n  \"Coding Problem\": \"You are living on an infinite plane with the Cartesian coordinate system on it. In one move you can go to any of the four adjacent points (left, right, up, down).\\n\\nMore formally, if you are standing at the point $(x, y)$, you can:\\n\\ngo left, and move to $(x - 1, y)$, or\\n\\ngo right, and move to $(x + 1, y)$, or\\n\\ngo up, and move to $(x, y + 1)$, or\\n\\ngo down, and move to $(x, y - 1)$.\\n\\nThere are $n$ boxes on this plane. The $i$-th box has coordinates $(x_i,y_i)$. It is guaranteed that the boxes are either on the $x$-axis or the $y$-axis. That is, either $x_i=0$ or $y_i=0$.\\n\\nYou can collect a box if you and the box are at the same point. Find the minimum number of moves you have to perform to collect all of these boxes if you have to start and finish at the point $(0,0).\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $t$ ($1 \\\\le t \\\\le 100$) \u2014 the number of test cases.\\n\\nThe first line of each test case contains a single integer $n$ ($1 \\\\le n \\\\le 100$) \u2014 the number of boxes.\\n\\nThe $i$-th line of the following $n$ lines contains two integers $x_i$ and $y_i$ ($-100 \\\\le x_i, y_i \\\\le 100$) \u2014 the coordinate of the $i$-th box. It is guaranteed that either $x_i=0$ or $y_i=0$.\\n\\nDo note that the sum of $n$ over all test cases is not bounded.\\n\\n\\n-----Output-----\\n\\nFor each test case output a single integer \u2014 the minimum number of moves required.\\n\\n\\n-----Examples-----\\n\\nInput\\n3\\n4\\n0 -2\\n1 0\\n-1 0\\n0 2\\n3\\n0 2\\n-3 0\\n0 -1\\n1\\n0 0\\nOutput\\n12\\n12\\n0\\n\\n\\n-----Note-----\\n\\nIn the first test case, a possible sequence of moves that uses the minimum number of moves required is shown below.\\n\\n$$(0,0) \\\\to (1,0) \\\\to (1,1) \\\\to (1, 2) \\\\to (0,2) \\\\to (-1,2) \\\\to (-1,1) \\\\to (-1,0) \\\\to (-1,-1) \\\\to (-1,-2) \\\\to (0,-2) \\\\to (0,-1) \\\\to (0,0)$$\\n\\nIn the second test case, a possible sequence of moves that uses the minimum number of moves required is shown below.\\n\\n$$(0,0) \\\\to (0,1) \\\\to (0,2) \\\\to (-1, 2) \\\\to (-2,2) \\\\to (-3,2) \\\\to (-3,1) \\\\to (-3,0) \\\\to (-3,-1) \\\\to (-2,-1) \\\\to (-1,-1) \\\\to (0,-1) \\\\to (0,0)$$\\n\\nIn the third test case, we can collect all boxes without making any moves.\",\n  \"Ground Truth Solution\": \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tSum = 0\\n\\t(A1, A2, A3, A4) = ([], [], [], [])\\n\\tfor _ in range(n):\\n\\t\\t(a, b) = map(int, input().split())\\n\\t\\tif a > 0:\\n\\t\\t\\tA1.append(a)\\n\\t\\telif a < 0:\\n\\t\\t\\tA2.append(-a)\\n\\t\\telif b > 0:\\n\\t\\t\\tA3.append(b)\\n\\t\\telif b < 0:\\n\\t\\t\\tA4.append(-b)\\n\\tif A1:\\n\\t\\tSum += max(A1) * 2\\n\\tif A2:\\n\\t\\tSum += max(A2) * 2\\n\\tif A3:\\n\\t\\tSum += max(A3) * 2\\n\\tif A4:\\n\\t\\tSum += max(A4) * 2\\n\\tprint(Sum)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The problem requires finding the minimum moves to collect boxes on either the x or y axis, starting and ending at (0,0). Each move can be up, down, left, or right.\\n- Identifying Potential Pitfalls: Since we need to return to (0,0), each movement to a coordinate must be accounted for twice (once to reach and once to return). We only need to consider the furthest box in each direction (positive x, negative x, positive y, negative y).\\n- Selecting an Algorithmic Strategy: Separate boxes by their location (positive x, negative x, positive y, negative y). Find the maximum absolute value of x and y in each direction. Sum these maximum distances and multiply by 2 to account for the return trip.\\n- Implementing Coordinate Handling: Properly classify each box based on its coordinates. Compute the maximum distance from the origin for each quadrant.\",\n  \"LLM Questions\": [\n    \"How do we account for the necessity to return to (0,0) after visiting all boxes?\",\n    \"What data structures are most appropriate for storing coordinates based on their sign?\",\n    \"How do you find the furthest box from the origin in each of the four directions (positive x, negative x, positive y, negative y)?\",\n    \"How would the solution change if we didn't have to return to (0,0) at the end?\",\n    \"What is the significance of the boxes being located only on the x or y axis?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Since we must return to (0,0), each move to a box needs to be counted twice - once for going to the box and once for returning to the origin.\",\n    \"Lists or arrays are appropriate for storing the coordinates. You can use separate lists for positive x, negative x, positive y, and negative y coordinates.\",\n    \"Iterate through the coordinates in each direction and keep track of the maximum absolute value of the x or y coordinate. This maximum value represents the furthest box from the origin in that direction.\",\n    \"If we didn't have to return to (0,0), we could potentially reduce the moves by optimizing the path and starting and ending at the furthest points to minimise travel. The current solution would no longer provide the minimal answer.\",\n    \"This simplifies the calculation of distance. The Manhattan distance will equal the absolute value of either its x or y coordinate, as one of them is always zero. This makes the problem solvable by just keeping track of the maximum absolute values in each direction.\"\n  ]\n}\n```"