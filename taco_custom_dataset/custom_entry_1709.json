"```json\n{\n  \"Coding Problem\": \"Recently Polycarpus has learned the \\\"bitwise AND\\\" operation (which is also called \\\"AND\\\") of non-negative integers. Now he wants to demonstrate the school IT teacher his superb manipulation with the learned operation.\\n\\nFor that Polycarpus came to school a little earlier and wrote on the board a sequence of non-negative integers a_1, a_2, ..., a_{n}. He also wrote a square matrix b of size n \u00d7 n. The element of matrix b that sits in the i-th row in the j-th column (we'll denote it as b_{ij}) equals:  the \\\"bitwise AND\\\" of numbers a_{i} and a_{j} (that is, b_{ij} = a_{i}\u00a0&\u00a0a_{j}), if i \u2260 j;  -1, if i = j. \\n\\nHaving written out matrix b, Polycarpus got very happy and wiped a off the blackboard. But the thing is, the teacher will want this sequence to check whether Polycarpus' calculations were correct. Polycarus urgently needs to restore the removed sequence of integers, or else he won't prove that he can count correctly.\\n\\nHelp Polycarpus, given matrix b, restore the sequence of numbers a_1, a_2, ..., a_{n}, that he has removed from the board. Polycarpus doesn't like large numbers, so any number in the restored sequence mustn't exceed 10^9.\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the size of square matrix b. Next n lines contain matrix b. The i-th of these lines contains n space-separated integers: the j-th number represents the element of matrix b_{ij}. It is guaranteed, that for all i (1 \u2264 i \u2264 n) the following condition fulfills: b_{ii} = -1. It is guaranteed that for all i, j (1 \u2264 i, j \u2264 n;\u00a0i \u2260 j) the following condition fulfills: 0 \u2264 b_{ij} \u2264 10^9, b_{ij} = b_{ji}.\\n\\n\\n-----Output-----\\n\\nPrint n non-negative integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9) \u2014 the sequence that Polycarpus wiped off the board. Separate the numbers by whitespaces. \\n\\nIt is guaranteed that there is sequence a that satisfies the problem conditions. If there are multiple such sequences, you are allowed to print any of them.\\n\\n\\n-----Examples-----\\nInput\\n1\\n-1\\n\\nOutput\\n0 \\nInput\\n3\\n-1 18 0\\n18 -1 0\\n0 0 -1\\n\\nOutput\\n18 18 0 \\nInput\\n4\\n-1 128 128 128\\n128 -1 148 160\\n128 148 -1 128\\n128 160 128 -1\\n\\nOutput\\n128 180 148 160 \\n\\n\\n-----Note-----\\n\\nIf you do not know what is the \\\"bitwise AND\\\" operation please read: http://en.wikipedia.org/wiki/Bitwise_operation.\",\n  \"Ground Truth Solution\": \"n = int(input())\\np = [0] * n\\nfor i in range(n):\\n\\tt = list(map(int, input().split()))\\n\\tt.pop(i)\\n\\ts = 0\\n\\tfor j in t:\\n\\t\\ts |= j\\n\\tp[i] = s\\nprint(' '.join(map(str, p)))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Bitwise AND Operation: Understand that the bitwise AND operation compares the corresponding bits of two integers. If both bits are 1, the corresponding bit in the result is 1; otherwise, it's 0.\\n- Understanding the Problem: The problem provides a matrix 'b' where b[i][j] is the bitwise AND of a[i] and a[j] (except when i=j where b[i][i] = -1). The task is to reconstruct the array 'a'.\\n- Identifying the Solution Approach: Realize that a[i] can be found by taking the bitwise OR of all b[i][j] for j != i. This works because b[i][j] = a[i] & a[j]. Taking the OR of all these values will accumulate all the bits that are set in a[i] due to its interaction with other elements. If there are no other elements then it will be 0.\\n- Implementation Details: Read the input matrix 'b'. For each row 'i', calculate the bitwise OR of all elements b[i][j] where j != i. Store the result in the array 'a'. Finally, print the array 'a'.\",\n  \"LLM Questions\": [\n    \"What is the bitwise AND operation, and how does it work?\",\n    \"How can you determine the value of a[i] given the matrix b?\",\n    \"What edge cases or constraints should you consider during implementation?\",\n    \"How does the given matrix 'b' relate to the original sequence 'a'?\",\n    \"Why do we use bitwise OR to reconstruct a[i] from the matrix b?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The bitwise AND operation compares corresponding bits of two integers. If both bits are 1, the resulting bit is 1; otherwise, it is 0.\",\n    \"a[i] can be found by performing a bitwise OR operation on all the elements in the i-th row of matrix b, excluding the diagonal element (b[i][i]).\",\n    \"Consider the constraints on the size of the matrix (n <= 100) and the range of values (0 <= b[ij] <= 10^9). Handle the case where n=1 correctly.\",\n    \"The matrix 'b' contains the bitwise AND results of each pair of elements in sequence 'a', except for the diagonal elements which are -1.\",\n    \"Since b[i][j] = a[i] & a[j], a[i] must have all the bits set that are present in any of the b[i][j]. Therefore, taking the bitwise OR of all b[i][j] (j != i) will reconstruct a[i].\"\n  ]\n}\n```"