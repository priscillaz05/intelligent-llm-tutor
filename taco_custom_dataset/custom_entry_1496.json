"```json\n{\n  \"Coding Problem\": \"You are given a rooted tree consisting of $n$ vertices numbered from $1$ to $n$. The root is vertex $1$. There is also a string $s$ denoting the color of each vertex: if $s_i = {B}$, then vertex $i$ is black, and if $s_i = {W}$, then vertex $i$ is white.\\n\\nA subtree of the tree is called balanced if the number of white vertices equals the number of black vertices. Count the number of balanced subtrees.\\n\\nA tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root. In this problem, all trees have root $1$.\\n\\nThe tree is specified by an array of parents $a_2, \\\\dots, a_n$ containing $n-1$ numbers: $a_i$ is the parent of the vertex with the number $i$ for all $i = 2, \\\\dots, n$. The parent of a vertex $u$ is a vertex that is the next vertex on a simple path from $u$ to the root.\\n\\nThe subtree of a vertex $u$ is the set of all vertices that pass through $u$ on a simple path to the root. For example, in the picture below, $7$ is in the subtree of $3$ because the simple path $7 \\\\to 5 \\\\to 3 \\\\to 1$ passes through $3$. Note that a vertex is included in its subtree, and the subtree of the root is the entire tree.\\n\\nThe picture shows the tree for $n=7$, $a=[1,1,2,3,3,5]$, and $s={WBBWWBW}$. The subtree at the vertex $3$ is balanced.\\n\\n\\n-----Input-----\\n\\nThe first line of input contains an integer $t$ ($1 \\\\le t \\\\le 10^4$) \u2014 the number of test cases.\\n\\nThe first line of each test case contains an integer $n$ ($2 \\\\le n \\\\le 4000$) \u2014 the number of vertices in the tree.\\n\\nThe second line of each test case contains $n-1$ integers $a_2, \\\\dots, a_n$ ($1 \\\\le a_i < i$) \u2014 the parents of the vertices $2, \\\\dots, n$.\\n\\nThe third line of each test case contains a string $s$ of length $n$ consisting of the characters ${B}$ and ${W}$ \u2014 the coloring of the tree.\\n\\nIt is guaranteed that the sum of the values $n$ over all test cases does not exceed $2 \\\\cdot 10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case, output a single integer \u2014 the number of balanced subtrees.\\n\\n\\n-----Examples-----\\n\\nInput\\n3\\n7\\n1 1 2 3 3 5\\nWBBWWBW\\n2\\n1\\nBW\\n8\\n1 2 3 4 5 6 7\\nBWBWBWBW\\nOutput\\n2\\n1\\n4\\n\\n\\n-----Note-----\\n\\nThe first test case is pictured in the statement. Only the subtrees at vertices $2$ and $3$ are balanced.\\n\\nIn the second test case, only the subtree at vertex $1$ is balanced.\\n\\nIn the third test case, only the subtrees at vertices $1$, $3$, $5$, and $7$ are balanced.\",\n  \"Ground Truth Solution\": \"import sys\\ninput = lambda : sys.stdin.readline().strip()\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tg = input()\\n\\tc = 0\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\tif g[i] == 'B':\\n\\t\\t\\td[i + 1] = -1\\n\\t\\telse:\\n\\t\\t\\td[i + 1] = 1\\n\\tfor i in range(n - 1):\\n\\t\\td[l[n - (i + 2)]] += d[n - i]\\n\\tprint(list(d.values()).count(0))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires counting balanced subtrees in a given rooted tree. A subtree is balanced if it has an equal number of black and white vertices. The input provides the number of nodes, the parent of each node, and the color of each node.\\n- Data Structures and Initialization:  A dictionary can store the 'balance' (white - black) of each subtree rooted at a given node. Initialize these balances based on the color of each individual node (1 for white, -1 for black).\\n- Bottom-Up Calculation: Process nodes from the bottom up (leaves to root) to correctly calculate the subtree balances. Iterate through the parent array in reverse order. For each node, update the balance of its parent by adding the balance of the current node.\\n- Counting Balanced Subtrees: After calculating the balance for all subtrees, count how many subtrees have a balance of 0. This count is the final answer.\",\n  \"LLM Questions\": [\n    \"How do you define a 'balanced subtree' in this context?\",\n    \"How should you represent the tree structure given the parent array?\",\n    \"What is the most efficient way to traverse the tree to calculate the subtree balances?\",\n    \"How do you determine the balance of a subtree rooted at a given node?\",\n    \"After calculating all subtree balances, how do you find the final answer?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A balanced subtree is one where the number of white vertices equals the number of black vertices.\",\n    \"The parent array specifies the parent of each node from 2 to n. This can be used to build a directed graph or processed directly in reverse order.\",\n    \"A bottom-up traversal is best, processing nodes from leaves towards the root, so the balances of child subtrees are calculated before updating the parent's balance.\",\n    \"The balance of a subtree is the sum of the 'colors' of all its nodes, where white is +1 and black is -1.\",\n    \"Count the number of subtrees whose balance is 0. This is the number of balanced subtrees in the entire tree.\"\n  ]\n}\n```"