"```json\n{\n  \"Coding Problem\": \"Lets wish Horsbug98 on his birthday and jump right into the question.\\nIn Chefland, $6$ new mobile brands have appeared each providing a range of smartphones. For simplicity let the brands be represented by numbers $1$ to $6$. All phones are sold at the superstore. \\nThere are total $N$ smartphones. Let $P_i$ & $B_i$ be the price and the brand of the $i^{th}$ smartphone. The superstore knows all the price and brand details beforehand. \\nEach customer has a preference for brands. The preference is a subset of the brands available (i.e $1$ to $6$). Also, the customer will buy the $K^{th}$ costliest phone among all the phones of his preference.\\nYou will be asked $Q$ queries. Each query consists of the preference of the customer and $K$.\\nFind the price the customer has to pay for his preference. If no such phone is available, print $-1$\\nNote that for each query the total number of smartphones is always $N$ since, after each purchase, the phones are replaced instantly.\\n\\n-----Input:-----\\n- First Line contains $N$ and $Q$\\n- Second-line contains $N$ integers $P_1,P_2,...,P_N$ (Price)\\n- Third line contains $N$ integers $B_1,B_2,...,B_N$ (Brand)\\n- Each of the next Q lines contains a query, the query is describes below\\n- First line of each quey contains $b$ and $K$ where $b$ is the size of the preference subset.\\n- Second line of each query contains $b$ integers, describing the preference subset.\\n\\n-----Output:-----\\nFor each query, print the price to be paid.\\n\\n-----Constraints-----\\n- $1 \\leq N, Q, P_i \\leq 10^5$\\n- $1 \\leq B_i, b \\leq 6$\\n- $1 \\leq K \\leq N$\\n\\n-----Sample Input:-----\\n4 2\\n4 5 6 7 \\n1 2 3 4 \\n3 3\\n1 2 3\\n3 4\\n4 5 6 \\n\\n-----Sample Output:-----\\n4\\n\\n-1\\n\\n-----Explaination-----\\nQuery 1: The preference subset is {1, 2, 3}, The prices of phones available of these brands are {4, 5, 6}. The third costliest phone is 4.\\nQuery 2: The preference subset is {4, 5, 6}, The prices of phones available of these brands are {7}.\\nFouth costliest phone is required, which is not available. Hence, answer is $-1$.\",\n  \"Ground Truth Solution\": \"import sys\\nfrom collections import defaultdict\\nfrom copy import copy\\nR = lambda t=int: t(eval(input()))\\nRL = lambda t=int: [t(x) for x in input().split()]\\nRLL = lambda n, t=int: [RL(t) for _ in range(n)]\\n\\ndef solve():\\n\\t(N, Q) = RL()\\n\\tP = RL()\\n\\tB = RL()\\n\\tphones = sorted(zip(P, B))\\n\\tS = defaultdict(lambda : [])\\n\\tfor (p, b) in phones:\\n\\t\\tfor i in range(2 ** 7):\\n\\t\\t\\tif i >> b & 1:\\n\\t\\t\\t\\tS[i] += [p]\\n\\tB = set(B)\\n\\tI = [0] * len(B)\\n\\tfor _ in range(Q):\\n\\t\\t(b, K) = RL()\\n\\t\\ts = RL()\\n\\t\\tx = 0\\n\\t\\tfor b in s:\\n\\t\\t\\tx += 1 << b\\n\\t\\tif len(S[x]) < K:\\n\\t\\t\\tprint(-1)\\n\\t\\telse:\\n\\t\\t\\tprint(S[x][-K])\\nT = 1\\nfor t in range(1, T + 1):\\n\\tsolve()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires processing multiple queries to find the K-th costliest smartphone given a customer's brand preference. The total number of smartphones and their prices/brands are provided. The preference is a subset of available brands, and if there are fewer than K phones of the preferred brands, the output should be -1.\\n- Data Structures and Initial Setup: Store the prices and brands efficiently. Use a data structure (like a dictionary or list) to group prices by brand preference to quickly retrieve them for each query.\\n- Query Processing: For each query, identify the smartphones matching the customer's brand preference. Sort the matching prices in descending order. Return the K-th element in the sorted list of prices if such an element exists. Otherwise return -1.\\n- Edge Cases and Constraints: Make sure to handle the edge cases such as no smartphones satisfying the given brands preference or K exceeds the number of available phones of the preferred brands. Account for the constraints N, Q, Pi, Bi, b, and K.\",\n  \"LLM Questions\": [\n    \"How should I store the smartphone price and brand information to efficiently retrieve and filter the phones by brand for each query?\",\n    \"How can I represent the brand preference subset, and efficiently check which smartphones satisfy the preference?\",\n    \"What is the best way to identify the K-th costliest phone from the filtered prices, and how should I handle the case when there are fewer than K phones?\",\n    \"How should I handle the constraints on N, Q, P_i, B_i, b, and K to ensure the solution's efficiency and correctness?\",\n    \"Given that brand is between 1 and 6. How can I represent the preference using bits?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A suitable approach is to create a list of tuples (price, brand). Then for each query filter this list based on whether the brand is in the customer's preference subset. Or, a dictionary where keys are brands and values are lists of prices.\",\n    \"The brand preference subset can be represented using a set of integers. Then, for each smartphone, you can check if its brand is present in the set.\",\n    \"Sort the filtered list of prices and then access the element at index K-1 (since indexing starts at 0) to retrieve the K-th costliest phone. If the length of the filtered list is less than K, return -1.\",\n    \"Ensure that the data types used for storing prices, brands, and K are integers. Since the constraints specify the maximum values, choose appropriate data structures and algorithms that maintain efficiency and avoid exceeding time limits. The values being bounded by 10^5 should be a hint to avoid N^2 solutions.\",\n    \"Since brands are between 1 and 6. I can use the bits to represent the brands. for example, if the brands are {1,2,3}. The binary representation can be 111000 which corresponds to 56.\"\n  ]\n}\n```"