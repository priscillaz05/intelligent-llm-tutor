"```json\n{\n  \"Coding Problem\": \"Initially, you have the array $a$ consisting of one element $1$ ($a = [1]$).\\n\\nIn one move, you can do one of the following things:\\n\\n  Increase some (single) element of $a$ by $1$ (choose some $i$ from $1$ to the current length of $a$ and increase $a_i$ by one);\\n  Append the copy of some (single) element of $a$ to the end of the array (choose some $i$ from $1$ to the current length of $a$ and append $a_i$ to the end of the array). \\n\\nFor example, consider the sequence of five moves:\\n\\n  You take the first element $a_1$, append its copy to the end of the array and get $a = [1, 1]$.  You take the first element $a_1$, increase it by $1$ and get $a = [2, 1]$.  You take the second element $a_2$, append its copy to the end of the array and get $a = [2, 1, 1]$.  You take the first element $a_1$, append its copy to the end of the array and get $a = [2, 1, 1, 2]$.  You take the fourth element $a_4$, increase it by $1$ and get $a = [2, 1, 1, 3]$. \\n\\nYour task is to find the minimum number of moves required to obtain the array with the sum at least $n$.\\n\\nYou have to answer $t$ independent test cases.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains one integer $t$ ($1 \\\\le t \\\\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\\n\\nThe only line of the test case contains one integer $n$ ($1 \\\\le n \\\\le 10^9$) \u2014 the lower bound on the sum of the array.\\n\\n\\n-----Output-----\\n\\nFor each test case, print the answer: the minimum number of moves required to obtain the array with the sum at least $n$.\\n\\n\\n-----Example-----\\nInput\\n5\\n1\\n5\\n42\\n1337\\n1000000000\\n\\nOutput\\n0\\n3\\n11\\n72\\n63244\",\n  \"Ground Truth Solution\": \"from math import ceil, sqrt\\n\\ndef fun(a):\\n\\tif a % 2 == 0:\\n\\t\\treturn (a // 2 + 1) * (a // 2 + 1)\\n\\telse:\\n\\t\\treturn (a + 1) // 2 * ((a + 3) // 2)\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\ti = int(sqrt(n)) * 2\\n\\tif fun(i - 2) >= n:\\n\\t\\tprint(i - 2)\\n\\telif fun(i - 1) >= n:\\n\\t\\tprint(i - 1)\\n\\telif fun(i) >= n:\\n\\t\\tprint(i)\\n\\telif fun(i + 1) >= n:\\n\\t\\tprint(i + 1)\\n\\telse:\\n\\t\\tprint(i + 2)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding the minimum number of moves to make the sum of an array at least n, starting with an array [1]. The allowed moves are increasing a single element by 1 or appending a copy of an element to the end of the array.\\n- Identifying Key Insights: Appending an element increases the length of the array while increasing an element increases the sum. A strategy is to increase elements to a certain value and then duplicate them to quickly reach the target sum n. The optimal approach will involve a trade-off between increasing values and appending them.\\n- Selecting an Appropriate Strategy: The optimal approach is to find an 'x' such that increasing the first element to x, which takes x-1 moves, and then duplicating it to a length 'l' such that x * l >= n, minimizes the total number of moves. This involves calculating 'l' and the number of append moves i.e., l - 1. Therefore, the total number of moves is (x - 1) + (l - 1) = x + l - 2. Find x that minimizes this sum.\\n- Handling edge cases: For n=1, the array is already [1], so the moves are 0.\\n- Implementing the solution: Iterate over possible values of x (the value to which the element is increased) and calculate the minimum array length required. Optimize for an appropriate value of x.\",\n  \"LLM Questions\": [\n    \"What are the two possible moves, and how do they affect the array's sum and length?\",\n    \"If we decide to increase elements to some value 'x', how many moves does it take, and what's the next optimal step?\",\n    \"How can we determine the number of append operations required after increasing the element to 'x'?\",\n    \"What is the relationship between 'x', the number of append operations, and the target sum 'n'?\",\n    \"How can we minimize the total number of moves required to reach the target sum 'n'?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The two moves are: (1) increasing an element by 1 and (2) appending a copy of an element. Increasing an element increases the sum but not the length. Appending increases the length but initially does not increase the sum beyond the value of existing elements.\",\n    \"Increasing an element to 'x' takes 'x - 1' moves, since the initial value is 1. The next optimal step is to append 'x' to increase the array length until the sum is at least n.\",\n    \"After increasing the first element to 'x', we need to find the minimum length 'l' such that x * l >= n. The number of append operations is l - 1.\",\n    \"The relationship is: x * l >= n, where 'x' is the increased value, 'l' is the array length, and 'n' is the target sum.\",\n    \"We can minimize the moves by finding the 'x' such that (x - 1) + (l - 1) is minimized, where x * l >= n. This involves exploring values of x and calculating corresponding l values, then comparing the total moves.\"\n  ]\n}\n```"