"```json\n{\n  \"Coding Problem\": \"Chef recently created a new Tiling Window Manager called ChefWM. He wants to find out the maximum number of columns of windows he can fit on the screen and he needs your help.\\n\\nConsider the screen to be an axis-aligned rectangle in the xy-plane, with its bottom-left corner at (0, 0) and top-right corner at (N, M) (that is, the screen has width N units and height M units). ChefWM works as follows:\\n\\nFirst, the screen is divided into one or more columns of equal integer width.\\nThen, each column is divided into two or more windows of equal integer height. Note that all windows within a column must have the same height, but windows in different columns may have different heights.\\nFinally, Chef would like the following condition to hold:\\n- No two windows from different columns can have their horizontal boundary share the same y-coordinate (apart from y = 0 and y = M). See the figures below for more details.\\n\\nIt is not allowed to leave any empty space on the screen, i.e, the division performed in the first two steps above must cover the entire screen.\\n\\nHere is an example of a tiling that satisfies all the conditions, for N = 8 and M = 6.\\n\\nBelow are two tilings that satisfy all conditions except the last. The one on the left has a horizontal edge at y = 2 in both columns, while the one on the right has a horizontal edge at y = 2 in column 1 and column 3.\\n\\nWhat is the maximum number of *columns* that ChefWM can fit on the screen while following the above conditions? Note that you do not need to maximize the number of windows, you only need to maximize the number of columns.\\n\\nIt may be possible that no columns can be created under these conditions, in that case, print 0.\\n\\n------ Input Format ------ \\n\\n- The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows.\\n- Each test case consists of a single line of input, containing two space-separated integers N, M \u2014 the coordinates of the top-right corner of the screen.\\n\\n------ Output Format ------ \\n\\nFor each test case, output a single line containing one integer \u2014 the maximum number of columns ChefWM can create for the screen.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 500$\\n$1 \u2264 N \u2264 10^{9}$\\n$1 \u2264 M \u2264 10^{9}$\\n\\n----- Sample Input 1 ------ \\n5\\n8 210\\n1 100\\n100 5\\n10 1\\n9 2310\\n\\n----- Sample Output 1 ------ \\n4\\n1\\n1\\n0\\n3\\n\\n----- explanation 1 ------ \\nTest Case 1: It is possible to make $4$ columns as follows:\\n- The first column has $7$ windows of height $30$ each\\n- The second column has $2$ windows of height $105$ each\\n- The third column has $5$ windows of height $42$ each\\n- The last column has $3$ windows of height $70$ each\\n\\nIt can be seen in the diagram below that the edges from any two windows from different columns do not have the same $y$-coordinate except for $y=0$ and $y=m$.   \\n\\nTest Case 2: There can only be one column no matter how many windows you keep (as long as there are at least $2$ windows).\\n\\nTest Case 3: You can have a single column with $5$ windows. It can be shown that this is the maximum number of columns that can possibly satisfy the given restrictions.\",\n  \"Ground Truth Solution\": \"def unique_prime_factors(n):\\n\\tcount = 0\\n\\ti = 2\\n\\twhile i ** 2 <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\tcount += 1\\n\\t\\t\\twhile n % i == 0:\\n\\t\\t\\t\\tn /= i\\n\\ti += 1\\n\\tif n != 1:\\n\\t\\tcount += 1\\n\\treturn count\\nt = int(input())\\nwhile t:\\n\\t(n, m) = map(int, input().split())\\n\\tprm_fac = unique_prime_factors(m)\\n\\tans = 0\\n\\ti = prm_fac\\n\\twhile i > 0:\\n\\t\\tif n % i == 0:\\n\\t\\t\\tans = i\\n\\t\\t\\tbreak\\n\\t\\ti -= 1\\n\\tprint(ans)\\n\\tt -= 1\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem is about maximizing the number of columns that can fit on a screen given certain constraints on how windows are arranged within those columns. The key constraint is that horizontal window boundaries (except for the top and bottom of the screen) cannot share the same y-coordinate across different columns.\\n- Identifying the Key Insight: The number of columns must be a divisor of N (the screen width). Furthermore, the number of columns is limited by the number of unique prime factors of M (the screen height). This is because each column can have different window heights, but no two columns can share a y-coordinate for window boundaries other than 0 and M. This implies that each column uses a different set of divisors of M.\\n- Algorithm Selection: The solution involves finding the number of unique prime factors of M. Then, iterating from this number down to 1, we check if each number is a divisor of N. The first such divisor we find is the maximum possible number of columns.\\n- Handling Edge Cases: If M is 1, no columns can be created. If no divisor of N from 1 to the number of unique prime factors of M is found, then 0 columns can be created.\\n\",\n  \"LLM Questions\": [\n    \"What are the key constraints in arranging the windows, and how do they affect the number of columns?\",\n    \"Why is the number of unique prime factors of M important for determining the number of possible columns?\",\n    \"How do you determine if a given number of columns is valid, given the dimensions of the screen and the window arrangement constraints?\",\n    \"What edge cases should be considered, and how would they affect the solution?\",\n    \"How can you optimize the search for the maximum number of columns, given the constraints on N and M?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The key constraint is that no two windows from different columns can have the same y-coordinate for their horizontal boundaries (apart from 0 and M). This constraint limits the number of columns because each column must have a unique set of window heights.\",\n    \"The number of unique prime factors of M represents the maximum number of distinct window heights that can be used across all columns without violating the constraint. Each window height corresponds to a divisor of M.\",\n    \"To determine if a given number of columns is valid, check if it's a divisor of N (since columns must have equal width). If it is, then ensure that the number of columns is less than or equal to the number of unique prime factors of M. If both conditions are met, it's a valid configuration.\",\n    \"Edge cases include when M is 1, in which case the answer is 0. Also, if the number of unique prime factors of M is 0 and N is not 1, then the answer is 0. If N is 1 then the answer is 1.\",\n    \"The search can be optimized by first calculating the number of unique prime factors of M. Then iterate from that number down to 1. The first divisor of N you encounter in that range will be the answer. Break out of the loop as soon as such a divisor is encountered, or when the loop reaches 0.\"\n  ]\n}\n```"