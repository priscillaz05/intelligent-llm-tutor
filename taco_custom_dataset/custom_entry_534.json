"```json\n{\n  \"Coding Problem\": \"We have a connected undirected graph with N vertices and M edges. Edge i in this graph (1 \\\\leq i \\\\leq M) connects Vertex U_i and Vertex V_i bidirectionally. We are additionally given N integers D_1, D_2, ..., D_N.\\n\\nDetermine whether the conditions below can be satisfied by assigning a color - white or black - to each vertex and an integer weight between 1 and 10^9 (inclusive) to each edge in this graph. If the answer is yes, find one such assignment of colors and integers, too.\\n\\n* There is at least one vertex assigned white and at least one vertex assigned black.\\n* For each vertex v (1 \\\\leq v \\\\leq N), the following holds.\\n* The minimum cost to travel from Vertex v to a vertex whose color assigned is different from that of Vertex v by traversing the edges is equal to D_v.\\n\\n\\n\\nHere, the cost of traversing the edges is the sum of the weights of the edges traversed.\\n\\nConstraints\\n\\n* 2 \\\\leq N \\\\leq 100,000\\n* 1 \\\\leq M \\\\leq 200,000\\n* 1 \\\\leq D_i \\\\leq 10^9\\n* 1 \\\\leq U_i, V_i \\\\leq N\\n* The given graph is connected and has no self-loops or multiple edges.\\n* All values in input are integers.\\n\\nInput\\n\\nInput is given from Standard Input in the following format:\\n\\n\\nN M\\nD_1 D_2 ... D_N\\nU_1 V_1\\nU_2 V_2\\n\\\\vdots\\nU_M V_M\\n\\n\\nOutput\\n\\nIf there is no assignment satisfying the conditions, print a single line containing `-1`.\\n\\nIf such an assignment exists, print one such assignment in the following format:\\n\\n\\nS\\nC_1\\nC_2\\n\\\\vdots\\nC_M\\n\\n\\nHere,\\n\\n* the first line should contain the string S of length N. Its i-th character (1 \\\\leq i \\\\leq N) should be `W` if Vertex i is assigned white and `B` if it is assigned black.\\n* The (i + 1)-th line (1 \\\\leq i \\\\leq M) should contain the integer weight C_i assigned to Edge i.\\n\\nExamples\\n\\nInput\\n\\n5 5\\n3 4 3 5 7\\n1 2\\n1 3\\n3 2\\n4 2\\n4 5\\n\\n\\nOutput\\n\\nBWWBB\\n4\\n3\\n1\\n5\\n2\\n\\n\\nInput\\n\\n5 7\\n1 2 3 4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 5\\n3 5\\n4 5\\n\\n\\nOutput\\n\\n-1\\n\\n\\nInput\\n\\n4 6\\n1 1 1 1\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\\n\\nOutput\\n\\nBBBW\\n1\\n1\\n1\\n2\\n1\\n1\",\n  \"Ground Truth Solution\": \"import sys\\n(N, M) = map(int, input().split())\\nD = list(map(int, input().split()))\\ndic2 = [[] for i in range(N)]\\nfor i in range(M):\\n\\t(U, V) = map(int, input().split())\\n\\tU -= 1\\n\\tV -= 1\\n\\tif len(dic2[U]) == 0 or dic2[U][0][0] > D[V]:\\n\\t\\tdic2[U] = []\\n\\t\\tdic2[U].append([D[V], V, i])\\n\\tif len(dic2[V]) == 0 or dic2[V][0][0] > D[U]:\\n\\t\\tdic2[V] = []\\n\\t\\tdic2[V].append([D[U], U, i])\\ndic = [[] for i in range(N)]\\nfor i in range(N):\\n\\tfor j in dic2[i]:\\n\\t\\tdic[i].append([j[1], j[2]])\\nend = [False] * N\\ncolor = [0] * N\\nq = []\\nans = [10 ** 9] * M\\nfor i in range(N):\\n\\tq.append([D[i], i])\\nq.sort()\\nfor i in range(N):\\n\\tif end[q[i][1]]:\\n\\t\\tcontinue\\n\\tflag = False\\n\\tfor vi in dic[q[i][1]]:\\n\\t\\tnexv = vi[0]\\n\\t\\tmind = vi[1]\\n\\t\\tnowd = q[i][0]\\n\\t\\tnowp = q[i][1]\\n\\t\\tif end[nexv]:\\n\\t\\t\\tflag = True\\n\\t\\t\\tcolor[nowp] = color[nexv] ^ 1\\n\\t\\t\\tend[nowp] = True\\n\\t\\t\\tans[mind] = nowd\\n\\t\\t\\tbreak\\n\\t\\telif D[nexv] == nowd:\\n\\t\\t\\tflag = True\\n\\t\\t\\tcolor[nowp] = color[nexv] ^ 1\\n\\t\\t\\tend[nowp] = True\\n\\t\\t\\tend[nexv] = True\\n\\t\\t\\tans[mind] = nowd\\n\\t\\t\\tbreak\\n\\t\\tbreak\\n\\tif not flag:\\n\\t\\tprint(-1)\\n\\t\\tsys.exit()\\nS = []\\nfor i in color:\\n\\tif i == 0:\\n\\t\\tS.append('B')\\n\\telse:\\n\\t\\tS.append('W')\\nprint(''.join(S))\\nprint(' '.join(map(str, ans)))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem describes a connected, undirected graph where each vertex must be assigned a color (black or white) and each edge a weight. The challenge is to find a coloring and weighting such that the minimum cost to reach a vertex of a different color from any given vertex 'v' is equal to a given value D_v for that vertex.\\n- Identifying Constraints and Edge Cases: Note the constraints on vertex and edge counts, the range of D_i values, and the need to handle disconnected graphs, though the problem states the graph *is* connected. If a valid assignment isn't possible, output -1.\\n- Choosing an Algorithmic Approach: A crucial element is recognizing that the given D values influence both the coloring and edge weights. One approach would be to start by considering the minimum D value.  It can be proven that if there's a solution, there must exist an edge between nodes i and j such that D[i] == D[j] and assigning different colors can work. Use this to decide the coloring and then assign edge weight according to min(D[i], D[j]) between nodes i and j, where i and j are of different colors. Build data structure for this implementation such as adjacency lists and potentially a priority queue for calculating shortest distances if the solution is not straight forward.\\n- Implementation Details: The implementation involves creating an adjacency list representation of the graph. The initial pass of the algorithm colors nodes based on comparing the D values of connected nodes.  Then the edge weights are assigned based on the node colors. Finally, validation step involves confirming that the edge weights meet the minimum distance criteria, where the cost to travel from one node to another with different colors should equal the given D values.\\n\",\n  \"LLM Questions\": [\n    \"How can we start by determining the colors, considering the constraints that require both black and white vertices?\",\n    \"How can we use D values to determine the edge weights such that the condition of minimum cost to travel to the different color vertex is satisfied?\",\n    \"How can the constraints and edge cases, such as disconnected graphs or unsolvable assignments, influence the choice of the algorithm and its implementation?\",\n    \"What data structures would be most suitable for representing a graph with a high number of vertices and edges, considering memory usage and access times?\",\n    \"How can we confirm if our generated weights and colors satisfy the given distance conditions, and how do we handle error cases if they do not?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Start by looking for an edge such that D[i] == D[j] then assign color to each connected nodes and use graph traversal to assign colors to all nodes in the graph.\",\n    \"Edge weights should be assigned based on min(D[i], D[j]) between nodes i and j, where i and j are of different colors to ensure minimum cost.\",\n    \"If D values are not solvable according to edge constraints, the output must be -1. Disconnected graphs will not work with D values assigned to vertices because traversal will not be possible.\",\n    \"For a large graph, adjacency lists would be efficient for representing the graph, reducing redundant info in a matrix form. If graph traversal involves finding minimum costs, priority queues may be needed for sorting.\",\n    \"After assigning the edge weights and colors, a validation is necessary to ensure conditions are meet such as both colors are used and minimum cost to different color nodes match D values, otherwise, the solution returns -1\"\n  ]\n}\n```"