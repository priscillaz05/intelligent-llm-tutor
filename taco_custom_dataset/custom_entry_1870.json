"```json\n{\n  \"Coding Problem\": \"Maxim always goes to the supermarket on Sundays. Today the supermarket has a special offer of discount systems.\\n\\nThere are m types of discounts. We assume that the discounts are indexed from 1 to m. To use the discount number i, the customer takes a special basket, where he puts exactly q_{i} items he buys. Under the terms of the discount system, in addition to the items in the cart the customer can receive at most two items from the supermarket for free. The number of the \\\"free items\\\" (0, 1 or 2) to give is selected by the customer. The only condition imposed on the selected \\\"free items\\\" is as follows: each of them mustn't be more expensive than the cheapest item out of the q_{i} items in the cart.\\n\\nMaxim now needs to buy n items in the shop. Count the minimum sum of money that Maxim needs to buy them, if he use the discount system optimally well.\\n\\nPlease assume that the supermarket has enough carts for any actions. Maxim can use the same discount multiple times. Of course, Maxim can buy items without any discounts.\\n\\n\\n-----Input-----\\n\\nThe first line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of discount types. The second line contains m integers: q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 10^5). \\n\\nThe third line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of items Maxim needs. The fourth line contains n integers: a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^4) \u2014 the items' prices.\\n\\nThe numbers in the lines are separated by single spaces.\\n\\n\\n-----Output-----\\n\\nIn a single line print a single integer \u2014 the answer to the problem.\\n\\n\\n-----Examples-----\\nInput\\n1\\n2\\n4\\n50 50 100 100\\n\\nOutput\\n200\\n\\nInput\\n2\\n2 3\\n5\\n50 50 50 50 50\\n\\nOutput\\n150\\n\\nInput\\n1\\n1\\n7\\n1 1 1 1 1 1 1\\n\\nOutput\\n3\\n\\n\\n-----Note-----\\n\\nIn the first sample Maxim needs to buy two items that cost 100 and get a discount for two free items that cost 50. In that case, Maxim is going to pay 200.\\n\\nIn the second sample the best strategy for Maxim is to buy 3 items and get 2 items for free using the discount. In that case, Maxim is going to pay 150.\",\n  \"Ground Truth Solution\": \"def main():\\n\\tinput()\\n\\tq = min(map(int, input().split()))\\n\\tinput()\\n\\taa = sorted(map(int, input().split()), reverse=True)\\n\\tprint(sum(aa) - sum(aa[q::q + 2]) - sum(aa[q + 1::q + 2]))\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understand the problem: Maximize the benefit from the discount by choosing the best value for `q` and applying discount to the most expensive items.\\n- Determine the smallest discount size `q` from input.\\n- Sort the prices in descending order.\\n- Apply the discount repeatedly to the sorted list of prices, i.e., take the top q most expensive items and get the next two items for free.  Calculate the sum by subtracting the prices of these free items from the total sum of all item prices. Optimize based on chosen `q`.\\n- Return the calculated minimum cost.\",\n  \"LLM Questions\": [\n    \"What does 'q' represent in the context of the problem and where does it come from in the input?\",\n    \"How does sorting the items by price help minimize the total cost?\",\n    \"How do you determine the indices of the items to be considered \\\"free\\\" after applying the discount?\",\n    \"How does the number of discount types `m` affect the problem solution?\",\n    \"What if n is less than the minimum discount size q, what would you do?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"`q` represents the number of items that must be bought to utilize a discount, and it comes from the second line of the input which contains the possible discount types (q_1, q_2, ..., q_m). The minimum value among these will be the best discount to use.\",\n    \"Sorting the items in descending order allows us to always apply the discount to the most expensive items, maximizing the savings by getting cheaper items for free.\",\n    \"After buying `q` items, you get the next two items for free. So, if the sorted list of prices is `aa`, we want to exclude `aa[q]`, `aa[q+1]`, `aa[2q+2]`, `aa[2q+3]`, etc. so we use extended slice notation to do so efficiently. `aa[q::q+2]` is one slice and `aa[q+1::q+2]` the other.\",\n    \"The number of discount types, `m`, is important because it determines which discount size, `q`, to use. We take the minimum discount type size because this guarantees the highest ratio of free items compared to purchased items.\",\n    \"If `n` is less than `q`, then the discount cannot be applied, and you should simply sum all the item prices without applying any discounts.\"\n  ]\n}\n```"