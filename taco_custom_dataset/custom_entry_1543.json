"```json\n{\n  \"Coding Problem\": \"Little Ashish got a lot of strings as his birthday gift. He does not mind getting so many strings for free; in fact, he loves them. But, on noticing all the strings he received as a gift, Little Ashish, who's also a snob and a bit OCD kind of a guy, realizes that he does not like the way in which the strings are arranged.\\n\\nHe likes his strings sorted, in a different kind of a way. He wants his strings to be sorted based on the count of characters present in the string. For instance, if the string is: \\\"aaabbc\\\", then the desired string would be: cbbaaa. In case where the count of two characters is same, then the lexicographically smaller one will be printed first. For instance: \\\"aabbcc\\\" then, the output will be: \\\"aabbcc\\\".\\n\\nInput:\\nFirst line of input contains number of test cases T.   Each test case contains a single string S.  \\n\\nOutput:\\nFor each test cases print the sorted string.  \\n\\nConstraints:\\n1 \u2264 T \u2264 100\\n1 \u2264 |S| \u2264 100  \\n\\nNote:\\nString contains only lowercase characters ['a' to 'z']. \\n\\nSAMPLE INPUT\\n3\\naabbccdd\\naabcc\\nhackerearthSAMPLE OUTPUT\\naabbccdd\\nbaacc\\ncktaaeehhrr\",\n  \"Ground Truth Solution\": \"n=eval(input())\\nd=dict()\\ndef fun(v):\\n\\ts = \\\"\\\"\\n\\tfor i in range(len(v)):\\n\\t\\tfor j in range(v[i][0]):\\n\\t\\t\\ts = s + str(v[i][1])\\n\\tprint(s)\\n\\t\\t\\t\\nfor j in range(n):\\n\\tm=input().strip()\\n\\tfor i in m:\\n\\t\\td[i]=d.get(i,0)+1\\n\\t\\tv=sorted([(value,key) for (key,value) in list(d.items())])\\n\\t\\n\\tfun(v)\\n\\td = dict()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to sort a given string based on the frequency of each character. If characters have the same frequency, sort them lexicographically. The input includes a number of test cases, each with a string consisting of lowercase letters.\\n- Devising a Plan: The approach involves counting the frequency of each character, storing these counts in a dictionary, sorting the characters based on their frequency (and lexicographically if frequencies are the same), and then constructing the final sorted string based on the sorted frequencies and characters.\\n- Handling Edge Cases: Consider edge cases such as empty strings or strings with only one type of character. However, the problem constraints indicate the string will always contain lowercase characters and will not be empty.\\n- Optimizing for Time and Space: Using a dictionary to store character frequencies provides an efficient way to count character occurrences. The time complexity of sorting the characters will depend on the sorting algorithm used by the language's `sorted` function (typically O(n log n), where n is the number of unique characters). The construction of the final string will be linear in terms of the length of the original string.\",\n  \"LLM Questions\": [\n    \"What is the core idea behind sorting the string according to the specified rules?\",\n    \"How can you efficiently count the frequency of each character in the string?\",\n    \"How do you handle the tie-breaking condition when two or more characters have the same frequency?\",\n    \"What data structure is most suitable for storing character frequencies, and why?\",\n    \"Once you have the frequencies, how can you sort the characters based on frequency and lexicographical order?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The core idea is to count the occurrences of each character, then sort the characters based on these counts. When counts are equal, characters should be sorted lexicographically.\",\n    \"You can use a dictionary (or hash map) where the keys are the characters and the values are their frequencies. Iterate through the string, incrementing the count for each character.\",\n    \"When characters have the same frequency, compare them lexicographically using their ASCII values to determine their order.\",\n    \"A dictionary is well-suited because it allows you to efficiently store and retrieve the frequency of each character using the character as the key. It offers quick lookups (O(1) on average).\",\n    \"Create a list of tuples (frequency, character) from the dictionary. Then, use a sorting algorithm that sorts based on the first element (frequency) and, in case of ties, sorts based on the second element (character) in lexicographical order. Python's `sorted` function automatically handles lexicographical sorting for strings.\"\n  ]\n}\n```"