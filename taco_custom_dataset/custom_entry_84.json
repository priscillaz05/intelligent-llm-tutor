"```json\n{\n  \"Coding Problem\": \"Given a string, find the longest substring which is palindrome in Linear time O(N).\\nInput:\\nThe first line of input contains an integer T denoting the no of test cases . Then T test cases follow. The only line of each test case contains a string.\\nOutput:\\nFor each test case print the Longest Palindromic Substring. If there are multiple such substrings of same length, print the one which appears first in the input string.\\nConstraints:\\n1 <= T <= 100\\n1 <= N <= 50\\nExample:\\nInput:\\n2\\nbabcbabcbaccba\\nforgeeksskeegfor\\nOutput:\\nabcbabcba\\ngeeksskeeg\\n \\n \\n \\nNote:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.\",\n  \"Ground Truth Solution\": \"def manacher_odd(s):\\n\\tn = len(s)\\n\\ts = '$' + s + '^'\\n\\tp = [0] * (n + 2)\\n\\t(l, r) = (1, 1)\\n\\tmax_len = 0\\n\\tpos = -1\\n\\tfor i in range(1, n + 1):\\n\\t\\tp[i] = max(0, min(r - i, p[l + r - i]))\\n\\t\\twhile s[i - p[i]] == s[i + p[i]]:\\n\\t\\t\\tp[i] += 1\\n\\t\\tif p[i] > max_len:\\n\\t\\t\\tmax_len = p[i]\\n\\t\\t\\tpos = i\\n\\t\\tif i + p[i] > r:\\n\\t\\t\\tr = i + p[i]\\n\\t\\t\\tl = i - p[i]\\n\\treturn s[pos - p[pos] + 2:pos + p[pos] - 1]\\n\\ndef LongestPalindromeSubString(text):\\n\\ts = '#' + '#'.join(list((c for c in text))) + '#'\\n\\tans = manacher_odd(s)\\n\\treturn ''.join(ans.split(sep='#'))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem is to find the longest palindromic substring within a given string, and the solution must operate in linear time, O(N).\\n- Algorithmic Selection: Manacher's Algorithm is suitable for finding the longest palindromic substring in linear time.\\n- Preprocessing the String: The string is preprocessed by inserting a special character (e.g., '#') between each character and at the beginning and end. This ensures that palindromes of even length are also handled correctly. Also, add '$' at the begining and '^' at the end of the string to deal with boundaries.\\n- Implementing Manacher's Algorithm: Create an array `p` to store the lengths of palindromes centered at each position. Use two variables `l` and `r` to maintain the center and right boundary of the rightmost palindrome found so far.\\n- Expanding Palindromes: Iterate through the preprocessed string. For each position `i`, utilize previously computed palindrome lengths (stored in `p`) and expand the palindrome as much as possible while ensuring it remains a palindrome.\\n- Tracking the Longest Palindrome: Keep track of the maximum palindrome length and its center position to extract the longest palindromic substring at the end.\",\n  \"LLM Questions\": [\n    \"What is a palindrome, and why is it important to identify one in the problem?\",\n    \"Why is Manacher's Algorithm suitable for finding the longest palindromic substring in linear time O(N)?\",\n    \"How does the preprocessing of the string using special characters like '#' help in simplifying the algorithm and handling both odd and even length palindromes?\",\n    \"Can you explain the purpose of the `p` array and how the algorithm utilizes previously computed palindrome lengths to optimize the process?\",\n    \"How are the variables `l` and `r` used in Manacher's Algorithm, and what role do they play in maintaining the boundaries of the rightmost palindrome?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A palindrome is a string that reads the same forwards and backward. Identifying one is the core objective of the problem, as we need to find the longest such substring within the given string.\",\n    \"Manacher's Algorithm provides a way to find the longest palindromic substring in linear time by efficiently reusing previously computed palindrome lengths to avoid redundant checks.\",\n    \"Preprocessing the string with special characters simplifies the algorithm by treating even and odd length palindromes uniformly and avoiding boundary checks.\",\n    \"The `p` array stores the lengths of palindromes centered at each position in the preprocessed string. The algorithm utilizes this array to infer palindrome lengths and avoid redundant computations by leveraging symmetry.\",\n    \"`l` and `r` represent the center and right boundary of the rightmost palindrome found so far. They are used to optimize the algorithm by reusing palindrome lengths within the rightmost boundary.\"\n  ]\n}\n```"