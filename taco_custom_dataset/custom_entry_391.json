"```json\n{\n  \"Coding Problem\": \"One way to create a task is to learn from math. You can generate some random math statement or modify some theorems to get something new and build a new task from that.\\n\\nFor example, there is a statement called the \\\"Goldbach's conjecture\\\". It says: \\\"each even number no less than four can be expressed as the sum of two primes\\\". Let's modify it. How about a statement like that: \\\"each integer no less than 12 can be expressed as the sum of two composite numbers.\\\" Not like the Goldbach's conjecture, I can prove this theorem.\\n\\nYou are given an integer n no less than 12, express it as a sum of two composite numbers.\\n\\nInput\\n\\nThe only line contains an integer n (12 \u2264 n \u2264 106).\\n\\nOutput\\n\\nOutput two composite integers x and y (1 < x, y < n) such that x + y = n. If there are multiple solutions, you can output any of them.\\n\\nExamples\\n\\nInput\\n\\n12\\n\\n\\nOutput\\n\\n4 8\\n\\n\\nInput\\n\\n15\\n\\n\\nOutput\\n\\n6 9\\n\\n\\nInput\\n\\n23\\n\\n\\nOutput\\n\\n8 15\\n\\n\\nInput\\n\\n1000000\\n\\n\\nOutput\\n\\n500000 500000\\n\\nNote\\n\\nIn the first example, 12 = 4 + 8 and both 4, 8 are composite numbers. You can output \\\"6 6\\\" or \\\"8 4\\\" as well.\\n\\nIn the second example, 15 = 6 + 9. Note that you can't output \\\"1 14\\\" because 1 is not a composite number.\",\n  \"Ground Truth Solution\": \"def isprime(k):\\n\\tm = 0\\n\\tfor j in range(2, k):\\n\\t\\tif k % j == 0:\\n\\t\\t\\tm = m + 1\\n\\tif m == 0:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn 1\\nn = int(input())\\nfor i in range(4, n - 3):\\n\\tif isprime(i) == 1 and isprime(n - i) == 1:\\n\\t\\tprint(i, n - i)\\n\\t\\texit()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to find two composite numbers x and y such that their sum equals the given integer n. A composite number is a positive integer that has at least one divisor other than 1 and itself.\\n- Strategy: Since we need to find any valid pair, we can iterate through possible values for x and check if both x and n-x are composite numbers. Starting with a small composite number like 4 seems reasonable and checking the complement.\\n- Optimization: We can optimize by starting with x=4 and incrementing it. If we find a solution, we can stop. We should not check if x is a prime, but composite. A simple check if a number is composite is if there exists a divisor other than 1 and the number itself.\",\n  \"LLM Questions\": [\n    \"What is a composite number, and how does it differ from a prime number?\",\n    \"What are some easy-to-find composite numbers that could serve as a starting point for searching for x and y?\",\n    \"How can you efficiently check if a number is composite within the given constraints?\",\n    \"Given that n is between 12 and 10^6, are there particular composite numbers that, when paired with their complements to n, might quickly lead to a solution?\",\n    \"If there are multiple possible solutions, how would you ensure your algorithm quickly identifies and outputs just one such solution without excessive computation?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A composite number is a positive integer that has at least one divisor other than 1 and itself, whereas a prime number has exactly two distinct positive divisors: 1 and itself.\",\n    \"4, 6, 8, and 9 are examples of small composite numbers that are easy to find. We could start checking from 4 onwards.\",\n    \"To check if a number k is composite, iterate from 2 up to k-1 and see if any number divides k. If we find a divisor, k is composite; otherwise, it's prime. Since we are looking for a composite number a better implementation would be checking up to the square root of k.\",\n    \"Since n >= 12, we can start with smaller composite numbers like 4, 6, 8, and 9, and check their complements relative to n. For larger values of n, differences between composite number candidates can be larger.\",\n    \"Since the problem only requires one solution, we can iterate through potential values for x, check if both x and n - x are composite, and output the pair as soon as we find the first such pair. Then, we can exit the program immediately.\"\n  ]\n}\n```"