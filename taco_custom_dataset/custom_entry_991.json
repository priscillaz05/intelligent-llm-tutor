"```json\n{\n  \"Coding Problem\": \"The Rumbling is a hypothetical cataclysmic event involving Karl Fritz's Wall Titans marching across the Earth, destroying all life upon it. Eren Yeager who possesses the Founding Titan has decided to begin The Rumbling to show the true power of the Eldians to the rest of the world.\\n\\nThere are N Titans standing in a line from west to east. Each of the Titans is facing one of the four directions i.e., North, South, East, or West, represented by uppercase English letters 'N', 'S', 'E', and 'W' respectively.\\n\\nA Titan can rotate on the spot where it is standing. It requires X units of energy to rotate 90 degrees clockwise, and  Y units of energy to rotate 90 degrees anti-clockwise.\\n\\nFor the activation of The Rumbling, all the Titans must face Eren Yeager.\\n\\nSo, Eren wants to position himself on the West-East line (on which other Titans are standing). He can either stand to the left of all Titans, in between two consecutive Titans, or to the right of all Titans. He wants to choose a position that minimizes the units of energy required by all the Titans to rotate and face him. Find the minimum units of energy required by all the Titans for the Activation of The Rumbling in the optimal configuration.\\n\\n------ Input Format ------ \\n\\n- The first line consists of T, the number of test cases. Description of the test cases follow.\\n- The first line of each test case will contain N, the number of Titans.\\n- The second line of each test case will contain a string S of length N, where the i^{th} character represents the directions faced by the i^{th} Titan.\\n- The third line of each test case will contain two space-separated integers, the values of X and Y.\\n\\n------ Output Format ------ \\n\\nFor each test case, output a single line containing one integer, the answer to that test case.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 1000$\\n$1 \u2264 N \u2264 2 * 10^{5}$\\n$1 \u2264 X, Y \u2264 10^{9}$\\n$S$ contains characters from {'N', 'S', 'E', 'W'} only.\\n- Sum of $N$ over all test cases doesn't exceed $10^{6}$\\n\\n----- Sample Input 1 ------ \\n1\\n5\\nSENWS\\n2 1\\n----- Sample Output 1 ------ \\n4\\n----- explanation 1 ------ \\n- One valid configuration would be as follows: $EE \\\\cdot WWW$, where $\\\\cdot$ represents the position of Eren Yeager. \\n- The first and the second Titans will face Eren at East from the left while the third, fourth, and the fifth Titans will face Eren at West from the right. \\n- It takes $1$ unit of energy for the first Titan to move towards East by rotating $90$ degrees anticlockwise. \\n- The second Titan is already facing East, so it costs him $0$ units of energy to stay that way.\\n- It takes $1$ unit of energy for the third Titan to move towards West by rotating $90$ degrees anticlockwise.\\n- The fourth Titan is already facing West, so it costs him $0$ units of energy to stay that way.\\n- It takes $2$ units of energy for the fifth Titan to move towards West by rotating $90$ degrees clockwise.\\n- So, it takes the Titans $4$ units of energy overall to face Eren Yeager, and activate The Rumbling!\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\tN = int(input())\\n\\tS = input()\\n\\t(R, L) = list(map(int, input().split()))\\n\\tenergy = []\\n\\teast_vals = {'N': min(R, 3 * L), 'S': min(L, 3 * R), 'E': 0, 'W': min(2 * L, 2 * R)}\\n\\twest_vals = {'N': min(L, 3 * R), 'S': min(R, 3 * L), 'W': 0, 'E': min(2 * L, 2 * R)}\\n\\tsm1 = 0\\n\\tsm2 = 0\\n\\tfor i in range(N):\\n\\t\\tsm1 += east_vals[S[i]]\\n\\tans = sm1\\n\\tfor i in range(N - 1, -1, -1):\\n\\t\\tans = min(ans, sm1 + sm2)\\n\\t\\tsm1 -= east_vals[S[i]]\\n\\t\\tsm2 += west_vals[S[i]]\\n\\tans = min(ans, sm1 + sm2)\\n\\tprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: Recognize that Titans must face Eren, and Eren can be positioned to the left, right or in between the Titans. Minimize the total energy required.\\n- Identifying Potential Pitfalls: Consider the case where X and Y have extremely large values, or when N is very large and calculating the optimal solution through brute force would result in TLE.\\n- Selecting an Algorithmic Strategy: Iterate through each possible position of Eren, and calculate the total energy needed to rotate all titans. Choose the position with the minimum total energy.\\n- Implementing an Efficient Energy Calculation: For each Titan, determine the minimum energy required for it to face Eren, considering both clockwise and anti-clockwise rotations. Precompute cost for facing East and West.\",\n  \"LLM Questions\": [\n    \"What is the meaning of minimizing the total energy required?\",\n    \"If the positions of the Titans are given, how can you calculate the minimum energy for each Titan to face Eren?\",\n    \"How can pre-computation of the costs of facing east and west optimize the solution?\",\n    \"What is the time complexity of your solution, and how does it scale with large input sizes?\",\n    \"Given the constraints for X and Y, what is the maximum possible energy that one titan can consume and how would that impact overall calculations?\",\n    \"Can dynamic programming provide any advantage in solving this problem, considering all possible positions of Eren Yeager?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Minimizing the total energy means finding the position for Eren that requires the least amount of total rotation (clockwise or counterclockwise) from all titans to face him.\",\n    \"For each titan, calculate the energy required to face Eren if he's to the left (facing west) and to the right (facing east). Take the minimum of the two.\",\n    \"Pre-computing helps avoid redundant calculations when iterating through all possible positions for Eren.\",\n    \"The time complexity is O(N) due to the single pass through all possible positions. The pre-computation of facing east and west also has O(N). This makes it scalable.\",\n    \"The maximum energy is the smaller of 3*X or 3*Y. This information is important in considering potential integer overflows and managing extreme cases.\",\n    \"Dynamic programming would likely not provide an advantage here because the number of states doesn't significantly overlap and the problem can be solved efficiently with linear iteration.\"\n  ]\n}\n```"