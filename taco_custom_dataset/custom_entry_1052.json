"```json\n{\n  \"Coding Problem\": \"You are given a sequence $A_{1}, A_{2}, \\\\ldots, A_{N}$ and an integer $K$. Determine if it is possible to reorder the elements of the sequence $A$ into a sequence $B_{1}, B_{2}, \\\\ldots, B_{N}$ and choose a real number $m$ in such a way that for each contiguous subsequence of $B$ with length $K$, the arithmetic average of the elements of this subsequence is $m$. If it is possible, find one such reordered subsequence $B$.\\n\\n------  Input ------\\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\\nThe first line of each test case contains two space-separated integers $N$ and $K$.\\nThe second line contains $N$ space-separated integers $A_{1}, A_{2}, \\\\ldots, A_{N}$.\\n\\n------  Output ------\\nFor each test case, print a single line containing the string \\\"YES\\\" if it is possible to reorder the elements of $A$ in the required way, or \\\"NO\\\" otherwise.\\n\\nIf it is possible, print a second line containing $N$ space-separated integers $B_{1}, B_{2}, \\\\ldots, B_{N}$. If there are multiple solutions, you may print any one.\\n\\n------  Constraints ------\\n$1 \u2264 T \u2264 1,000$\\n$1 \u2264 K \u2264 N \u2264 10^{5}$\\n$1 \u2264 A_{i} \u2264 10^{6}$\\nthe sum of $N$ over all test cases does not exceed $10^{6}$\\n\\n------  Subtasks ------\\nSubtask #1 (40 points):\\n$N \u2264 1,000$\\nthe sum of $N$ over all test cases does not exceed $10,000$\\n\\nSubtask #2 (60 points): original constraints\\n\\n------  Example Input ------\\n\\n2\\n5 3\\n1 1 2 2 3\\n6 2\\n1 1 1 1 1 2\\n\\n------  Example Output ------\\n\\nYES\\n1 2 3 1 2\\nNO\",\n  \"Ground Truth Solution\": \"from collections import Counter\\nfrom operator import itemgetter\\n\\ndef find_x1(num, q):\\n\\ta1 = 0\\n\\tr1 = num // q\\n\\tr2 = num % q\\n\\ta2 = r1\\n\\tfor r3 in range(r1 + 1):\\n\\t\\tr4 = r2 % (q + 1)\\n\\t\\tif r4 == 0:\\n\\t\\t\\ta1 = r2 // (q + 1)\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ta2 -= 1\\n\\t\\t\\tr2 += q\\n\\tnum1 = a1 * (q + 1) + a2 * q\\n\\tif num1 != num:\\n\\t\\t(a1, a2) = (0, 0)\\n\\treturn (a1, a2)\\nt = int(input())\\nfor _ in range(t):\\n\\t(n, k) = map(int, input().split(' '))\\n\\ta = [int(x) for x in input().split()]\\n\\tif n == k:\\n\\t\\tprint('YES')\\n\\t\\tprint(*a)\\n\\telse:\\n\\t\\ta1 = Counter(a)\\n\\t\\tm = n % k\\n\\t\\tq = n // k\\n\\t\\tq1 = len(a1)\\n\\t\\tans = 'YES'\\n\\t\\tif q1 > k:\\n\\t\\t\\tans = 'NO'\\n\\t\\telse:\\n\\t\\t\\tm1 = 0\\n\\t\\t\\ta2 = []\\n\\t\\t\\tb1 = []\\n\\t\\t\\tb2 = []\\n\\t\\t\\tfor (k1, v1) in a1.items():\\n\\t\\t\\t\\t(x1, y1) = find_x1(v1, q)\\n\\t\\t\\t\\tif x1 == 0 and y1 == 0:\\n\\t\\t\\t\\t\\tans = 'NO'\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tm1 += x1\\n\\t\\t\\t\\t\\tif m1 > m:\\n\\t\\t\\t\\t\\t\\tans = 'NO'\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\tx2 = y1 // (q + 1)\\n\\t\\t\\t\\t\\tx3 = y1 % (q + 1)\\n\\t\\t\\t\\t\\tk2 = int(k1)\\n\\t\\t\\t\\t\\tw = (k2, x2)\\n\\t\\t\\t\\t\\tb1 = b1 + [k2] * x1\\n\\t\\t\\t\\t\\tb2 = b2 + [k2] * x3\\n\\t\\t\\t\\t\\ta2.append(w)\\n\\t\\t\\tif ans == 'YES' and (m - m1) % q != 0:\\n\\t\\t\\t\\tans = 'NO'\\n\\t\\t\\tif ans == 'YES':\\n\\t\\t\\t\\ta2.sort(key=itemgetter(1), reverse=True)\\n\\t\\t\\t\\tremaining = (m - m1) // q\\n\\t\\t\\t\\tfor i in a2:\\n\\t\\t\\t\\t\\tx2 = i[1]\\n\\t\\t\\t\\t\\tk2 = i[0]\\n\\t\\t\\t\\t\\tif x2 > 0 and x2 < remaining:\\n\\t\\t\\t\\t\\t\\tremaining -= x2\\n\\t\\t\\t\\t\\t\\tb1 = b1 + [k2] * (x2 * q)\\n\\t\\t\\t\\t\\telif x2 > 0 and remaining > 0:\\n\\t\\t\\t\\t\\t\\tb1 = b1 + [k2] * (remaining * q)\\n\\t\\t\\t\\t\\t\\tx2 -= remaining\\n\\t\\t\\t\\t\\t\\tremaining = 0\\n\\t\\t\\t\\t\\t\\tb2 = b2 + [k2] * (x2 * (q + 1))\\n\\t\\t\\t\\t\\telif x2 > 0:\\n\\t\\t\\t\\t\\t\\tb2 = b2 + [k2] * (x2 * (q + 1))\\n\\t\\t\\t\\tif remaining != 0:\\n\\t\\t\\t\\t\\tans = 'NO'\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tb = b1 + b2\\n\\t\\t\\t\\t\\tb = b * q\\n\\t\\t\\t\\t\\tb = b + b1\\n\\t\\tprint(ans)\\n\\t\\tif ans == 'YES':\\n\\t\\t\\tprint(*b)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to determine if an array A can be reordered into array B such that every contiguous subsequence of length K in B has the same arithmetic average. If it's possible, provide one such reordered array B.\\n- Identifying Key Conditions: For the arithmetic average to be the same for all contiguous subsequences of length K, the sum of elements in each subsequence must be the same. This usually implies that the elements within the array B must follow a repetitive pattern or be nearly uniform.\\n- Selecting Algorithmic Strategy: Consider frequency analysis of the input array A. If the number of unique elements in A is greater than K, it is not possible to form such a sequence B, and the output is 'NO'. Use counter to count frequency of each element in the array. Attempt to construct B from the counter if num of unique elements is no more than K.\\n- Implementation Considerations: Consider the case where N equals K; in this case, the input array A is the answer array B, and the output should be 'YES' and array A. Ensure the algorithm efficiently handles the constraints and subtasks.\",\n  \"LLM Questions\": [\n    \"What are the conditions that need to be satisfied to reorder array A into array B, such that every sub-sequence of length K has same arithmetic average?\",\n    \"What are the edge cases that should be considered for handling a case where no reordering is possible?\",\n    \"How can we determine if a given array A can be reordered to satisfy the condition related to arithmetic average of subsequence length K?\",\n    \"How can one construct a valid reordered sequence B if it's possible? Is there a systematic approach to generating the reordered sequence?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"For every contiguous sub-sequence of length K in B to have the same arithmetic average, it implies that their sums are also equal. This typically requires the elements of B to exhibit a pattern or uniformity.\",\n    \"If the number of unique elements in array A is greater than K, it's impossible to create such a sequence, and the answer is 'NO'. Consider corner cases, N = K.\",\n    \"The counter determines frequencies of elements. The problem boils down to seeing if these frequencies can be used to fill in n//k copies with K distinct numbers and a few left-over copies. Also, if N==K, we can trivially return YES and print input A\",\n    \"First compute m = n % k and q = n // k. We want to create 'm' copies of (q+1) and 'k-m' copies of q. If we can construct such 'b1' and 'b2', then final answer =  b*q + b1.\"\n  ]\n}\n```"