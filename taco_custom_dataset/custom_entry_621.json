"```json\n{\n  \"Coding Problem\": \"We have N bags numbered 1 through N and N dishes numbered 1 through N.\\nBag i contains a_i coins, and each dish has nothing on it initially.\\nTaro the first and Jiro the second will play a game against each other.\\nThey will alternately take turns, with Taro the first going first.\\nIn each player's turn, the player can make one of the following two moves:\\n - When one or more bags contain coin(s): Choose one bag that contains coin(s) and one dish, then move all coins in the chosen bag onto the chosen dish. (The chosen dish may already have coins on it, or not.)\\n - When no bag contains coins: Choose one dish with coin(s) on it, then remove one or more coins from the chosen dish.\\nThe player who first becomes unable to make a move loses. Determine the winner of the game when the two players play optimally.\\nYou are given T test cases. Solve each of them.\\n\\n-----Constraints-----\\n - All values in input are integers.\\n - 1 \\\\leq T \\\\leq 10^5\\n - 1 \\\\leq N \\\\leq 10^{5}\\n - 1 \\\\leq a_i \\\\leq 10^9\\n - In one input file, the sum of N does not exceed 2 \\\\times 10^5.\\n\\n-----Input-----\\nInput is given from Standard Input in the following format:\\nT\\n\\\\mathrm{case}_1\\n\\\\vdots\\n\\\\mathrm{case}_T\\n\\nEach case is in the following format:\\nN\\na_1 a_2 \\\\cdots a_N\\n\\n-----Output-----\\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the i-th test case.\\n\\n-----Sample Input-----\\n3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\\n-----Sample Output-----\\nSecond\\nFirst\\nSecond\\n\\n - In test case 1, Jiro the second wins. Below is one sequence of moves that results in Jiro's win:\\n - In Taro the first's turn, he can only choose Bag 1 and move the coins onto Dish 1.\\n - In Jiro the second's turn, he can choose Dish 1 and remove all coins from it, making Taro fail to make a move and lose.\\n - Note that when there is a bag that contains coin(s), a player can only make a move in which he chooses a bag that contains coin(s) and moves the coin(s) onto a dish.\\n - Similarly, note that when there is no bag that contains coin(s), a player can only make a move in which he chooses a dish and removes one or more coins.\",\n  \"Ground Truth Solution\": \"import sys\\ninput = sys.stdin.readline\\nfrom collections import defaultdict\\n\\ndef solve(n, A):\\n\\td = defaultdict(int)\\n\\tfor a in A:\\n\\t\\td[a] += 1\\n\\tflag = True\\n\\tfor v in d.values():\\n\\t\\tif v % 2 != 0:\\n\\t\\t\\tflag = False\\n\\t\\t\\tbreak\\n\\treturn bool(n % 2) ^ flag\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tA = list(map(int, input().split()))\\n\\t\\tjudge = solve(n, A)\\n\\t\\tprint('Second' if judge else 'First')\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Game Rules: Comprehend the two types of moves available: moving coins from bags to dishes and removing coins from dishes. Grasp the win/loss condition: a player loses if they cannot make a move.\\n- Identifying the Optimal Strategy: Recognize that the key to winning likely involves controlling the parity (evenness or oddness) of the number of occurrences of each coin value.\\n- Considering the Parity of N: Consider that the number of bags N might play a crucial role in determining the winner, as it dictates the initial number of available bags.\\n- Formulating a Winning Strategy: Hypothesize that if the number of occurrences of each coin value is even, the second player can always mirror the first player's moves, ultimately forcing the first player into a losing position if N is even. Otherwise, the first player can win.\\n- Analyzing the Relationship Between Parity of Counts and N: Deduce that the winner is determined by a combination of whether N is even or odd and whether all coin counts are even or if at least one is odd.\",\n  \"LLM Questions\": [\n    \"How do the two types of moves available to each player constrain their strategy, especially regarding moving coins from bags versus removing coins from dishes?\",\n    \"What role does the parity (even or odd) of the number of occurrences of each distinct coin value play in determining the outcome of the game?\",\n    \"How does the value of N (the number of bags) affect the available moves and the overall strategy for both players?\",\n    \"If all the bags have the same number of coins, say 1, how would the winning strategy change based on the value of N?\",\n    \"Can you formalize the relationship between whether N is even or odd, the parity of coin value counts, and the determination of the winner of the game?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The first type of move, transferring from bags to dishes, is only possible when there are coins remaining in the bags. The second type of move, removing from dishes, becomes relevant only when all bags are empty. The transition between these move types creates strategic breakpoints in the game.\",\n    \"The parity of the counts is important. If all coin values appear an even number of times, the second player can mirror the first player's moves, ensuring the first player eventually runs out of possible moves when N is even.\",\n    \"The value of N dictates how many initial bag-to-dish moves are available. An odd N might give the first player a strategic advantage, while an even N might favor the second player if the coin counts are even.\",\n    \"If all bags have a count of 1, then the parity of N determines the winner directly. If N is even, the second player wins; otherwise, the first player wins.\",\n    \"The winner is 'Second' if (N % 2 == 0 and all coin counts are even) or (N % 2 != 0 and all coin counts are even). The winner is 'First' if (N % 2 == 0 and at least one coin count is odd) or (N % 2 != 0 and at least one coin count is odd).  This can be simplified to: the winner is 'Second' if (N % 2) ^ (at least one coin count is odd) is True; otherwise, the winner is 'First'.\"\n  ]\n}\n```"