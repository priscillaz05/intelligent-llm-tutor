"```json\n{\n  \"Coding Problem\": \"In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?\\n\\n**Example:**\\n``` c\\nmakeNegative(1); // return -1\\nmakeNegative(-5); // return -5\\nmakeNegative(0); // return 0\\n```\\n``` cfml\\nmakeNegative(1); // return -1\\nmakeNegative(-5); // return -5\\nmakeNegative(0); // return 0\\n```\\n``` csharp\\nKata.MakeNegative(1); // return -1\\nKata.MakeNegative(-5); // return -5\\nKata.MakeNegative(0); // return 0\\n```\\n``` java\\nKata.makeNegative(1); // return -1\\nKata.makeNegative(-5); // return -5\\nKata.makeNegative(0); // return 0\\n```\\n``` python\\nmake_negative(1);  # return -1\\nmake_negative(-5); # return -5\\nmake_negative(0);  # return 0\\n```\\n``` javascript\\nmakeNegative(1); // return -1\\nmakeNegative(-5); // return -5\\nmakeNegative(0); // return 0\\nmakeNegative(0.12); // return -0.12\\n```\\n``` typescript\\nmakeNegative(1); // return -1\\nmakeNegative(-5); // return -5\\nmakeNegative(0); // return 0\\n```\\n``` cpp\\nmakeNegative(1); // return -1\\nmakeNegative(-5); // return -5\\nmakeNegative(0); // return 0\\n```\\n``` haskell\\nmakeNegative    1 -- return -1\\nmakeNegative (-5) -- return -5\\nmakeNegative    0 -- return 0\\nmakeNegative 0.12 -- return -0.12\\n```\\n``` ruby\\nmakeNegative(1); # return -1\\nmakeNegative(-5); # return -5\\nmakeNegative(0); # return 0\\n```\\n``` coffeescript\\nmakeNegative 1    # return -1\\nmakeNegative -5   # return -5\\nmakeNegative 0    # return 0\\n```\\n``` elixir\\nmake_negative 1    # return -1\\nmake_negative -5   # return -5\\nmake_negative 0    # return 0\\n```\\n``` go\\nMakeNegative(1)    # return -1\\nMakeNegative(-5)   # return -5\\nMakeNegative(0)    # return 0\\n```\\n``` julia\\nKata.makeNegative(1)  # return -1\\nKata.makeNegative(-5) # return -5\\nKata.makeNegative(0)  # return 0\\n```\\n``` kotlin\\nKata().makeNegative(1)  // return -1\\nKata().makeNegative(-5) // return -5\\nKata().makeNegative(0)  // return 0\\n```\\n``` asm\\nmake_negative(1);    // return -1\\nmake_negative(-5);   // return -5\\nmake_negative(0);    // return 0\\n```\\n``` groovy\\nKata.makeNegative(1)    // return -1\\nKata.makeNegative(-5)   // return -5\\nKata.makeNegative(0)    // return 0\\n```\\n``` php\\nmakeNegative(1)    // return -1\\nmakeNegative(-5)   // return -5\\nmakeNegative(0)    // return 0\\nmakeNegative(0.12) // return -0.12\\n```\\n```racket\\n(make-negative 1)    ; -1\\n(make-negative -5)   ; -5\\n(make-negative 0)    ; 0\\n(make-negative 0.12) ; -0.12\\n```\\n\\n**Notes:**\\n\\n- The number can be negative already, in which case no change is required.\\n- Zero (0) is not checked for any specific sign. Negative zeros make no mathematical sense.\",\n  \"Ground Truth Solution\": \"def make_negative(number):\\n\\treturn -abs(number)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: The task is to take a number and return its negative. If the number is already negative or zero, return the original number.\\n- Handling Special Conditions: The problem states that if the number is already negative, it should return the number itself. The problem also specified that for zero, we return zero.\\n- Selecting an Algorithmic Strategy: Use the absolute value function to deal with negative numbers and multiply by negative 1. Handle the zero case.\",\n  \"LLM Questions\": [\n    \"What should the function return if the input is already a negative number?\",\n    \"What should the function return if the input is zero?\",\n    \"What is the best method to convert a positive number to a negative number while keeping negative numbers untouched?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The function should return the number itself.\",\n    \"The function should return zero.\",\n    \"Use the absolute value function to handle the positive and negative number then multiply by -1.\"\n  ]\n}\n```"