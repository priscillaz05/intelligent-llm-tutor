"```json\n{\n  \"Coding Problem\": \"You have a large electronic screen which can display up to $998244353$ decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of $7$ segments which can be turned on and off to compose different digits. The following picture describes how you can display all $10$ decimal digits:\\n\\n[Image]\\n\\nAs you can see, different digits may require different number of segments to be turned on. For example, if you want to display $1$, you have to turn on $2$ segments of the screen, and if you want to display $8$, all $7$ segments of some place to display a digit should be turned on.\\n\\nYou want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than $n$ segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than $n$ segments.\\n\\nYour program should be able to process $t$ different test cases.\\n\\n\\n-----Input-----\\n\\nThe first line contains one integer $t$ ($1 \\\\le t \\\\le 100$) \u2014 the number of test cases in the input.\\n\\nThen the test cases follow, each of them is represented by a separate line containing one integer $n$ ($2 \\\\le n \\\\le 10^5$) \u2014 the maximum number of segments that can be turned on in the corresponding testcase.\\n\\nIt is guaranteed that the sum of $n$ over all test cases in the input does not exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case, print the greatest integer that can be displayed by turning on no more than $n$ segments of the screen. Note that the answer may not fit in the standard $32$-bit or $64$-bit integral data type.\\n\\n\\n-----Example-----\\nInput\\n2\\n3\\n4\\n\\nOutput\\n7\\n11\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tint_part = n // 2\\n\\tost = n - int_part * 2\\n\\tnumber = ''\\n\\tfor i in range(int_part - 1):\\n\\t\\tnumber += '1'\\n\\tif ost == 0:\\n\\t\\tnumber += '1'\\n\\telse:\\n\\t\\tnumber = '7' + number\\n\\tprint(number)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to find the largest possible number that can be displayed on a screen with a limited number of segments, where each digit requires a specific number of segments. The number 1 uses 2 segments and the number 7 uses 3 segments. We want to maximize the number displayed, which means using as many digits as possible.\\n- Optimizing Digit Selection: Since 1 uses the fewest segments (2), we want to maximize the number of 1s in the displayed number. If n is even, we can use n/2 ones. If n is odd, we can start with a 7 (3 segments), and then use the remaining segments for ones.\\n- Handling Edge Cases: Consider the cases when n is 2 and 3, which directly lead to numbers '1' and '7' respectively.\\n- Constructing the Number: Based on whether n is even or odd, construct the number by concatenating '1's or starting with '7' and then concatenating '1's.\",\n  \"LLM Questions\": [\n    \"Which digit uses the fewest segments, and how many segments does it use?\",\n    \"If you have n segments available, how can you maximize the number of digits displayed?\",\n    \"How does the approach change if n is even versus odd?\",\n    \"How would you construct the final number based on the value of n?\",\n    \"What are the edge cases for small values of n (e.g., n=2, n=3)?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The digit '1' uses the fewest segments, and it uses 2 segments.\",\n    \"To maximize the number of digits, use as many '1's as possible since it requires the fewest segments.\",\n    \"If n is even, divide n by 2 and create a string with that many '1's. If n is odd, start with a '7' and use the remaining segments to create '1's.\",\n    \"If n is even, the number is '1' repeated n/2 times. If n is odd, the number is '7' followed by '1' repeated (n-3)/2 times.\",\n    \"If n=2, the answer is '1'. If n=3, the answer is '7'.\"\n  ]\n}\n```"