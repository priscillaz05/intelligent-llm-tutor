"```json\n{\n  \"Coding Problem\": \"There are 3 problems in a contest namely A, B, C respectively. Alice bets Bob that problem C is the hardest while Bob says that problem B will be the hardest. \\n\\nYou are given three integers S_{A}, S_{B}, S_{C} which denotes the number of successful submissions of the problems A, B, C respectively. It is guaranteed that each problem has a different number of submissions. Determine who wins the bet.\\n\\n1) If Alice wins the bet (i.e. problem C is the hardest), then output Alice.\\n\\n2) If Bob wins the bet (i.e. problem B is the hardest), then output Bob.\\n\\n3) If no one wins the bet (i.e. problem A is the hardest), then output Draw.\\n\\nNote: The hardest problem is the problem with the least number of successful submissions.\\n\\n------ Input Format ------ \\n\\n- The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\n- The first and only line of each test case contains three space-separated integers S_{A}, S_{B}, S_{C}, denoting the number of successful submissions of problems A, B, C respectively. \\n\\n------ Output Format ------ \\n\\nFor each test case, output the winner of the bet or print Draw in case no one wins the bet.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 100$\\n$1 \u2264 S_{A},S_{B},S_{C} \u2264 100$\\n$S_{A}, S_{B}, S_{C}$ are all distinct.\\n\\n------ subtasks ------ \\n\\nTESTING\\n\\n----- Sample Input 1 ------ \\n3\\n1 4 2\\n16 8 10\\n14 15 9\\n\\n----- Sample Output 1 ------ \\nDraw\\nBob\\nAlice\\n\\n----- explanation 1 ------ \\nTest case $1$:  Problem $A$ turns out to be the hardest so no one wins the bet.\\n\\nTest case $2$:  Problem $B$ turns out to be the hardest so Bob wins the bet.\\n\\nTest case $3$:  Problem $C$ turns out to be the hardest so Alice wins the bet.\",\n  \"Ground Truth Solution\": \"for i in range(int(input())):\\n\\t(a, b, c) = map(int, input().split())\\n\\tif c < b and c < a:\\n\\t\\tprint('Alice')\\n\\telif b < c and b < a:\\n\\t\\tprint('Bob')\\n\\telse:\\n\\t\\tprint('Draw')\",\n  \"LLM CoT Steps Breakdown\": \"- Read Input: Read the number of test cases T, and for each test case, read three integers SA, SB, and SC representing the number of submissions for problems A, B, and C.\\n- Determine the Hardest Problem: Determine the hardest problem by finding the minimum value among SA, SB, and SC. Since the problem states that the submission counts are distinct, a simple comparison will work.\\n- Determine the Winner: Determine the winner based on which problem is hardest. If problem C is hardest (SC is the minimum), Alice wins. If problem B is hardest (SB is the minimum), Bob wins. Otherwise, problem A is the hardest (SA is the minimum), and it's a draw.\\n- Print Output: Print the winner (Alice, Bob, or Draw) for each test case.\",\n  \"LLM Questions\": [\n    \"What constitutes the \\\"hardest\\\" problem in this contest, and how does the number of submissions relate to it?\",\n    \"How do you handle multiple test cases, and what steps must be repeated for each?\",\n    \"How do you determine which problem has the least successful submissions given three distinct submission counts?\",\n    \"Based on the hardest problem, how do you determine who won the bet or if it was a draw?\",\n    \"What should the output be for each test case?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The hardest problem is the one with the fewest successful submissions.\",\n    \"You must read input and compute/print the result for each test case, repeating the process until all test cases have been processed.\",\n    \"You compare the values S_A, S_B, and S_C to find the minimum. Since they are guaranteed to be distinct, a simple comparison will suffice.\",\n    \"If C is the hardest, Alice wins. If B is the hardest, Bob wins. If A is the hardest, it's a draw.\",\n    \"For each test case, the output should be a single line containing either 'Alice', 'Bob', or 'Draw' depending on who won the bet or if it was a draw.\"\n  ]\n}\n```"