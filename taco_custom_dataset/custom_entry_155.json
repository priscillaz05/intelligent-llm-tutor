"```json\n{\n  \"Coding Problem\": \"Given a string s containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters. It is guaranteed that there are no consecutive repeating characters in the given string except for '?'. Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.\",\n  \"Ground Truth Solution\": \"class Solution:\\n\\n\\tdef modifyString(self, s: str) -> str:\\n\\t\\tif len(s) == 0:\\n\\t\\t\\treturn s\\n\\t\\tstring = ['#']\\n\\t\\tstring.extend(list(s))\\n\\t\\tstring.append('#')\\n\\t\\tfor i in range(1, len(string) - 1):\\n\\t\\t\\tif string[i] == '?':\\n\\t\\t\\t\\tfor j in range(97, 123):\\n\\t\\t\\t\\t\\tif string[i - 1] != chr(j) and string[i + 1] != chr(j):\\n\\t\\t\\t\\t\\t\\tstring[i] = chr(j)\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tret = ''.join(string[1:-1])\\n\\t\\treturn ret\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The problem requires replacing '?' characters in a string with lowercase letters to avoid consecutive repeating characters. The existing non-'?' characters must remain unchanged.\\n- Handling Edge Cases: Consider the edge cases where the string is empty or contains no '?' characters. These cases might require specific handling.\\n- Choosing an Algorithmic Strategy: A simple iterative approach can be used, going through the string and replacing each '?' with a suitable character. The character chosen must be different from its neighbors to avoid consecutive repetition.\\n- Implementation Considerations: When replacing a '?', consider the characters immediately before and after it. Iterate through possible lowercase letters and select the first one that is different from both neighbors. Special handling is needed for the first and last characters of the string.\\n- Optimizing: The string can be efficiently modified in-place to avoid extra space.\\n- Testing: Test with various input strings, including those with no '?', multiple adjacent '?', and '?' at the beginning or end of the string.\",\n  \"LLM Questions\": [\n    \"What does it mean to convert the '?' characters such that the final string does not contain any consecutive repeating characters?\",\n    \"What are the possible edge cases to consider?\",\n    \"What character values do the ascii values 97 and 123 represent?\",\n    \"How to handle the edge cases of the first and last characters? How do we know what the 'previous' and 'next' characters are for each of these?\",\n    \"How can the selection of characters be implemented efficiently without using extra memory?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"It means replacing each '?' with a lowercase letter such that no two adjacent characters in the modified string are the same.\",\n    \"Edge cases include an empty string, a string with no '?' characters, and a string with '?' at the beginning or end.\",\n    \"97 is the ascii value for the character 'a' and 123 is the ascii value immediately after 'z'\",\n    \"For the first character, only consider the next character. If the first character is '?', check the second character and select a lowercase letter different from it. For the last character, only consider the previous character, and select a lowercase letter different from it.\",\n    \"By modifying the string in-place, iterating through possible lowercase letters and checking against neighbors before making the change. Once a valid change is made the search can be stopped.\"\n  ]\n}\n```"