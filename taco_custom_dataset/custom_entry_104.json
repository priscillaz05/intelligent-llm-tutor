"```json\n{\n  \"Coding Problem\": \"The sum of digits of a non-negative integer $a$ is the result of summing up its digits together when written in the decimal system. For example, the sum of digits of $123$ is $6$ and the sum of digits of $10$ is $1$. In a formal way, the sum of digits of $\\displaystyle a=\\\\sum_{i=0}^{\\\\infty} a_i \\\\cdot 10^i$, where $0 \\\\leq a_i \\\\leq 9$, is defined as $\\\\displaystyle\\\\sum_{i=0}^{\\\\infty}{a_i}$.\\n\\nGiven an integer $n$, find two non-negative integers $x$ and $y$ which satisfy the following conditions.\\n\\n$x+y=n$, and\\n\\nthe sum of digits of $x$ and the sum of digits of $y$ differ by at most $1$.\\n\\nIt can be shown that such $x$ and $y$ always exist.\\n\\n\\n-----Input-----\\n\\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\\\le t \\\\le 10000$).\\n\\nEach test case consists of a single integer $n$ ($1 \\\\leq n \\\\leq 10^9$)\\n\\n\\n-----Output-----\\n\\nFor each test case, print two integers $x$ and $y$.\\n\\nIf there are multiple answers, print any.\\n\\n\\n-----Examples-----\\n\\nInput\\n5\\n1\\n161\\n67\\n1206\\n19\\nOutput\\n1 0\\n67 94\\n60 7\\n1138 68\\n14 5\\n\\n\\n-----Note-----\\n\\nIn the second test case, the sum of digits of $67$ and the sum of digits of $94$ are both $13$.\\n\\nIn the third test case, the sum of digits of $60$ is $6$, and the sum of digits of $7$ is $7$.\",\n  \"Ground Truth Solution\": \"import sys, math, cmath, time\\nfrom bisect import bisect_left\\nstart_time = time.time()\\n\\ndef sod(n):\\n\\tn = str(n)\\n\\ts = 0\\n\\tfor i in n:\\n\\t\\ts = s + int(i)\\n\\treturn s\\n\\ndef solve(t):\\n\\tn = inp()\\n\\ts = ''\\n\\ts1 = ''\\n\\tc = 1\\n\\twhile n > 0:\\n\\t\\td = n % 10\\n\\t\\tif d % 2 == 0:\\n\\t\\t\\ts = str(d // 2) + s\\n\\t\\t\\ts1 = str(d // 2) + s1\\n\\t\\telif c == 1:\\n\\t\\t\\ts = str(d // 2) + s\\n\\t\\t\\ts1 = str(d // 2 + 1) + s1\\n\\t\\t\\tc -= 1\\n\\t\\telse:\\n\\t\\t\\ts = str(d // 2 + 1) + s\\n\\t\\t\\ts1 = str(d // 2) + s1\\n\\t\\t\\tc += 1\\n\\t\\tn = n // 10\\n\\tprint(int(s), int(s1))\\n\\ndef main():\\n\\ttestcases = 1\\n\\ttestcases = inp()\\n\\tfor each_testcase in range(testcases):\\n\\t\\tsolve(each_testcase)\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inps():\\n\\treturn input().split()\\nONLINE_JUDGE = __debug__\\nif ONLINE_JUDGE:\\n\\tinput = sys.stdin.readline\\nmain()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding two non-negative integers, x and y, that sum to a given integer n. The absolute difference between the sum of digits of x and y must be at most 1.\\n- Devising a Strategy: We can construct x and y digit by digit, starting from the least significant digit. If the current digit of n is even, we can split it equally between x and y. If the current digit is odd, we alternate adding the extra 1 to either x or y to keep the difference in digit sums at most 1.\\n- Handling Edge Cases:  There aren't explicit edge cases in terms of invalid input, as the constraints specify a positive integer n.  However, leading zeros in either x or y might be a concern but the output should be integers, so python will handle them.\\n- Implementation Details: Convert n to a string, process it digit by digit from right to left. Maintain a flag to alternate assigning the extra 1 (when the digit of n is odd) between x and y.\",\n  \"LLM Questions\": [\n    \"What is the core constraint of the problem, and how does it affect the choice of x and y?\",\n    \"How would you approach constructing x and y digit by digit, and why?\",\n    \"What happens when a digit in n is even, and how do you distribute it to x and y?\",\n    \"What happens when a digit in n is odd, and how do you ensure the digit sums of x and y remain close?\",\n    \"Are there any potential edge cases related to the construction of x and y, and how would you handle them?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The core constraint is that the sum of digits of x and y should differ by at most 1. This forces a balanced approach where differences are minimized during the construction of x and y.\",\n    \"I would construct x and y digit by digit from right to left because it allows for an incremental decision-making process. It helps balance the sums of the digits while ensuring that x + y = n.\",\n    \"If a digit in n is even, I split it evenly between x and y. For example, if a digit is 4, x gets 2 and y gets 2.\",\n    \"If a digit in n is odd, I add the extra 1 to either x or y, alternating this choice for each odd digit. This ensures that the digit sums of x and y stay close to each other. If the digit is 5, then in one case x gets 2 and y gets 3, and the other way around for the next odd digit.\",\n    \"Leading zeros might appear in x or y during construction. However, when converting these strings to integers this is automatically handled\"\n  ]\n}\n```"