"```json\n{\n  \"Coding Problem\": \"There are $n$ students at your university. The programming skill of the $i$-th student is $a_i$. As a coach, you want to divide them into teams to prepare them for the upcoming ICPC finals. Just imagine how good this university is if it has $2 \\cdot 10^5$ students ready for the finals!\\n\\nEach team should consist of at least three students. Each student should belong to exactly one team. The diversity of a team is the difference between the maximum programming skill of some student that belongs to this team and the minimum programming skill of some student that belongs to this team (in other words, if the team consists of $k$ students with programming skills $a[i_1], a[i_2], \\\\dots, a[i_k]$, then the diversity of this team is $\\\\max\\\\limits_{j=1}^{k} a[i_j] - \\\\min\\\\limits_{j=1}^{k} a[i_j]$).\\n\\nThe total diversity is the sum of diversities of all teams formed.\\n\\nYour task is to minimize the total diversity of the division of students and find the optimal way to divide the students.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains one integer $n$ ($3 \\\\le n \\\\le 2 \\\\cdot 10^5$) \u2014 the number of students.\\n\\nThe second line of the input contains $n$ integers $a_1, a_2, \\\\dots, a_n$ ($1 \\\\le a_i \\\\le 10^9$), where $a_i$ is the programming skill of the $i$-th student.\\n\\n\\n-----Output-----\\n\\nIn the first line print two integers $res$ and $k$ \u2014 the minimum total diversity of the division of students and the number of teams in your division, correspondingly.\\n\\nIn the second line print $n$ integers $t_1, t_2, \\\\dots, t_n$ ($1 \\\\le t_i \\\\le k$), where $t_i$ is the number of team to which the $i$-th student belong.\\n\\nIf there are multiple answers, you can print any. Note that you don't need to minimize the number of teams. Each team should consist of at least three students.\\n\\n\\n-----Examples-----\\nInput\\n5\\n1 1 3 4 2\\n\\nOutput\\n3 1\\n1 1 1 1 1 \\n\\nInput\\n6\\n1 5 12 13 2 15\\n\\nOutput\\n7 2\\n2 2 1 1 2 1 \\n\\nInput\\n10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\\nOutput\\n7486 3\\n3 3 3 2 2 2 2 1 1 1 \\n\\n\\n\\n-----Note-----\\n\\nIn the first example, there is only one team with skills $[1, 1, 2, 3, 4]$ so the answer is $3$. It can be shown that you cannot achieve a better answer.\\n\\nIn the second example, there are two teams with skills $[1, 2, 5]$ and $[12, 13, 15]$ so the answer is $4 + 3 = 7$.\\n\\nIn the third example, there are three teams with skills $[1, 2, 5]$, $[129, 185, 581, 1041]$ and $[1580, 1909, 8150]$ so the answer is $4 + 912 + 6570 = 7486$.\",\n  \"Ground Truth Solution\": \"n = int(input())\\narr = list(map(int, input().split()))\\nfor i in range(n):\\n\\tarr[i] = (arr[i], i)\\narr.sort()\\ndp = [999999999999] * (n + 1)\\ndp[0] = 0\\ncame_from = [-1] * (n + 1)\\nfor i in range(n):\\n\\tif i + 3 <= n:\\n\\t\\tif dp[i] + arr[i + 2][0] - arr[i][0] < dp[i + 3]:\\n\\t\\t\\tcame_from[i + 3] = i\\n\\t\\t\\tdp[i + 3] = min(dp[i + 3], dp[i] + arr[i + 2][0] - arr[i][0])\\n\\tif i + 4 <= n:\\n\\t\\tif dp[i] + arr[i + 3][0] - arr[i][0] < dp[i + 4]:\\n\\t\\t\\tcame_from[i + 4] = i\\n\\t\\t\\tdp[i + 4] = min(dp[i + 4], dp[i] + arr[i + 3][0] - arr[i][0])\\n\\tif i + 5 <= n:\\n\\t\\tif dp[i] + arr[i + 4][0] - arr[i][0] < dp[i + 5]:\\n\\t\\t\\tcame_from[i + 5] = i\\n\\t\\t\\tdp[i + 5] = min(dp[i + 5], dp[i] + arr[i + 4][0] - arr[i][0])\\nresult = [0] * n\\ni = n\\nteam = 1\\nwhile i > 0:\\n\\ttarget = came_from[i]\\n\\twhile i > target:\\n\\t\\tresult[arr[i - 1][1]] = team\\n\\t\\ti -= 1\\n\\tteam += 1\\nprint(dp[n], team - 1)\\nprint(*result, sep=' ')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to divide students into teams of at least 3, minimizing the sum of the differences between the maximum and minimum skill in each team. The output requires the minimum total diversity, the number of teams, and the team assignment for each student.\\n- Identifying Key Constraints: Each team must have at least 3 members. Each student belongs to exactly one team. The objective is to minimize the total diversity across all teams.\\n- Selecting an Algorithmic Strategy: Dynamic programming can be used to determine the minimum total diversity. Sort the students by skill. Consider forming teams of size 3, 4, or 5, and calculate the diversity for each possible team assignment. The `dp[i]` represents the minimum total diversity for the first `i` students. The `came_from` array is used to reconstruct the team assignments.\\n- Implementation Details: Iterate through the sorted list of students. Update the `dp` array by considering team sizes 3, 4 and 5. Track from where the minimum diversity came using the `came_from` array. After calculating the `dp` array, backtrack from `n` using `came_from` to determine team assignments for each student and output the results.\",\n  \"LLM Questions\": [\n    \"What does diversity of a team signify, and how is the total diversity calculated?\",\n    \"What are the constraints on the number of students in each team?\",\n    \"Why is sorting the student skills important for minimizing diversity?\",\n    \"How does dynamic programming help in solving this problem, and what does dp[i] represent?\",\n    \"How can the team assignments for each student be reconstructed after calculating the dynamic programming array?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The diversity of a team is the difference between the maximum and minimum programming skill of students in that team. The total diversity is the sum of diversities of all teams.\",\n    \"Each team must consist of at least three students.\",\n    \"Sorting ensures that the difference between the maximum and minimum skill within each team is minimized, which helps to reduce overall diversity.\",\n    \"Dynamic programming allows us to find the optimal division by building up solutions for smaller groups of students. dp[i] represents the minimum total diversity achievable by dividing the first i students into teams.\",\n    \"The `came_from` array, used in the dynamic programming process, keeps track of the previous index used to achieve the minimum diversity at a particular index. By backtracking from `n` using `came_from`, we can determine the composition of each team.\"\n  ]\n}\n```"