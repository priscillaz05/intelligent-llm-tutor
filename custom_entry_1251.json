"```json\n{\n  \"Coding Problem\": \"The faculty of application management and consulting services (FAMCS) of the Berland State University (BSU) has always been popular among Berland's enrollees. This year, N students attended the entrance exams, but no more than K will enter the university. In order to decide who are these students, there are series of entrance exams. All the students with score strictly greater than at least (N-K) students' total score gets enrolled.\\nIn total there are E entrance exams, in each of them one can score between 0 and M points, inclusively. The first E-1 exams had already been conducted, and now it's time for the last tribulation.\\nSergey is the student who wants very hard to enter the university, so he had collected the information about the first E-1 from all N-1 enrollees (i.e., everyone except him). Of course, he knows his own scores as well.\\nIn order to estimate his chances to enter the University after the last exam, Sergey went to a fortune teller. From the visit, he learnt about scores that everyone except him will get at the last exam. Now he wants to calculate the minimum score he needs to score in order to enter to the university. But now he's still very busy with minimizing the amount of change he gets in the shops, so he asks you to help him.\\n\\n-----Input-----\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains four space separated integers N, K, E, M denoting the number of students, the maximal number of students who'll get enrolled, the total number of entrance exams and maximal number of points for a single exam, respectively.\\nThe following N-1 lines will contain E integers each, where the first E-1 integers correspond to the scores of the exams conducted. The last integer corresponds to the score at the last exam, that was predicted by the fortune-teller.\\nThe last line contains E-1 integers denoting Sergey's score for the first E-1 exams.\\n\\n-----Output-----\\n\\nFor each test case, output a single line containing the minimum score Sergey should get in the last exam in order to be enrolled. If Sergey doesn't have a chance to be enrolled, output \\\"Impossible\\\" (without quotes).\\n\\n-----Constraints-----\\n\\n- 1 \u2264 T \u2264 5\\n- 1 \u2264 K < N \u2264 104\\n- 1 \u2264 M \u2264 109\\n- 1 \u2264 E \u2264 4\\n\\n-----Example-----\\nInput:1\\n4 2 3 10\\n7 7 7\\n4 6 10\\n7 10 9\\n9 9\\n\\nOutput:4\\n\\n-----Explanation-----\\nExample case 1. If Sergey gets 4 points at the last exam, his score will be equal to 9+9+4=22. This will be the second score among all the enrollees - the first one will get 21, the second one will get 20 and the third will have the total of 26. Thus, Sergey will enter the university.\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\t(n, k, e, m) = map(int, input().split())\\n\\ts = []\\n\\tfor i in range(n - 1):\\n\\t\\ta = [int(x) for x in input().split()]\\n\\t\\ts.append(sum(a))\\n\\ts.sort(reverse=True)\\n\\ta = [int(x) for x in input().split()]\\n\\tc = s[k - 1] + 1 - sum(a)\\n\\tif c > m:\\n\\t\\tprint('Impossible')\\n\\telif c > 0:\\n\\t\\tprint(c)\\n\\telse:\\n\\t\\tprint(0)\",\n  \"LLM CoT Steps Breakdown\": \"- Reading Input: Parse the number of test cases T. Then for each test case, parse N, K, E, M and the scores of the other students, as well as Sergey's scores for the first E-1 exams.\\n- Calculating Total Scores: Calculate the total scores of all other N-1 students across all E exams using the fortune teller predictions. Calculate Sergey's current total score based on his first E-1 exams.\\n- Determining the Threshold: Find the score that the K-th highest scoring student achieved (s[k-1]). Sergey needs to score one point higher than this student's total score to be enrolled.\\n- Calculating Required Score: Calculate the minimum score Sergey needs on the last exam to exceed the threshold calculated in the previous step.\\n- Handling Edge Cases: If the required score is greater than M (the max score possible), then Sergey can't get in. If the required score is negative, then Sergey is already in, so he needs 0 points on the last exam.\",\n  \"LLM Questions\": [\n    \"How do you determine the minimum score Sergey needs to achieve to be in the top K students?\",\n    \"What should be considered when the calculated minimum score exceeds the maximum possible score?\",\n    \"How do you handle the edge case where Sergey already has a high enough score to be in the top K?\",\n    \"How do you efficiently calculate the total scores of all students?\",\n    \"Why is it necessary to consider the K-th highest score and not just the average or any other measure?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"You need to find the total score of the K-th student. Sergey needs to score at least one point higher than that total to be included in the top K.\",\n    \"If the required score is higher than M (the max possible score), then Sergey has no chance of getting in, and the output should be 'Impossible'.\",\n    \"If Sergey's existing score is already greater than or equal to the K-th highest scoring student, then he only needs a score of 0 on the last exam.\",\n    \"Iterate through the given scores for each student, summing the scores to find the total. Utilize a list to store totals.\",\n    \"The K-th highest score represents the threshold for being in the top K. Sergey needs to exceed this score to be guaranteed a spot. Averages and other measures do not guarantee inclusion.\"\n  ]\n}\n```"