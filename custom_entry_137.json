"```json\n{\n  \"Coding Problem\": \"Limak is a little polar bear. He has n balls, the i-th ball has size t_{i}.\\n\\nLimak wants to give one ball to each of his three friends. Giving gifts isn't easy\\u00a0\\u2014 there are two rules Limak must obey to make friends happy:  No two friends can get balls of the same size.  No two friends can get balls of sizes that differ by more than 2. \\n\\nFor example, Limak can choose balls with sizes 4, 5 and 3, or balls with sizes 90, 91 and 92. But he can't choose balls with sizes 5, 5 and 6 (two friends would get balls of the same size), and he can't choose balls with sizes 30, 31 and 33 (because sizes 30 and 33 differ by more than 2).\\n\\nYour task is to check whether Limak can choose three balls that satisfy conditions above.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains one integer n (3 \\u2264 n \\u2264 50)\\u00a0\\u2014 the number of balls Limak has.\\n\\nThe second line contains n integers t_1, t_2, ..., t_{n} (1 \\u2264 t_{i} \\u2264 1000) where t_{i} denotes the size of the i-th ball.\\n\\n\\n-----Output-----\\n\\nPrint \\\"YES\\\" (without quotes) if Limak can choose three balls of distinct sizes, such that any two of them differ by no more than 2. Otherwise, print \\\"NO\\\" (without quotes).\\n\\n\\n-----Examples-----\\nInput\\n4\\n18 55 16 17\\n\\nOutput\\nYES\\n\\nInput\\n6\\n40 41 43 44 44 44\\n\\nOutput\\nNO\\n\\nInput\\n8\\n5 972 3 4 1 4 970 971\\n\\nOutput\\nYES\\n\\n\\n\\n-----Note-----\\n\\nIn the first sample, there are 4 balls and Limak is able to choose three of them to satisfy the rules. He must must choose balls with sizes 18, 16 and 17.\\n\\nIn the second sample, there is no way to give gifts to three friends without breaking the rules.\\n\\nIn the third sample, there is even more than one way to choose balls:  Choose balls with sizes 3, 4 and 5.  Choose balls with sizes 972, 970, 971.\",\n  \"Ground Truth Solution\": \"n = int(input())\\nballs = list(map(int, input().split()))\\nballs.sort()\\n\\ndef answer(balls):\\n\\ta = 0\\n\\tb = 1\\n\\twhile b < len(balls) - 1:\\n\\t\\twhile balls[b] == balls[a] and b < len(balls) - 2:\\n\\t\\t\\tb += 1\\n\\t\\tif balls[b] == balls[a] + 1:\\n\\t\\t\\tc = b + 1\\n\\t\\t\\twhile balls[c] == balls[b] and c < len(balls) - 1:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\tif balls[c] == balls[b] + 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\telse:\\n\\t\\t\\t\\ta = c\\n\\t\\t\\t\\tb = a + 1\\n\\t\\telse:\\n\\t\\t\\ta = b\\n\\t\\t\\tb = a + 1\\n\\treturn 'NO'\\nprint(answer(balls))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding if there exist three distinct ball sizes in the given input such that the difference between any two of them is no more than 2.\\n- Input Processing: Read the number of balls `n` and the sizes of the balls into a list. Handle potential duplicate sizes.\\n- Sorting: Sort the ball sizes to make it easier to find combinations that meet the criteria.\\n- Searching for Combinations: Iterate through the sorted list to find three distinct ball sizes that are within the allowed difference range of 2.\\n- Output: Print \\\"YES\\\" if a valid combination is found; otherwise, print \\\"NO\\\".\",\n  \"LLM Questions\": [\n    \"What are the key constraints for choosing three balls?\",\n    \"How can sorting the balls simplify the problem?\",\n    \"How can you efficiently search for three balls that satisfy the constraints?\",\n    \"What edge cases should you consider while searching for combinations?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The key constraints are that the three balls must have distinct sizes and the difference between any two of their sizes must not exceed 2.\",\n    \"Sorting the balls makes it easier to find combinations that meet the difference constraint because balls with nearby sizes will be adjacent to each other after sorting.\",\n    \"After sorting, iterate through the list and, for each ball, check if there are two other balls within a difference of 2. If there are, make sure the balls are distinct.\",\n    \"Edge cases to consider include arrays with less than 3 elements, arrays with duplicate ball sizes, and arrays where no combination of three balls meet the specified conditions.\"\n  ]\n}\n```"