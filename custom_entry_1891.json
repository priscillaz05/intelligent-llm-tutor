"```json\n{\n  \"Coding Problem\": \"Johnny has just found the new, great tutorial: \\\"How to become a grandmaster?\\\". The tutorial tells many strange and unexpected for Johnny things, such as you have to be patient or that very important is solving many harder and harder problems. \\n\\nThe boy has found an online judge with tasks divided by topics they cover. He has picked p^{k_i} problems from i-th category (p is his favorite number). He wants to solve them in two weeks (the patience condition is too hard for Johnny, so for simplicity, he looks only at easy tasks, which can be solved in such a period). Now our future grandmaster has to decide which topics to cover first and which the second week. Help him assign topics in such a way, that workload is balanced.\\n\\nFormally, given n numbers p^{k_i}, the boy wants to divide them into two disjoint sets, minimizing the absolute difference between sums of numbers in each set. Find the minimal absolute difference. Output the result modulo 10^{9}+7.\\n\\nInput\\n\\nInput consists of multiple test cases. The first line contains one integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Each test case is described as follows:\\n\\nThe first line contains two integers n and p (1 \u2264 n, p \u2264 10^6). The second line contains n integers k_i (0 \u2264 k_i \u2264 10^6).\\n\\nThe sum of n over all test cases doesn't exceed 10^6.\\n\\nOutput\\n\\nOutput one integer \u2014 the reminder of division the answer by 1 000 000 007.\\n\\nExample\\n\\nInput\\n\\n\\n4\\n5 2\\n2 3 4 4 3\\n3 1\\n2 10 1000\\n4 5\\n0 1 1 100\\n1 8\\n89\\n\\n\\nOutput\\n\\n\\n4\\n1\\n146981438\\n747093407\\n\\nNote\\n\\nYou have to minimize the difference, not it's remainder. For example, if the minimum difference is equal to 2, but there is also a distribution where the difference is 10^9 + 8, then the answer is 2, not 1.\",\n  \"Ground Truth Solution\": \"import io\\nimport os\\nfrom collections import Counter\\nMOD = 10 ** 9 + 7\\n\\ndef solve(N, P, K):\\n\\tif P == 1:\\n\\t\\treturn len(K) % 2\\n\\tK.sort(reverse=True)\\n\\tleft = Counter()\\n\\tright = Counter()\\n\\tfor k in K:\\n\\t\\tif not left:\\n\\t\\t\\tleft[k] += 1\\n\\t\\telse:\\n\\t\\t\\tif k in left:\\n\\t\\t\\t\\tdel left[k]\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tright[k] += 1\\n\\t\\t\\twhile True:\\n\\t\\t\\t\\t(q, r) = divmod(right[k], P)\\n\\t\\t\\t\\tright[k] = r\\n\\t\\t\\t\\tright[k + 1] += q\\n\\t\\t\\t\\tif q == 0:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tif k + 1 in left:\\n\\t\\t\\t\\t\\tassert right[k + 1] == 1\\n\\t\\t\\t\\t\\tdel left[k + 1]\\n\\t\\t\\t\\t\\tdel right[k + 1]\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tk += 1\\n\\trightSum = sum((v * pow(P, k, MOD) for (k, v) in right.items())) % MOD\\n\\tif not left:\\n\\t\\treturn rightSum\\n\\tleftSum = sum((v * pow(P, k, MOD) for (k, v) in left.items())) % MOD\\n\\treturn (leftSum - rightSum) % MOD\\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\nT = int(input())\\nfor t in range(T):\\n\\t(N, P) = [int(x) for x in input().split()]\\n\\tK = [int(x) for x in input().split()]\\n\\tans = solve(N, P, K)\\n\\tprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to divide a set of numbers p^{k_i} into two subsets such that the absolute difference between the sums of the subsets is minimized. The result needs to be returned modulo 10^9 + 7.\\n- Identifying Core Algorithm: The core idea is to balance the two sets by iteratively assigning elements to either set. Using a Counter data structure can help efficiently track the counts of each k_i and manage the balancing process. Special handling is required to calculate the values p^{k_i} modulo the specified constant.\\n- Addressing Modulo Operations: Make sure to apply the modulo operator after each arithmetic operation to prevent overflow and adhere to the problem's requirement.\\n- Handling Edge Cases: Account for cases where p = 1 or when all k_i are identical. Optimize by using appropriate data structures and logic to efficiently balance the sets and calculate the minimum difference.\\n- Implementation Details: Keep track of numbers assigned to the 'left' and 'right' sets. If a number appears in both, remove it. Iterate and add elements to the appropriate sides until balanced. If any numbers remain, calculate the difference between the sums of both sets.\",\n  \"LLM Questions\": [\n    \"How do you minimize the absolute difference between two sums of disjoint sets?\",\n    \"What are the potential overflow issues with large numbers and how do you address them in your code?\",\n    \"How does the choice of data structure impact the performance of your algorithm, and what are the specific advantages of using a Counter in this context?\",\n    \"What are the edge cases for this problem, such as when p = 1 or when the input values are all the same, and how do you handle these cases in your code?\",\n    \"How do you calculate p^{k_i} efficiently, especially with large exponents, and ensure that the result is always modulo 10^9 + 7?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"To minimize the absolute difference, try to balance the sums of the elements in each set. Start by sorting the elements and iteratively placing each element in the set with the smaller current sum.\",\n    \"Overflow can be prevented by using the modulo operator (%). Perform all arithmetic operations modulo 10^9 + 7 to keep the values within the acceptable range.\",\n    \"A Counter allows you to efficiently keep track of the number of occurrences of each k_i value. It provides fast lookups and updates for managing the set balancing process.\",\n    \"When p = 1, the result is simply the number of input values modulo 2. When the input values are all the same, the sets can be created such that their sizes differ by at most one, thus ensuring the difference is small. These scenarios require special handling to optimize the code.\",\n    \"Efficiently calculate p^{k_i} using the power function with modulo, pow(p, k_i, 10**9 + 7), which computes the power modulo 10^9 + 7 directly. This avoids large intermediate results and keeps the computation efficient.\"\n  ]\n}\n```"