"```json\n{\n  \"Coding Problem\": \"In the advanced algorithm class, n2 students sit in n rows and n columns. One day, a professor who teaches this subject comes into the class, asks the shortest student in each row to lift up his left hand, and the tallest student in each column to lift up his right hand. What is the height of the student whose both hands are up ? The student will become a target for professor\u2019s questions.\\n\\nGiven the size of the class, and the height of the students in the class, you have to print the height of the student who has both his hands up in the class.\\n\\n\\n\\nInput\\n\\nThe input will consist of several cases. the first line of each case will be n(0 < n < 100), the number of rows and columns in the class. It will then be followed by a n-by-n matrix, each row of the matrix appearing on a single line. Note that the elements of the matrix may not be necessarily distinct. The input will be terminated by the case n = 0.\\n\\nOutput\\n\\nFor each input case, you have to print the height of the student in the class whose both hands are up. If there is no such student, then print 0 for that case.\\n\\nExample\\n\\nInput\\n\\n3\\n1 2 3\\n4 5 6\\n7 8 9\\n3\\n1 2 3\\n7 8 9\\n4 5 6\\n0\\n\\n\\nOutput\\n\\n7\\n7\",\n  \"Ground Truth Solution\": \"import sys\\nwhile True:\\n\\tn = int(sys.stdin.readline().rstrip())\\n\\tif n == 0:\\n\\t\\tbreak\\n\\tstudents = []\\n\\tfor i in range(n):\\n\\t\\tstudents.append(list(map(int, sys.stdin.readline().rstrip().split(' '))))\\n\\ts_list = [[min(row) == s for s in row] for row in students]\\n\\tt_list = [[max(col) == s for s in col] for col in zip(*students)]\\n\\tret = [0]\\n\\tfor (i, data) in enumerate(zip(s_list, zip(*t_list))):\\n\\t\\tfor (j, d) in enumerate(zip(*data)):\\n\\t\\t\\tif all(d):\\n\\t\\t\\t\\tret.append(students[i][j])\\n\\tprint(max(ret))\",\n  \"LLM CoT Steps Breakdown\": \"- Understand the problem: The problem asks us to find a student who is the shortest in their row AND the tallest in their column. If no such student exists, we should output 0.\\n- Handle input: The input consists of multiple test cases, each starting with the size 'n' of the class (n x n matrix of student heights). The input ends when n=0. We need to read the input matrix for each test case.\\n- Find the shortest in each row: For each row, find the minimum height.\\n- Find the tallest in each column: For each column, find the maximum height.\\n- Identify the target student(s): Iterate through the matrix. A student is a target if they are the minimum in their row AND the maximum in their column. Store the heights of such students.\\n- Handle no target student: If no student satisfies the condition, the height is 0.\\n- Output the height: Print the height of the target student. If there are multiple target students, print the height of any one of them (based on the example outputs, it appears to be printing one of them, even if more than one student qualifies). If no target student exists, output 0.\",\n  \"LLM Questions\": [\n    \"What does it mean for a student to be the 'shortest in their row' and the 'tallest in their column' simultaneously?\",\n    \"How should I handle the case where there are multiple students who meet both criteria (shortest in row AND tallest in column)?\",\n    \"What should the output be if no student meets both criteria?\",\n    \"How should I structure my code to handle multiple test cases until n = 0?\",\n    \"What data structures should I use to store the student heights efficiently?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"It means that among all students in that student's row, their height is the minimum. And, among all students in that student's column, their height is the maximum.\",\n    \"Based on the example outputs, it is sufficient to output the height of any one of the students meeting the criteria. We don't need to find all such students or handle them in a specific way beyond selecting one.\",\n    \"The output should be 0.\",\n    \"I should use a 'while' loop that continues as long as 'n' is not equal to 0. Inside the loop, I should read the input for the current test case, process it, and print the output.\",\n    \"A 2D list (list of lists) or a NumPy array is suitable for storing the student heights. A 2D list is simpler to work with in this case.\"\n  ]\n}\n```"