"```json\n{\n  \"Coding Problem\": \"Let's call two strings s and t anagrams of each other if it is possible to rearrange symbols in the string s to get a string, equal to t.\\n\\nLet's consider two strings s and t which are anagrams of each other. We say that t is a reducible anagram of s if there exists an integer k \u2265 2 and 2k non-empty strings s_1, t_1, s_2, t_2, ..., s_k, t_k that satisfy the following conditions:\\n\\n  1. If we write the strings s_1, s_2, ..., s_k in order, the resulting string will be equal to s; \\n  2. If we write the strings t_1, t_2, ..., t_k in order, the resulting string will be equal to t; \\n  3. For all integers i between 1 and k inclusive, s_i and t_i are anagrams of each other. \\n\\n\\n\\nIf such strings don't exist, then t is said to be an irreducible anagram of s. Note that these notions are only defined when s and t are anagrams of each other.\\n\\nFor example, consider the string s =  \\\"gamegame\\\". Then the string t =  \\\"megamage\\\" is a reducible anagram of s, we may choose for example s_1 =  \\\"game\\\", s_2 =  \\\"gam\\\", s_3 =  \\\"e\\\" and t_1 =  \\\"mega\\\", t_2 =  \\\"mag\\\", t_3 =  \\\"e\\\":\\n\\n<image>\\n\\nOn the other hand, we can prove that t =  \\\"memegaga\\\" is an irreducible anagram of s.\\n\\nYou will be given a string s and q queries, represented by two integers 1 \u2264 l \u2264 r \u2264 |s| (where |s| is equal to the length of the string s). For each query, you should find if the substring of s formed by characters from the l-th to the r-th has at least one irreducible anagram.\\n\\nInput\\n\\nThe first line contains a string s, consisting of lowercase English characters (1 \u2264 |s| \u2264 2 \u22c5 10^5).\\n\\nThe second line contains a single integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries.\\n\\nEach of the following q lines contain two integers l and r (1 \u2264 l \u2264 r \u2264 |s|), representing a query for the substring of s formed by characters from the l-th to the r-th.\\n\\nOutput\\n\\nFor each query, print a single line containing \\\"Yes\\\" (without quotes) if the corresponding substring has at least one irreducible anagram, and a single line containing \\\"No\\\" (without quotes) otherwise.\\n\\nExamples\\n\\nInput\\n\\n\\naaaaa\\n3\\n1 1\\n2 4\\n5 5\\n\\n\\nOutput\\n\\n\\nYes\\nNo\\nYes\\n\\n\\nInput\\n\\n\\naabbbbbbc\\n6\\n1 2\\n2 4\\n2 2\\n1 9\\n5 7\\n3 5\\n\\n\\nOutput\\n\\n\\nNo\\nYes\\nYes\\nYes\\nNo\\nNo\",\n  \"Ground Truth Solution\": \"s = input()\\nmp = [[0 for i in range(26)] for _ in range(len(s))]\\nfor i in range(len(s)):\\n\\tmp[i][ord(s[i]) - ord('a')] += 1\\n\\tif i > 0:\\n\\t\\tfor j in range(26):\\n\\t\\t\\tmp[i][j] += mp[i - 1][j]\\nfor _ in range(int(input())):\\n\\t(l, r) = map(int, input().split())\\n\\tsc = 0\\n\\tfor i in range(26):\\n\\t\\tt = mp[r - 1][i]\\n\\t\\tif l > 1:\\n\\t\\t\\tt -= mp[l - 2][i]\\n\\t\\tif t:\\n\\t\\t\\tsc += 1\\n\\tif s[l - 1] != s[r - 1] or l == r or sc >= 3:\\n\\t\\tprint('Yes')\\n\\telse:\\n\\t\\tprint('No')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem defines reducible and irreducible anagrams. A reducible anagram can be split into smaller anagram pairs. The task is to determine if a substring has at least one irreducible anagram.\\n- Identifying Key Conditions for Irreducibility: A substring has an irreducible anagram if it cannot be broken down into smaller anagram pairs. This typically happens when the substring has different characters or is very short.\\n- Devising a Strategy: We need to analyze each substring given by the queries. The conditions that guarantee an irreducible anagram are:\\n  1. The substring has length 1 (l == r).\\n  2. The substring's first and last characters are different (s[l-1] != s[r-1]).\\n  3. The substring has at least three distinct characters.\\n- Developing an Efficient Implementation: Using prefix sums to efficiently compute character counts for each substring, we can check the distinct character count. Then implement the conditions above.\",\n  \"LLM Questions\": [\n    \"What is the definition of an irreducible anagram, and how does it differ from a reducible one?\",\n    \"Can you explain the condition that guarantees an irreducible anagram exists for a given substring?\",\n    \"How can prefix sums optimize the calculation of character frequencies within substrings?\",\n    \"What edge cases need to be considered to determine if an irreducible anagram is possible?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"An irreducible anagram cannot be split into smaller pairs of anagrams, while a reducible anagram can.\",\n    \"A substring has an irreducible anagram if it has length 1, its first and last character differ or the number of distinct characters is greater than or equal to 3.\",\n    \"Prefix sums allow calculating the frequency of characters in a substring by subtracting the prefix sum up to the start of the substring from the prefix sum up to the end, providing an O(1) calculation for each character's count.\",\n    \"The edge cases are substrings of length 1 and substrings that contain only one distinct character repeated multiple times (e.g., 'aaaa'). Also, short substrings like 'aa' don't have irreducible anagrams.\"\n  ]\n}\n```"