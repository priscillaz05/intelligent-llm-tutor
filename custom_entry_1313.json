"```json\n{\n  \"Coding Problem\": \"Valeric and Valerko missed the last Euro football game, so they decided to watch the game's key moments on the Net. They want to start watching as soon as possible but the connection speed is too low. If they turn on the video right now, it will \\\"hang up\\\" as the size of data to watch per second will be more than the size of downloaded data per second.\\n\\nThe guys want to watch the whole video without any pauses, so they have to wait some integer number of seconds for a part of the video to download. After this number of seconds passes, they can start watching. Waiting for the whole video to download isn't necessary as the video can download after the guys started to watch.\\n\\nLet's suppose that video's length is c seconds and Valeric and Valerko wait t seconds before the watching. Then for any moment of time t0, t \u2264 t0 \u2264 c + t, the following condition must fulfill: the size of data received in t0 seconds is not less than the size of data needed to watch t0 - t seconds of the video.\\n\\nOf course, the guys want to wait as little as possible, so your task is to find the minimum integer number of seconds to wait before turning the video on. The guys must watch the video without pauses.\\n\\nInput\\n\\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.\\n\\nOutput\\n\\nPrint a single number \u2014 the minimum integer number of seconds that Valeric and Valerko must wait to watch football without pauses.\\n\\nExamples\\n\\nInput\\n\\n4 1 1\\n\\n\\nOutput\\n\\n3\\n\\n\\nInput\\n\\n10 3 2\\n\\n\\nOutput\\n\\n5\\n\\n\\nInput\\n\\n13 12 1\\n\\n\\nOutput\\n\\n1\\n\\nNote\\n\\nIn the first sample video's length is 1 second and it is necessary 4 units of data for watching 1 second of video, so guys should download 4 \u00b7 1 = 4 units of data to watch the whole video. The most optimal way is to wait 3 seconds till 3 units of data will be downloaded and then start watching. While guys will be watching video 1 second, one unit of data will be downloaded and Valerik and Valerko will have 4 units of data by the end of watching. Also every moment till the end of video guys will have more data then necessary for watching.\\n\\nIn the second sample guys need 2 \u00b7 10 = 20 units of data, so they have to wait 5 seconds and after that they will have 20 units before the second second ends. However, if guys wait 4 seconds, they will be able to watch first second of video without pauses, but they will download 18 units of data by the end of second second and it is less then necessary.\",\n  \"Ground Truth Solution\": \"from math import ceil\\n(a, b, c) = map(int, input().split())\\nt = (a * c - c * b) / b\\nprint(ceil(t))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding the minimum waiting time `t` such that at any time `t0` between `t` and `t + c`, the downloaded data `b * t0` is greater than or equal to the data needed to watch the video `a * (t0 - t)`.\\n- Simplifying the Condition: The condition `b * t0 >= a * (t0 - t)` can be rearranged to find `t`. Specifically, `b*t0 >= a*t0 - a*t` becomes `a*t >= a*t0 - b*t0` or `a*t >= t0 * (a-b)`. Since we want this to be true for ALL t0 in [t, t+c], the worst case is t0 = t+c. Therefore `a*t >= (t+c)*(a-b)` or `a*t >= t*(a-b) + c*(a-b)` which simplifies to `t*(a - (a-b)) >= c*(a-b)` or `t*b >= c*(a-b)` or `t >= c*(a-b)/b`.\\n- Calculating the Waiting Time: Calculate the value of `c * (a - b) / b`.  Since `t` has to be an integer number of seconds, take the ceiling of the calculated value.\\n- Implementing the Solution: Read the input values `a`, `b`, and `c`. Calculate `t = c * (a - b) / b`. Output the ceiling of `t`.\",\n  \"LLM Questions\": [\n    \"What is the core condition that must be satisfied at any time during the video watching, and how can it be mathematically expressed?\",\n    \"How can you rearrange the inequality to isolate the waiting time `t` on one side?\",\n    \"Since the condition must be true for all times between `t` and `t + c`, which specific time should you consider to guarantee the condition holds for all other times?\",\n    \"Once you have an expression for `t`, what operation must you perform on the result to ensure it meets the problem's integer requirement?\",\n    \"Given the input values, how would you translate the derived formula into code to find the minimum waiting time?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The data downloaded should always be greater than or equal to the data needed to watch. This can be expressed as b*t0 >= a*(t0 - t), where t0 is any time between t and t+c.\",\n    \"Rearrange the inequality b*t0 >= a*(t0 - t) to isolate t: t >= t0 * (a-b)/a . Further rearrange to isolate t >= c*(a-b)/b\",\n    \"Consider the time t0 = t+c because that would represent the maximal amount of data the viewer will have to watch relative to the amount of downloaded data. Ensuring the condition holds at t+c guarantees it holds at all times between t and t+c.\",\n    \"Because the waiting time t must be an integer number of seconds, take the ceiling of the result.\",\n    \"Read in the values a, b, and c from the input.  Then apply the formula from math import ceil. t = ceil(c * (a - b) / b). Print t.\"\n  ]\n}\n```"