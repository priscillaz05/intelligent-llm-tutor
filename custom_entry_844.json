"```json\n{\n  \"Coding Problem\": \"Timur's grandfather gifted him a chessboard to practice his chess skills. This chessboard is a grid $a$ with $n$ rows and $m$ columns with each cell having a non-negative integer written on it.\\n\\nTimur's challenge is to place a bishop on the board such that the sum of all cells attacked by the bishop is maximal. The bishop attacks in all directions diagonally, and there is no limit to the distance which the bishop can attack. Note that the cell on which the bishop is placed is also considered attacked. Help him find the maximal sum he can get.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains a single integer $t$ ($1 \\\\le t \\\\le 1000$) \u2014 the number of test cases. The description of test cases follows.\\n\\nThe first line of each test case contains the integers $n$ and $m$ ($1 \\\\le n \\\\le 200$, $1 \\\\leq m \\\\leq 200$).\\n\\nThe following $n$ lines contain $m$ integers each, the $j$-th element of the $i$-th line $a_{ij}$ is the number written in the $j$-th cell of the $i$-th row $(0\\\\leq a_{ij} \\\\leq 10^6)$\\n\\nIt is guaranteed that the sum of $n\\\\cdot m$ over all test cases does not exceed $4\\\\cdot10^4$.\\n\\n\\n-----Output-----\\n\\nFor each test case output a single integer, the maximum sum over all possible placements of the bishop.\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n4 4\\n1 2 2 1\\n2 4 2 4\\n2 2 3 1\\n2 4 2 4\\n2 1\\n1\\n0\\n3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n3 3\\n0 1 1\\n1 0 1\\n1 1 0\\nOutput\\n20\\n1\\n5\\n3\\n\\n\\n-----Note-----\",\n  \"Ground Truth Solution\": \"(I, R) = (lambda : map(int, input().split()), range)\\nfor _ in R(*I()):\\n\\t(n, m) = I()\\n\\ta = [[*I()] for _ in R(n)]\\n\\tl = [0] * (m + n)\\n\\tr = l[:]\\n\\tfor i in R(n):\\n\\t\\tfor j in R(m):\\n\\t\\t\\tb = a[i][j]\\n\\t\\t\\tl[i - j + m - 1] += b\\n\\t\\t\\tr[i + j] += b\\n\\tprint(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks us to find the maximum sum of cells attacked by a bishop placed on an $n \\\\times m$ chessboard. A bishop attacks diagonally in all four directions, and the cell it is placed on is also considered attacked.\\n- Identifying Key Components: We need to iterate through all possible positions for the bishop. For each position, we need to calculate the sum of the values of all cells attacked by the bishop.\\n- Optimization Strategy: Since the chessboard is relatively small ($n, m \\\\le 200$), we can precompute the sums of diagonals to optimize the calculation of the sum of attacked cells for each bishop position.\\n- Algorithmic Steps:\\n  1. Read the input and store the chessboard in a 2D array.\\n  2. Create two arrays, `l` and `r`, to store the sums of the two diagonals. `l` stores the sums of the left diagonals (top-left to bottom-right), and `r` stores the sums of the right diagonals (top-right to bottom-left).\\n  3. Iterate through each cell of the chessboard.\\n  4. For each cell (i, j), calculate the indices of the left and right diagonals that the cell belongs to. The left diagonal index is `i - j + m - 1`, and the right diagonal index is `i + j`.\\n  5. Update the `l` and `r` arrays by adding the value of the current cell to the corresponding diagonal sums.\\n  6. After calculating the diagonal sums, iterate through each cell (i, j) again to compute the sum of attacked cells when the bishop is placed at (i, j).\\n  7. The sum of attacked cells is `l[i - j + m - 1] + r[i + j] - a[i][j]`. We subtract `a[i][j]` because the cell (i, j) is counted twice (once in the left diagonal and once in the right diagonal).\\n  8. Keep track of the maximum sum encountered so far.\\n  9. Output the maximum sum.\",\n  \"LLM Questions\": [\n    \"How can the sum of each diagonal be calculated efficiently?\",\n    \"How do you handle cases where the bishop is at the edge of the board?\",\n    \"How is the attack range of the bishop calculated?\",\n    \"Why is it necessary to subtract a[i][j] when calculating the total sum for a given cell?\",\n    \"What are the time and space complexities of your proposed algorithm?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The sum of each diagonal can be efficiently precomputed by iterating through each cell and adding the value of the cell to the sum of the corresponding diagonal in separate arrays. This precomputation avoids repeatedly calculating diagonal sums for each possible bishop position.\",\n    \"When the bishop is at the edge of the board, the diagonals it attacks will be shorter. The diagonal sum arrays already account for this, so no special handling is needed.\",\n    \"The bishop can attack any cell along the diagonals originating from its position, without any distance limitations. The key is to identify all cells that share a diagonal with the bishop's location.\",\n    \"The cell where the bishop is placed is counted twice - once in the left diagonal and once in the right diagonal. To avoid double-counting, we must subtract the value of the cell itself from the total sum of attacked cells.\",\n    \"The time complexity is O(n*m) because we iterate through the entire board multiple times (to calculate diagonal sums and to compute the max sum). The space complexity is O(n+m) due to the diagonal sum arrays.\"\n  ]\n}\n```"