"```json\n{\n  \"Coding Problem\": \"You have just purchased a new mobile phone and you want to call all of your relatives to brag about your new phone. You have N relatives. You will talk to i^th relative for exactly Ti minutes. Each minute costs you 1 dollar . However, your relatives are generous. Hence after the conversation, they will add a recharge of Xi dollars in your mobile. Initially, you have M dollars balance in your mobile phone.\\nFind the minimum value of M, that you must have initially, in your phone, so that you don't run out of balance during any of the call (encounter negative balance). \\n\\nNote : You can call relatives in any order. Each relative will be called exactly once.\\n\\nINPUT\\nThe first line will contain N, the number of relatives. Next N lines will have two space separated integers, \\\"Ti Xi\\\" (quotes for clarity), representing call duration with the i^th relative and the amount of recharge you will get from that relative after the conversation.\\n\\nOUTPUT\\nOutput a single integer M, the minimum required initial balance in your mobile phone.\\n\\nCONSTRAINTS\\n1 \u2264 N,X,T  \u2264 10^5 \\n\\nSAMPLE INPUT\\n2\\n1 1\\n2 1\\n\\nSAMPLE OUTPUT\\n2\",\n  \"Ground Truth Solution\": \"n=int(input())\\nppairs=[]\\nnpairs=[]\\nfor i in range(n):\\n\\tti,xi=list(map(int,input().split()))\\n\\tif (xi-ti)>=0:\\n\\t\\tppairs.append([ti,xi])\\n\\telse:\\n\\t\\tnpairs.append([ti,xi])\\n\\nppairs.sort(reverse=True,key=lambda x: (x[1]+0.0)/x[0])\\n#print ppairs\\ninvest=0\\nprofit=0\\nfor i in ppairs:\\n\\tif profit<i[0]:\\n\\t\\tinvest+=i[0]-profit\\n\\t\\tprofit=i[1]\\n\\telse:\\n\\t\\tprofit=profit-i[0]+i[1]\\n#print profit ,invest\\nnpairs.sort(reverse=True,key=lambda x: ((x[1]),(-x[0])))\\nfor i in npairs:\\n\\tif profit<i[0]:\\n\\t\\tinvest+=i[0]-profit\\n\\t\\tprofit=i[1]\\n\\telse:\\n\\t\\tprofit=profit-i[0]+i[1]\\n\\nprint(invest)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to find the minimum initial balance `M` needed to make calls to `N` relatives such that the balance never goes negative. Each call costs `Ti` dollars and provides a recharge of `Xi` dollars.\\n- Identifying Key Insight: The order in which relatives are called affects the minimum initial balance. We need to determine an optimal calling order.\\n- Strategic Grouping: Divide relatives into two groups: those who give a recharge greater than the call cost (`Xi > Ti`) and those who give a recharge less than or equal to the call cost (`Xi <= Ti`). These groups need to be handled differently.\\n- Positive Recharge Group Ordering: Sort relatives with `Xi > Ti` in descending order of recharge-to-cost ratio (Xi/Ti). This is because we want to maximize the recharge obtained relative to the time spent.\\n- Negative Recharge Group Ordering: Sort relatives with `Xi <= Ti` in descending order of recharge (Xi) primarily, then ascending order of call duration (Ti) to minimize the risk of negative balance. This strategy aims to call relatives who recharge more first and call shorter duration calls earlier.\\n- Initial Balance Calculation: Simulate the calling process in the determined order. Keep track of the current balance and the maximum deficit encountered during the calls. The required initial balance `M` is the absolute value of the maximum deficit.\",\n  \"LLM Questions\": [\n    \"How does the order of calling relatives impact the minimum required initial balance?\",\n    \"How should you group relatives based on the recharge they provide relative to the call cost?\",\n    \"For relatives providing a recharge greater than the call cost, what ordering strategy minimizes the initial balance needed?\",\n    \"For relatives providing a recharge less than or equal to the call cost, what ordering strategy minimizes the initial balance needed?\",\n    \"How do you calculate the minimum required initial balance after determining the optimal calling order?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The order significantly affects the minimum balance because some calls increase the balance while others decrease it. An optimized order prevents the balance from becoming excessively negative, reducing the necessary initial balance.\",\n    \"Relatives should be grouped into those with recharge exceeding call cost (Xi > Ti) and those with recharge less than or equal to call cost (Xi <= Ti). These groups are sorted differently.\",\n    \"Order them in descending order of recharge-to-cost ratio (Xi/Ti). This helps in maximizing gains early on, creating a buffer for subsequent calls.\",\n    \"Order them in descending order of recharge (Xi) and then ascending order of call duration (Ti). Prioritize relatives providing larger recharges and shorter calls to mitigate negative impacts.\",\n    \"Simulate the calls according to the determined order, tracking the current balance. The minimum required initial balance is the maximum deficit (most negative balance encountered) during the simulation.\"\n  ]\n}\n```"