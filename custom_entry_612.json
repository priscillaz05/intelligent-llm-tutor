"```json\n{\n  \"Coding Problem\": \"You have an m x n grid, with m and n both even. Each cell has a tile. The tile has two faces - one is black, and one is white. These tiles may be flipped. However, if you flip a tile, all other tiles in its row and column also get flipped. You start of with an initial configuration of black and white tiles. Your goal is to flip tiles so that you end up with the entire board being white. What is the minimum number of flips required?\\nConstraints:\\n\\nm , n \u2264 1000, both even\\nInput:\\n\\nThe first line has two space separated integers - m and n.\\nThe next m lines have n-length strings of W's and B's - W implying a white tile and B implying a black tile in the initial configuration.\\nOutput:\\n\\nOutput a single integer - the minimum number of flips that can make all cells white. If there is no possible way, print -1.\\n\\nSAMPLE INPUT\\n4 4\\nWBBW\\nWBBW\\nWWWW\\nWBBW\\n\\nSAMPLE OUTPUT\\n2\\n\\nExplanation\\n\\nFlipping the tiles at (3, 2) and (3, 3) is the minimal way to make the whole board white (1-based indexing).\",\n  \"Ground Truth Solution\": \"m, n = list(map(int, input().split()))\\ny_cnt = [0] * m\\nx_cnt = [0] * n\\nblack = set()\\nfor y in range(m):\\n\\ts = input()\\n\\tfor x, c in enumerate(s):\\n\\t\\tif c == \\\"B\\\":\\n\\t\\t\\tx_cnt[x] += 1\\n\\t\\t\\ty_cnt[y] += 1\\n\\t\\t\\tblack.add((x, y))\\n\\nans = 0\\nfor y in range(m):\\n\\tfor x in range(n):\\n\\t\\tans += (x_cnt[x] + y_cnt[y] + ((x, y) in black)) & 1\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: Recognize that flipping a tile also flips all tiles in its row and column. Understand the goal of making the entire board white with the minimum number of flips.\\n- Identifying Constraints: Note that the dimensions m and n are even. This constraint is crucial because it dictates how the flips propagate.\\n- Selecting an Algorithmic Strategy: Realize that each flip affects the counts of black tiles in both a row and a column. This suggests a counting-based approach to determine the final state.\\n- Implementation Details: Keep track of how many black tiles are in each row and column initially. Use bitwise operations to efficiently determine the effect of each flip on the tile color. Iterate over each cell to determine if a flip is needed.\",\n  \"LLM Questions\": [\n    \"What does it mean when a tile is flipped, and how does this impact the colors of other tiles on the board?\",\n    \"How does the even constraint of m and n influence the possible solutions, and why is it important?\",\n    \"What is the core strategy to minimize the number of flips while ensuring the entire board becomes white?\",\n    \"How can you efficiently track the number of black tiles in each row and column to determine whether a tile needs to be flipped?\",\n    \"Given the effect of a flip on the entire row and column, how can you determine the final minimum number of flips required to achieve the all-white board?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"When a tile is flipped, it changes its color from black to white, or vice versa. Simultaneously, all other tiles in the same row and column also have their colors flipped.\",\n    \"The even constraint of m and n allows each row and column to be flipped an even number of times each. This allows each row/col to cancel out it's affects on the final result.\",\n    \"The main strategy involves understanding how flips affect the tile colors in both the row and column, then using an appropriate calculation to decide whether a tile needs to be flipped to make the entire board white with the minimum number of flips.\",\n    \"To efficiently track black tiles, you can use auxiliary arrays to store counts for rows and columns. Also using a set helps determine initial black tiles\",\n    \"By analyzing the combined effect of row and column flips on each tile and counting the number of flips, you can find the minimum number of flips required.\"\n  ]\n}\n```"