"```json\n{\n  \"Coding Problem\": \"The year of 2012 is coming...\\n\\nAccording to an ancient choradrican legend in this very year, in 2012, Diablo and his brothers Mephisto and Baal will escape from hell, and innumerable hordes of demons will enslave the human world. But seven brave heroes have already gathered on the top of a mountain Arreat to protect us mere mortals from the effect of this terrible evil.\\n\\nThe seven great heroes are: amazon Anka, barbarian Chapay, sorceress Cleo, druid Troll, necromancer Dracul, paladin Snowy and a professional hit girl Hexadecimal. Heroes already know how much experience will be given for each of the three megabosses: a for Mephisto, b for Diablo and c for Baal.\\n\\nHere's the problem: heroes are as much as seven and megabosses are only three! Then our heroes decided to split into three teams, where each team will go to destroy their own megaboss. Each team member will receive a <image> of experience, rounded down, where x will be the amount of experience for the killed megaboss and y \u2014 the number of people in the team.\\n\\nHeroes do not want to hurt each other's feelings, so they want to split into teams so that the difference between the hero who received the maximum number of experience and the hero who received the minimum number of experience were minimal. Since there can be several divisions into teams, then you need to find the one in which the total amount of liking in teams were maximum.\\n\\nIt is known that some heroes like others. But if hero p likes hero q, this does not mean that the hero q likes hero p. No hero likes himself.\\n\\nThe total amount of liking in teams is the amount of ordered pairs (p, q), such that heroes p and q are in the same group, and hero p likes hero q (but it is not important if hero q likes hero p). In case of heroes p and q likes each other and they are in the same group, this pair should be counted twice, as (p, q) and (q, p).\\n\\nA team can consist even of a single hero, but it is important that every megaboss was destroyed. All heroes must be involved in the campaign against evil. None of the heroes can be in more than one team.\\n\\nIt is guaranteed that every hero is able to destroy any megaboss alone.\\n\\nInput\\n\\nThe first line contains a single non-negative integer n (0 \u2264 n \u2264 42) \u2014 amount of liking between the heroes. Next n lines describe liking in the form \\\"p likes q\\\", meaning that the hero p likes the hero q (p \u2260  q). Every liking is described in the input exactly once, no hero likes himself.\\n\\nIn the last line are given three integers a, b and c (1 \u2264 a, b, c \u2264 2\u00b7109), separated by spaces: the experience for Mephisto, the experience for Diablo and experience for Baal.\\n\\nIn all the pretests, except for examples from the statement, the following condition is satisfied: a = b = c.\\n\\nOutput\\n\\nPrint two integers \u2014 the minimal difference in the experience between two heroes who will receive the maximum and minimum number of experience points, and the maximal total amount of liking in teams (the number of friendships between heroes that end up in one team).\\n\\nWhen calculating the second answer, the team division should satisfy the difference-minimizing contraint. I.e. primary you should minimize the difference in the experience and secondary you should maximize the total amount of liking.\\n\\nExamples\\n\\nInput\\n\\n3\\nTroll likes Dracul\\nDracul likes Anka\\nSnowy likes Hexadecimal\\n210 200 180\\n\\n\\nOutput\\n\\n30 3\\n\\n\\nInput\\n\\n2\\nAnka likes Chapay\\nChapay likes Anka\\n10000 50 50\\n\\n\\nOutput\\n\\n1950 2\\n\\nNote\\n\\nA note to first example: it the first team should be Dracul, Troll and Anka, in the second one Hexadecimal and Snowy, and in the third Cleo \u0438 Chapay.\",\n  \"Ground Truth Solution\": \"from itertools import product, permutations, combinations\\nn = int(input())\\nnames = {}\\nnex = 0\\nmama = 128\\nliking = [0] * mama\\nlikes = [[0] * 7 for _ in range(7)]\\n\\ndef getName(name):\\n\\tglobal nex\\n\\tif name in names:\\n\\t\\treturn names[name]\\n\\tnames[name] = nex\\n\\tnex += 1\\n\\treturn names[name]\\nfor _ in range(n):\\n\\t(a, b, c) = input().split()\\n\\tlikes[getName(a)][getName(c)] = 1\\nbosses = [int(x) for x in input().split()]\\npart = set()\\npart.add((0, 0, 0))\\ndipart = 10 ** 10\\nfor i in range(1, 4):\\n\\tfor j in range(i, 7):\\n\\t\\tk = 7 - i - j\\n\\t\\tif k < j:\\n\\t\\t\\tcontinue\\n\\t\\tfor per in permutations(bosses):\\n\\t\\t\\taa = (per[0] // i, per[1] // j, per[2] // k)\\n\\t\\t\\tdifi = max(aa) - min(aa)\\n\\t\\t\\tif difi < dipart:\\n\\t\\t\\t\\tdipart = difi\\n\\t\\t\\t\\tpart = set()\\n\\t\\t\\t\\tpart.add((i, j, k))\\n\\t\\t\\telif difi == dipart:\\n\\t\\t\\t\\tpart.add((i, j, k))\\nfor (i, j) in product(range(7), repeat=2):\\n\\tif likes[i][j] == 0:\\n\\t\\tcontinue\\n\\tmask = 1 << i | 1 << j\\n\\tfor k in range(mama):\\n\\t\\tif k & mask == mask:\\n\\t\\t\\tliking[k] += 1\\nnums = list(range(7))\\n\\ndef tonum(ite):\\n\\tr = 0\\n\\tfor nu in ite:\\n\\t\\tr |= 1 << nu\\n\\treturn r\\nbea = 0\\nfor (a, b, c) in part:\\n\\tfor pera in combinations(range(7), a):\\n\\t\\tlefta = [x for x in nums if x not in pera]\\n\\t\\tfor perb in combinations(lefta, b):\\n\\t\\t\\tperc = [x for x in lefta if x not in perb]\\n\\t\\t\\tsusu = liking[tonum(pera)] + liking[tonum(perb)] + liking[tonum(perc)]\\n\\t\\t\\tif susu > bea:\\n\\t\\t\\t\\tbea = susu\\nprint(dipart, bea)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires dividing seven heroes into three teams to defeat three megabosses. Each hero receives experience points based on the boss defeated and the number of heroes in their team (experience/team_size). The goal is to minimize the difference between the maximum and minimum experience received by any hero and, secondarily, maximize the total 'liking' within the teams.\\n- Identifying Constraints: All heroes must be assigned to exactly one team. Each team is assigned to a unique boss. A team can consist of one or more heroes. The number of teams is exactly three, one for each boss. The experience gained is integer division (floor division).\\n- Developing a Strategy: The problem can be solved using brute force given the small number of heroes. We need to consider all possible team compositions (number of heroes in each team), then all possible hero assignments to each team size, and then all liking scores for each split. For each valid assignment, calculate the difference between max and min experience and, if it's the best so far (minimum), keep track of the total liking score. If tied in minimum difference, compare with best maximum liking score.\\n- Detailing Implementation: 1. Parse input to get the number of likes and the liking relationships. 2. Store the experience points for each megaboss. 3. Iterate through all possible team sizes such that a + b + c = 7 (where a, b, and c are team sizes and must be non-zero). Also, consider permutations of the bosses associated with those team sizes. 4. For each set of team sizes, iterate through all combinations of assigning heroes to those teams. 5. Calculate the experience received by each hero. 6. Calculate the difference between the maximum and minimum experience received. 7. Calculate the total 'liking' score within the teams. 8. Update the best result if the difference is smaller or the liking score is higher when the difference is equal.\",\n  \"LLM Questions\": [\n    \"How can we represent the 'liking' relationship between heroes, and how do we calculate the 'liking' score for a given team?\",\n    \"What is the best approach for exploring all possible team assignments given the constraint that all heroes must be assigned to one and only one team?\",\n    \"How do we handle cases where the division operation results in floating-point numbers (since experience is an integer)?\",\n    \"If there are multiple team divisions resulting in the same minimal difference, how should we break the tie and choose the optimal configuration?\",\n    \"What are the edge cases that need to be considered during the parsing and computation steps of the program?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"We can represent the 'liking' relationship using a 2D array (or a dictionary/hashmap) where `likes[p][q] = 1` if hero p likes hero q. The 'liking' score for a team is the sum of `likes[p][q]` for all pairs of heroes p and q within the team.\",\n    \"Since the number of heroes is small, a brute-force approach is feasible. We can iterate through all combinations of team sizes and then, for each team size configuration, iterate through all combinations of hero assignments using `itertools.combinations`.\",\n    \"Experience is divided using floor division (integer division), which truncates the decimal part.\",\n    \"In case of a tie in the minimal difference, we choose the team division that maximizes the total 'liking' score. The 'liking' score for all three teams is calculated as the sum of the 'liking' score of each team.\",\n    \"Edge cases include empty input for the liking relationships, or when the number of heroes is very small. The condition that each boss must be attacked should always be met.\"\n  ]\n}\n```"