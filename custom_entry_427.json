"```json\n{\n  \"Coding Problem\": \"The kingdom of the snakes is an NxN grid. Their most-valued possession is a huge collection of poison, which is stored in the central KxK grid. It is guaranteed that both N and K are odd. What we mean by 'central' is this: suppose in the NxN grid, (i, j) refers to the cell in the i-th row and j-th column and (1,1) refers to the top-left corner and (N,N) refers to the bottom-right corner. Then the poison is stored in the KxK square whose top-left corner is ( (N - K)/2 + 1, (N - K)/2 + 1 ).\\n\\nBut there are thieves who want to steal the poison. They cannot enter the NxN grid, but they can shoot arrows from outside. These arrows travel across a row (from left to right, or right to left), or across a column (top to bottom or bottom to top) in a straight line. If the arrow enters the KxK grid, some of the poison will stick to the arrow, and if it exits the NxN grid after that, the thieves will have successfully stolen some of the poison.\\nAs the King of the snakes, you want to thwart these attempts. You know that the arrows will break and stop if they hit a snake's scaly skin, but won't hurt the snakes. There are some snakes already guarding the poison. Each snake occupies some consecutive cells in a straight line inside the NxN grid. That is, they are either part of a row, or part of a column. Note that there can be intersections between the snakes.  A configuration of snakes is 'safe', if the thieves cannot steal poison. That is, no matter which row or column they shoot arrows from, either the arrow should hit a snake and stop (this can happen even after it has entered and exited the KxK grid), or it shouldn't ever enter the KxK grid.\\nThe King has other duties for the snakes, and hence wants to remove as many snakes as possible from this configuration, such that the remaining configuration is still 'safe'. Help him find the minimum number of snakes he needs to leave behind to protect the poison.\\n\\n-----Input-----\\n- The first line contains a single integer, T, the number of testcases.\\n- The first line of each testcase contains three integers: N, K and M, where N is the size of the entire square grid, K is the size of the square containing the poison, and M is the number of initial snakes.\\n- M lines follow, the i-th of which contains four integers: HXi, HYi, TXi, TYi. (HXi, HYi) is the cell which contains the head of the i-th snake. (TXi, TYi) is the cell which contains the tail of the i-th snake. It is guaranteed that both these cells will either lie in the same row, or same column. And hence the cells in between them, including these two cells, represents the i-th snake.\\n\\n-----Output-----\\n- For each testcase, output a single integer in a new line: The minimum number of the snakes that the king can keep and still protect the poison. If it is not possible to protect the poison even with all the snakes, output -1.\\n\\n-----Constraints-----\\n- 1 \u2264 T \u2264 4\\n- 3 \u2264 N \u2264 109\\n- 1 \u2264 K \u2264 N-2\\n- Both N and K will be odd integers\\n- 1 \u2264 M \u2264 105\\n- 1 \u2264 HXi, HYi, TXi, TYi \u2264 N\\n- It is guaranteed that at least one of (HXi = TXi), and (HYi = TYi) will be true for all i\\n- None of the cells in the KxK grid will be occupied by any snake\\n\\n-----Example-----\\nInput:\\n2\\n7 3 7\\n1 1 6 1\\n1 2 3 2\\n5 2 5 2\\n2 4 2 6\\n6 2 6 4\\n5 6 5 7\\n7 1 7 4\\n7 3 7\\n1 1 6 1\\n1 2 3 2\\n5 2 5 2\\n2 6 2 6\\n6 2 6 4\\n5 6 5 7\\n7 1 7 4\\n\\nOutput:\\n3\\n-1\\n\\n-----Explanation-----\\nThe first example corresponds to:\\n\\nNote that the top-left corner cell of the NxN grid is by definition, (1,1). The inner square contains the poison, and the seven snakes are shown in different colours. The green snake is the 1st snake in the input.\\nWe can remove all but 3 snakes and protect the poison. One such configuration is this:\\n\\nYou can check that no arrow can enter the inner poison square and exit the outer square without hitting a snake. Hence is it safe. Also, you cannot do this with fewer snakes. Hence 3 is the answer.\\nThe second testcase corresponds to:\\n\\nYou can check that even with all the snakes, this is not a safe configuration, because the thieves can shoot an arrow down the 5th column, and they can steal poison. Hence, the answer is -1.\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\t(n, k, m) = list(map(int, input().split()))\\n\\trow_s = []\\n\\tcol_s = []\\n\\tfor _ in range(m):\\n\\t\\t(h_x, h_y, t_x, t_y) = list(map(int, input().split()))\\n\\t\\tif h_x == t_x:\\n\\t\\t\\tif h_x < (n - k) // 2 + 1 or h_x > (n - k) // 2 + k:\\n\\t\\t\\t\\tcol_s.append([min(h_y, t_y), max(h_y, t_y)])\\n\\t\\t\\telse:\\n\\t\\t\\t\\trow_s.append([h_x, h_x])\\n\\t\\tif h_y == t_y:\\n\\t\\t\\tif h_y < (n - k) // 2 + 1 or h_y > (n - k) // 2 + k:\\n\\t\\t\\t\\trow_s.append([min(h_x, t_x), max(h_x, t_x)])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcol_s.append([h_y, h_y])\\n\\trow_s.sort()\\n\\tcol_s.sort()\\n\\tposs = True\\n\\tif len(col_s) == 0 or len(row_s) == 0:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tnext_row = (n - k) // 2 + 1\\n\\ti = 0\\n\\tcount_row = 0\\n\\twhile i < len(row_s):\\n\\t\\tmax_next = next_row\\n\\t\\tif next_row < row_s[i][0]:\\n\\t\\t\\tposs = False\\n\\t\\t\\tbreak\\n\\t\\twhile i < len(row_s) and row_s[i][0] <= next_row:\\n\\t\\t\\tmax_next = max(max_next, row_s[i][1] + 1)\\n\\t\\t\\ti += 1\\n\\t\\tnext_row = max_next\\n\\t\\tcount_row += 1\\n\\t\\tif next_row > (n - k) // 2 + k:\\n\\t\\t\\tbreak\\n\\t\\tif next_row < (n - k) // 2 + k and i >= len(row_s):\\n\\t\\t\\tposs = False\\n\\t\\t\\tbreak\\n\\tnext_col = (n - k) // 2 + 1\\n\\ti = 0\\n\\tcount_col = 0\\n\\twhile i < len(col_s):\\n\\t\\tmax_next = next_col\\n\\t\\tif next_col < col_s[i][0]:\\n\\t\\t\\tposs = False\\n\\t\\t\\tbreak\\n\\t\\twhile i < len(col_s) and col_s[i][0] <= next_col:\\n\\t\\t\\tmax_next = max(max_next, col_s[i][1] + 1)\\n\\t\\t\\ti += 1\\n\\t\\tnext_col = max_next\\n\\t\\tcount_col += 1\\n\\t\\tif next_col > (n - k) // 2 + k:\\n\\t\\t\\tbreak\\n\\t\\tif next_col < (n - k) // 2 + k and i >= len(col_s):\\n\\t\\t\\tposs = False\\n\\t\\t\\tbreak\\n\\tprint(count_col + count_row if poss else -1)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The problem describes a grid with a central KxK area containing poison. Snakes are placed on the grid and can block arrows. The goal is to determine the minimum number of snakes needed to protect the poison.\\n- Identifying Key Safety Requirement: A configuration is 'safe' if all arrows shot from the outside are blocked by snakes before they can enter and exit the KxK poison area. This means that every row and every column that intersects the poison square must have at least one snake blocking it.\\n- Choosing a Strategy: Iterate through the given snakes and categorize them into two groups: row snakes (snakes in rows that do not intersect the KxK area) and column snakes (snakes in columns that do not intersect the KxK area). Then sort each of these collections. Determine if it's possible to guard the poison area with the provided snakes. Check whether the snakes can cover the area. If not, return -1. Otherwise, return the minimum number of snakes needed.\\n- Implementation Details: Determine the row and column indices that define the boundaries of the KxK square. Check, for each arrow path across the poison square, if a snake lies on that path. Maintain a count of rows and columns covered by a snake outside the bounds of the KxK square. If the poison square is not fully covered by the snakes then return -1, else return the count.\",\n  \"LLM Questions\": [\n    \"What condition must be met for an arrow shot to be considered blocked by a snake?\",\n    \"Expected Answer: The arrow must hit a snake inside the NxN grid, and cannot both enter and exit the KxK grid without hitting a snake.\",\n    \"How do you define the boundaries of the KxK poison square in terms of row and column indices?\",\n    \"Expected Answer: The top-left corner of the KxK square is at ((N - K)/2 + 1, (N - K)/2 + 1). Therefore, it spans from row/column (N - K)/2 + 1 to (N - K)/2 + K.\",\n    \"How do you categorize the snakes based on their positions relative to the KxK poison square, and why is this categorization important?\",\n    \"Expected Answer: Categorize snakes into 'row snakes' (horizontal snakes outside KxK's rows) and 'column snakes' (vertical snakes outside KxK's columns). This is important because it helps to focus on protecting rows and columns that could allow arrow access to the poison square.\",\n    \"How do you efficiently check if the existing snakes are sufficient to protect the poison, and how do you determine the minimum number of snakes required?\",\n    \"Expected Answer: Check whether all possible row and column shots at the KxK square intersect with at least one snake. Maintain counts of snakes blocking in those directions, and if some directions are not blockable, return -1, otherwise return the blocking snake counts.\",\n    \"What edge cases need to be considered, and how might they affect the outcome?\",\n    \"Expected Answer: An edge case is when the number of snakes is insufficient, and you cannot protect all possible row and column shots. In this case, the program should return -1. Also, there is the possibility of empty snake lists.\"\n  ],\n  \"Expected Answers to LLM Questions\": {\n    \"What condition must be met for an arrow shot to be considered blocked by a snake?\": \"The arrow must hit a snake inside the NxN grid, and cannot both enter and exit the KxK grid without hitting a snake.\",\n    \"How do you define the boundaries of the KxK poison square in terms of row and column indices?\": \"The top-left corner of the KxK square is at ((N - K)/2 + 1, (N - K)/2 + 1). Therefore, it spans from row/column (N - K)/2 + 1 to (N - K)/2 + K.\",\n    \"How do you categorize the snakes based on their positions relative to the KxK poison square, and why is this categorization important?\": \"Categorize snakes into 'row snakes' (horizontal snakes outside KxK's rows) and 'column snakes' (vertical snakes outside KxK's columns). This is important because it helps to focus on protecting rows and columns that could allow arrow access to the poison square.\",\n    \"How do you efficiently check if the existing snakes are sufficient to protect the poison, and how do you determine the minimum number of snakes required?\": \"Check whether all possible row and column shots at the KxK square intersect with at least one snake. Maintain counts of snakes blocking in those directions, and if some directions are not blockable, return -1, otherwise return the blocking snake counts.\",\n    \"What edge cases need to be considered, and how might they affect the outcome?\": \"An edge case is when the number of snakes is insufficient, and you cannot protect all possible row and column shots. In this case, the program should return -1. Also, there is the possibility of empty snake lists.\"\n  }\n}\n```"