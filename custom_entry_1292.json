"```json\n{\n  \"Coding Problem\": \"Recently Polycarp started to develop a text editor that works only with correct bracket sequences (abbreviated as CBS). \\n\\nNote that a bracket sequence is correct if it is possible to get a correct mathematical expression by adding \\\"+\\\"-s and \\\"1\\\"-s to it. For example, sequences \\\"(())()\\\", \\\"()\\\" and \\\"(()(()))\\\" are correct, while \\\")(\\\", \\\"(()\\\" and \\\"(()))(\\\" are not. Each bracket in CBS has a pair. For example, in \\\"(()(()))\\\":  1st bracket is paired with 8th,  2d bracket is paired with 3d,  3d bracket is paired with 2d,  4th bracket is paired with 7th,  5th bracket is paired with 6th,  6th bracket is paired with 5th,  7th bracket is paired with 4th,  8th bracket is paired with 1st. \\n\\nPolycarp's editor currently supports only three operations during the use of CBS. The cursor in the editor takes the whole position of one of the brackets (not the position between the brackets!). There are three operations being supported:  \u00abL\u00bb\u00a0\u2014 move the cursor one position to the left,  \u00abR\u00bb\u00a0\u2014 move the cursor one position to the right,  \u00abD\u00bb\u00a0\u2014 delete the bracket in which the cursor is located, delete the bracket it's paired to and all brackets between them (that is, delete a substring between the bracket in which the cursor is located and the one it's paired to). \\n\\nAfter the operation \\\"D\\\" the cursor moves to the nearest bracket to the right (of course, among the non-deleted). If there is no such bracket (that is, the suffix of the CBS was deleted), then the cursor moves to the nearest bracket to the left (of course, among the non-deleted). \\n\\nThere are pictures illustrated several usages of operation \\\"D\\\" below. [Image] \\n\\nAll incorrect operations (shift cursor over the end of CBS, delete the whole CBS, etc.) are not supported by Polycarp's editor.\\n\\nPolycarp is very proud of his development, can you implement the functionality of his editor?\\n\\n\\n-----Input-----\\n\\nThe first line contains three positive integers n, m and p (2 \u2264 n \u2264 500 000, 1 \u2264 m \u2264 500 000, 1 \u2264 p \u2264 n)\u00a0\u2014 the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even.\\n\\nIt is followed by the string of n characters \\\"(\\\" and \\\")\\\" forming the correct bracket sequence.\\n\\nThen follow a string of m characters \\\"L\\\", \\\"R\\\" and \\\"D\\\"\u00a0\u2014 a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non-empty.\\n\\n\\n-----Output-----\\n\\nPrint the correct bracket sequence, obtained as a result of applying all operations to the initial sequence.\\n\\n\\n-----Examples-----\\nInput\\n8 4 5\\n(())()()\\nRDLD\\n\\nOutput\\n()\\n\\nInput\\n12 5 3\\n((()())(()))\\nRRDLD\\n\\nOutput\\n(()(()))\\n\\nInput\\n8 8 8\\n(())()()\\nLLLLLLDD\\n\\nOutput\\n()()\\n\\n\\n\\n-----Note-----\\n\\nIn the first sample the cursor is initially at position 5. Consider actions of the editor:  command \\\"R\\\"\u00a0\u2014 the cursor moves to the position 6 on the right;  command \\\"D\\\"\u00a0\u2014 the deletion of brackets from the position 5 to the position 6. After that CBS takes the form (())(), the cursor is at the position 5;  command \\\"L\\\"\u00a0\u2014 the cursor moves to the position 4 on the left;  command \\\"D\\\"\u00a0\u2014 the deletion of brackets from the position 1 to the position 4. After that CBS takes the form (), the cursor is at the position 1. \\n\\nThus, the answer is equal to ().\",\n  \"Ground Truth Solution\": \"def main():\\n\\t(n, m, p) = list(map(int, input().split()))\\n\\t(xlat, l, s, ll, lr) = ([0] * n, [], input(), list(range(-1, n)), list(range(1, n + 2)))\\n\\tp -= 1\\n\\tfor (i, c) in enumerate(s):\\n\\t\\tif c == '(': \\n\\t\\t\\tl.append(i)\\n\\t\\telse:\\n\\t\\t\\tj = l.pop()\\n\\t\\t\\txlat[i] = j\\n\\t\\t\\txlat[j] = i\\n\\tfor c in input():\\n\\t\\tif c == 'D':\\n\\t\\t\\tif s[p] == '(': \\n\\t\\t\\t\\tp = xlat[p]\\n\\t\\t\\tq = ll[xlat[p]]\\n\\t\\t\\tp = lr[p]\\n\\t\\t\\t(ll[p], lr[q]) = (q, p)\\n\\t\\t\\tif p == n:\\n\\t\\t\\t\\tp = ll[p]\\n\\t\\telse:\\n\\t\\t\\tp = (lr if c == 'R' else ll)[p]\\n\\tq = p\\n\\twhile p != -1:\\n\\t\\tl.append(s[p])\\n\\t\\tp = ll[p]\\n\\tl.reverse()\\n\\tdel l[-1]\\n\\twhile q != n:\\n\\t\\tl.append(s[q])\\n\\t\\tq = lr[q]\\n\\tprint(''.join(l))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem simulates a text editor for correct bracket sequences (CBS). The editor supports moving the cursor left (L) or right (R), and deleting (D) the bracket at the cursor along with its matching bracket and everything in between.\\n- Data Structures: Represent the CBS as a string and maintain auxiliary data structures to efficiently find matching brackets and adjacent brackets after deletions.  A stack can be used to find matching bracket pairs. Doubly linked list to track immediate left and right bracket after deletions.\\n- Algorithm for Deletion:  When deleting, find the matching bracket, remove the range between the current bracket and its match from the sequence (virtually, using linked list manipulation), and update the cursor position to the next available bracket on the right, or left if no right bracket exists.\\n- Handling Cursor Movement: Moving the cursor left or right involves updating the cursor position based on the linked list. If deletion removes the cursor's target position, special checks must be done to determine next position based on given rules.\\n- Edge Cases and Boundary Conditions: Consider the edge cases where the cursor is at the beginning or end of the CBS, or when deletion results in an empty sequence. Make sure the cursor movement logic handles these cases gracefully.\",\n  \"LLM Questions\": [\n    \"How can we efficiently find the matching bracket for a given bracket in the sequence?\",\n    \"What data structures can be used to efficiently track the remaining brackets and their positions after deletions?\",\n    \"How should the cursor position be updated after a deletion operation, considering both the right and left directions?\",\n    \"What are the edge cases that need to be considered when moving the cursor left or right?\",\n    \"How can the algorithm be optimized to handle large input sizes efficiently?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A stack can be used. When encountering an opening bracket '(', push its index onto the stack. When encountering a closing bracket ')', pop the index from the stack. The popped index is the matching bracket's index.\",\n    \"A doubly linked list is very effective to represent the bracket sequence and manage the left and right neighbors of each bracket node after deletions. Each node in the list corresponds to a bracket in the sequence.\",\n    \"After deleting a range of brackets, the cursor should move to the next available bracket to the right. If no bracket exists on right side (i.e. deleting last suffix), the cursor should move to nearest remaining bracket to the left.\",\n    \"Edge cases include the cursor at the beginning or end of the sequence, where moving left or right would be an invalid operation or deleting operations results to empty sequence. \",\n    \"Using a doubly linked list and precomputing the matching bracket pairs using stack allows for efficient deletion and cursor movement in O(1) or O(log n) time per operation. This would handle large input sizes efficiently.\"\n  ]\n}\n```"