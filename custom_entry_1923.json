"```json\n{\n  \"Coding Problem\": \"Chef has an integer N. He repeats the following operation until N becomes 1.\\n\\n- Chef chooses an integer X such that X > 1 and X is a divisor of N and then divides N by X (the new value of N becomes N/X). If X is even, Chef gets A points otherwise he gets B points\\n\\nCan you find the maximum points Chef can get if he performs the operations optimally?\\n\\n------ Input Format ------ \\n\\n- First line will contain T, number of testcases. Then the testcases follow.\\n- Each testcase contains of a single line of input containing three integers N, A, B.\\n\\n------ Output Format ------ \\n\\nFor each testcase, output in a single line the maximum points Chef can get.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 2\\\\cdot10^{3}$\\n$2 \u2264 N \u2264 10^{9}$\\n$-10^{3}\u2264 A, B \u2264 10^{3}$\\n\\n----- Sample Input 1 ------ \\n4\\n10 2 3\\n15 5 -2\\n12 2 3\\n8 -1 0\\n\\n----- Sample Output 1 ------ \\n5\\n-2\\n7\\n-1\\n\\n----- explanation 1 ------ \\nTest case $1$: First Chef divides $N = 10$ by $2$ and gets $2$ points and then divides by $5$ and thus gets $3$ points. Hence Chef gets a total of $2 + 3 = 5$ points.\\n\\nTest case $2$: Chef divides $N$ by $15$. Hence he gets $-2$ points.\",\n  \"Ground Truth Solution\": \"def snek(n):\\n\\teven = 0\\n\\todd = 0\\n\\twhile n % 2 == 0:\\n\\t\\tn //= 2\\n\\t\\teven += 1\\n\\tfor j in range(3, int(n ** 0.5) + 1, 2):\\n\\t\\tif n % j == 0:\\n\\t\\t\\twhile n % j == 0:\\n\\t\\t\\t\\tn //= j\\n\\t\\t\\t\\todd += 1\\n\\tif n != 1:\\n\\t\\todd += 1\\n\\treturn [even, odd]\\nt = int(input())\\nfor i in range(t):\\n\\t(n, a, b) = map(int, input().split())\\n\\tans = snek(n)\\n\\tif a < 0 and b < 0:\\n\\t\\tif n % 2 == 0:\\n\\t\\t\\tprint(a)\\n\\t\\telse:\\n\\t\\t\\tprint(b)\\n\\telif a < 0 and b >= 0:\\n\\t\\tif ans[0] > 0:\\n\\t\\t\\tprint(ans[1] * b + a)\\n\\t\\telse:\\n\\t\\t\\tprint(ans[1] * b)\\n\\telif a >= 0 and b < 0:\\n\\t\\tif ans[0] > 0:\\n\\t\\t\\tprint(ans[0] * a)\\n\\t\\telse:\\n\\t\\t\\tprint(b)\\n\\telse:\\n\\t\\tprint(ans[0] * a + ans[1] * b)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: We need to maximize points obtained by dividing N by its divisors until N becomes 1. Dividing by even divisors gives A points, and odd divisors give B points.\\n- Identifying Constraints: N is between 2 and 10^9. A and B can be negative, zero, or positive.\\n- Strategic Approach: To maximize the points, we should consider the signs of A and B. If both are positive, we should divide by all even factors first, then odd factors. If both are negative, dividing by a smaller factor will yield better results. If A is positive and B is negative, maximize even divisions. If A is negative and B is positive, maximize odd divisions.\\n- Handling Negative Values: If both A and B are negative, dividing just once by N is an option, if N is prime.\\n- Factoring Optimization:  We should precompute the number of even and odd divisors of N to make efficient decisions.\",\n  \"LLM Questions\": [\n    \"How do the signs of A and B influence the optimal strategy for maximizing the score?\",\n    \"Expected Answer: If A and B are both positive, we should maximize the usage of both by first dividing by 2 until it is not divisible by 2, then by odd factors. If both are negative, then minimizing divisions can be optimal, especially if N is odd. If A is positive and B is negative, we want to maximize the number of even divisions. And if A is negative and B is positive, we want to maximize the number of odd divisions.\",\n    \"How can you efficiently find the number of even and odd divisors of N without iterating through all possible divisors?\",\n    \"Expected Answer: We can find the number of even divisors by repeatedly dividing N by 2 until it's no longer divisible by 2. The number of times we divide is the count of even divisors. For odd divisors, we can iterate from 3 up to the square root of N, checking for divisibility. After dividing out all such factors, if what remains of N is greater than 1, that remainder is also a prime factor.\",\n    \"What edge cases should we consider regarding the values of N, A, and B to arrive at the correct solution?\",\n    \"Expected Answer: Edge cases include when N is a prime number, or when N has only one divisor apart from 1. Also, A and B can be zero, which impacts how we maximize the sum.\",\n    \"If A is positive and B is negative, and N has no even divisors, what is the optimal strategy?\",\n    \"Expected Answer: In this scenario, we should divide N by its smallest odd divisor to minimize the negative impact of B.\",\n    \"If both A and B are negative, how should we proceed?\",\n    \"Expected Answer: In this case, the goal is to minimize the number of operations. If N is even, we should divide it by 2 once. If N is odd, we should divide it by N itself.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If A and B are both positive, we should maximize the usage of both by first dividing by 2 until it is not divisible by 2, then by odd factors. If both are negative, then minimizing divisions can be optimal, especially if N is odd. If A is positive and B is negative, we want to maximize the number of even divisions. And if A is negative and B is positive, we want to maximize the number of odd divisions.\",\n    \"We can find the number of even divisors by repeatedly dividing N by 2 until it's no longer divisible by 2. The number of times we divide is the count of even divisors. For odd divisors, we can iterate from 3 up to the square root of N, checking for divisibility. After dividing out all such factors, if what remains of N is greater than 1, that remainder is also a prime factor.\",\n    \"Edge cases include when N is a prime number, or when N has only one divisor apart from 1. Also, A and B can be zero, which impacts how we maximize the sum.\",\n    \"In this scenario, we should divide N by its smallest odd divisor to minimize the negative impact of B.\",\n    \"In this case, the goal is to minimize the number of operations. If N is even, we should divide it by 2 once. If N is odd, we should divide it by N itself.\"\n  ]\n}\n```"