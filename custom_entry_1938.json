"```json\n{\n  \"Coding Problem\": \"Chirag wanted to prepare a Programmin round. He's already got one problem and he wants to set a time limit (TL) on it.\\n\\nChirag has written n correct solutions. For each correct solution, he knows its running time (in seconds). Chirag has also wrote m wrong solutions and for each wrong solution he knows its running time (in seconds).\\n\\nLet's suppose that Chirag will set v seconds TL in the problem. Then we can say that a solution passes the system testing if its running time is at most v seconds. We can also say that a solution passes the system testing with some \\\"extra\\\" time if for its running time, a seconds, an inequality 2a\\u2009\\u2264\\u2009v holds.\\n\\nAs a result, Chirag decided to set v seconds TL, that the following conditions are met:\\n\\nv is a positive integer;\\nall correct solutions pass the system testing;\\nat least one correct solution passes the system testing with some \\\"extra\\\" time;\\nall wrong solutions do not pass the system testing;\\nvalue v is minimum among all TLs, for which points 1, 2, 3, 4 hold.\\n\\nHelp Chirag and find the most suitable TL or else state that such TL doesn't exist.\\nInput\\n\\nThe first line contains two integers n, m (1\\u2009\\u2264\\u2009n, m\\u2009\\u2264\\u2009100). The second line contains n space-separated positive integers a1, a2, ..., an (1\\u2009\\u2264\\u2009ai\\u2009\\u2264\\u2009100) \\u2014 the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b1, b2, ..., bm (1\\u2009\\u2264\\u2009bi\\u2009\\u2264\\u2009100) \\u2014 the running time of each of m wrong solutions in seconds.\\nOutput\\n\\nIf there is a valid TL value, print it. Otherwise, print -1.\\n\\nSAMPLE INPUT\\n3 6\\n4 5 2\\n8 9 6 10 7 11\\n\\nSAMPLE OUTPUT\\n5\",\n  \"Ground Truth Solution\": \"'''\\n# Read input from stdin and provide input before running code\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\nn = list(map(int,input().split()))\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\na.sort()\\nb.sort()\\nmagic = max(2*a[0], a[len(a)-1]);\\nif magic<b[0]:\\n\\tprint(magic)\\nelse:\\n\\tprint(-1)\",\n  \"LLM CoT Steps Breakdown\": \"- Read and parse input: The code reads the number of correct and wrong solutions, their respective running times, and stores them in appropriate data structures (lists).\\n- Sort correct and wrong solutions: The code sorts both the correct and wrong solutions' running times in ascending order. Sorting the correct solutions is crucial to find the minimum running time, while sorting the wrong solutions helps to find the minimum time a wrong solution takes.\\n- Determine the minimum possible time limit: Based on the problem constraints, calculate the minimum possible time limit (magic) by considering two factors: double the minimum running time of correct solutions and the maximum running time of correct solutions.\\n- Check against wrong solutions: Verify if the calculated minimum time limit is less than the minimum running time of wrong solutions. This ensures that all wrong solutions are rejected.\\n- Output the result: If the minimum time limit is valid (less than the minimum time of wrong solutions), print the minimum time limit. Otherwise, output -1, indicating that no valid time limit exists.\",\n  \"LLM Questions\": [\n    \"What are the constraints for a valid time limit (TL) according to the problem description?\",\n    \"How can you determine the minimum possible TL given the correct solutions' running times?\",\n    \"How does the code ensure that at least one correct solution passes with 'extra' time?\",\n    \"Why is sorting the running times of correct and wrong solutions necessary?\",\n    \"What condition must be met to ensure that all wrong solutions do not pass the system testing?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A valid TL (v) must be a positive integer, all correct solutions must pass (ai <= v), at least one correct solution must pass with 'extra' time (2*min(ai) <= v), and all wrong solutions must fail (bi > v). Also, v must be the minimum possible value that satisfies all these conditions.\",\n    \"The minimum possible TL can be determined by taking the maximum of double the minimum running time of the correct solutions (2 * min(ai)) and the maximum running time of the correct solutions (max(ai)).\",\n    \"The condition 2*min(ai) <= v ensures that at least one correct solution passes with 'extra' time, specifically the solution with the minimum running time.  Since the TL is the maximum of 2*min(ai) and max(ai), if max(ai) is chosen, the minimum correct solution still satisfies the 'extra' time constraint.\",\n    \"Sorting allows easy identification of the minimum running time among correct solutions (for the 'extra' time constraint) and the maximum running time among correct solutions (to ensure all correct solutions pass).  Sorting the wrong solutions allows for quickly checking if any wrong solution could pass with the determined TL.\",\n    \"The calculated TL (v) must be strictly less than the minimum running time of the wrong solutions (min(bi)). This guarantees that all wrong solutions will fail the system testing.\"\n  ]\n}\n```"