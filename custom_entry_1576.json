"```json\n{\n  \"Coding Problem\": \"Farmer Feb has three fields with potatoes planted in them. He harvested x potatoes from the first field, y potatoes from the second field and is yet to harvest potatoes from the third field. Feb is very superstitious and believes that if the sum of potatoes he harvests from the three fields is a prime number (http://en.wikipedia.org/wiki/Prime_number), he'll make a huge profit. Please help him by calculating for him the minimum number of potatoes that if harvested from the third field will make the sum of potatoes prime. At least one potato should be harvested from the third field.\\n\\n-----Input-----\\nThe first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contain 2 integers separated by single space: x and y.\\n\\n-----Output-----\\nFor each test case, output a single line containing the answer.\\n\\n-----Constraints-----\\n- 1 \u2264 T \u2264 1000\\n- 1 \u2264 x \u2264 1000\\n- 1 \u2264 y \u2264 1000\\n\\n-----Example-----\\nInput:\\n2\\n1 3\\n4 3\\n\\nOutput:\\n1\\n4\\n\\n-----Explanation-----\\n\\nIn example case 1: the farmer harvested a potato from the first field and 3 potatoes from the second field. The sum is 4. If he is able to harvest a potato from the third field, that will make the sum 5, which is prime. Hence the answer is 1(he needs one more potato to make the sum of harvested potatoes prime.)\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor i in range(t):\\n\\t(x, y) = map(int, input().split())\\n\\ta = x + y + 1\\n\\tb = 1\\n\\twhile a > 0:\\n\\t\\tfor j in range(2, a - 1):\\n\\t\\t\\tif a % j == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tprint(b)\\n\\t\\t\\tbreak\\n\\t\\ta += 1\\n\\t\\tb += 1\",\n  \"LLM CoT Steps Breakdown\": \"- Understand the Problem: The problem requires finding the smallest number of potatoes to harvest from the third field such that the total number of potatoes from all three fields is a prime number. At least one potato must be harvested from the third field.\\n- Devise a Plan: Given x and y, we start with the sum x + y + 1 (since at least one potato must be harvested). Then check if this sum is prime. If it is, we are done. If not, we increment the sum by 1 and check again, continuing until we find a prime number. Keep track of how many potatoes we needed to add.\\n- Implement Primality Test: A simple primality test is to check divisibility from 2 to sum - 1.  Optimization isn't strictly necessary given the constraints.\\n- Consider Edge Cases: The constraints x, y >= 1 ensures x+y >= 2.  Since we are adding at least one, the total sum will always be >= 3. No specific edge cases need special treatment beyond what is given in the constraints.\",\n  \"LLM Questions\": [\n    \"How do you efficiently check if a number is prime, given the constraints?\",\n    \"What is the starting number of potatoes harvested from the third field and why?\",\n    \"What should the program output if the initial sum of x, y and 1 is already a prime number?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Given the constraints of the problem, checking divisibility from 2 up to sum - 1 is sufficient. For larger numbers, one might consider checking up to the square root of the number, but that optimization is not needed here.\",\n    \"The starting number of potatoes harvested from the third field is 1, because the problem states that at least one potato should be harvested from the third field. So, we begin our search for a prime number from x + y + 1.\",\n    \"If the initial sum of x + y + 1 is already a prime number, then the program should output 1, because we only need to harvest 1 potato from the third field.\"\n  ]\n}\n```"