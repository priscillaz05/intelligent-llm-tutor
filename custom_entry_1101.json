"```json\n{\n  \"Coding Problem\": \"A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\\n\\nLet $p$ be any permutation of length $n$. We define the fingerprint $F(p)$ of $p$ as the sorted array of sums of adjacent elements in $p$. More formally,\\n\\n$$F(p)=\\\\mathrm{sort}([p_1+p_2,p_2+p_3,\\\\ldots,p_{n-1}+p_n]).$$\\n\\nFor example, if $n=4$ and $p=[1,4,2,3],$ then the fingerprint is given by $F(p)=\\\\mathrm{sort}([1+4,4+2,2+3])=\\\\mathrm{sort}([5,6,5])=[5,5,6]$.\\n\\nYou are given a permutation $p$ of length $n$. Your task is to find a different permutation $p'$ with the same fingerprint. Two permutations $p$ and $p'$ are considered different if there is some index $i$ such that $p_i \\\\ne p'_i$.\\n\\n\\n-----Input-----\\n\\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\\\le t \\\\le 668$). Description of the test cases follows.\\n\\nThe first line of each test case contains a single integer $n$ ($2\\\\le n\\\\le 100$) \u00a0\u2014 the length of the permutation.\\n\\nThe second line of each test case contains $n$ integers $p_1,\\\\ldots,p_n$ ($1\\\\le p_i\\\\le n$). It is guaranteed that $p$ is a permutation.\\n\\n\\n-----Output-----\\n\\nFor each test case, output $n$ integers $p'_1,\\\\ldots, p'_n$ \u2014 a permutation such that $p'\\\\ne p$ and $F(p')=F(p)$.\\n\\nWe can prove that for every permutation satisfying the input constraints, a solution exists.\\n\\nIf there are multiple solutions, you may output any.\\n\\n\\n-----Example-----\\nInput\\n3\\n2\\n1 2\\n6\\n2 1 6 5 4 3\\n5\\n2 4 3 1 5\\n\\nOutput\\n2 1\\n1 2 5 6 3 4\\n3 1 5 2 4\\n\\n\\n-----Note-----\\n\\nIn the first test case, $F(p)=\\\\mathrm{sort}([1+2])=[3]$.\\n\\nAnd $F(p')=\\\\mathrm{sort}([2+1])=[3]$.\\n\\nIn the second test case, $F(p)=\\\\mathrm{sort}([2+1,1+6,6+5,5+4,4+3])=\\\\mathrm{sort}([3,7,11,9,7])=[3,7,7,9,11]$.\\n\\nAnd $F(p')=\\\\mathrm{sort}([1+2,2+5,5+6,6+3,3+4])=\\\\mathrm{sort}([3,7,11,9,7])=[3,7,7,9,11]$.\\n\\nIn the third test case, $F(p)=\\\\mathrm{sort}([2+4,4+3,3+1,1+5])=\\\\mathrm{sort}([6,7,4,6])=[4,6,6,7]$.\\n\\nAnd $F(p')=\\\\mathrm{sort}([3+1,1+5,5+2,2+4])=\\\\mathrm{sort}([4,6,7,6])=[4,6,6,7]$.\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\tinput()\\n\\tprint(*[*map(int, input().split())][::-1])\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires finding a permutation p' different from the input permutation p, such that both permutations have the same fingerprint. The fingerprint is defined as the sorted array of sums of adjacent elements in the permutation.\\n- Identifying Key Properties: Reversing a permutation often results in the same fingerprint. This is because the sums of adjacent elements will still contain the same values, just in a different order. Sorting these sums will result in the same fingerprint.\\n- Considering Edge Cases:  The problem statement guarantees a solution exists for all valid inputs, so edge cases relating to the existence of a solution don't need explicit handling.\\n- Selecting an Algorithmic Strategy: The simplest approach is to reverse the given permutation. This is highly likely to produce a different permutation with the same fingerprint. Other valid permutations might exist, but this approach is straightforward and efficient.\",\n  \"LLM Questions\": [\n    \"What is a permutation and what constraints apply to it in this problem?\",\n    \"How is the fingerprint of a permutation defined?\",\n    \"Why does reversing a permutation result in a permutation with the same fingerprint?\",\n    \"Are there cases where reversing a permutation yields the same permutation? Does this affect the validity of the approach?\",\n    \"Does the problem require finding all possible permutations with the same fingerprint or just one?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A permutation of length n is an array containing n distinct integers from 1 to n in arbitrary order.\",\n    \"The fingerprint of a permutation p is the sorted array of the sums of its adjacent elements.\",\n    \"Reversing a permutation results in the same fingerprint because the sums of adjacent elements are the same, just in reverse order. When sorted, they will be identical.\",\n    \"Yes, reversing a palindrome permutation yields the same permutation. The problem requires the permutation to be different from original one, so this approach might fail on palindrome permutations. However given the constraints of the input, reversing it always works as the problem guarantees that a solution always exists.\",\n    \"The problem only requires finding any one permutation with the same fingerprint.\"\n  ]\n}\n```"