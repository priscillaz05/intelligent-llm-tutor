"```json\n{\n  \"Coding Problem\": \"Lolek and Bolek are about to travel abroad by plane. The local airport has a special \\\"Choose Your Plane\\\" offer. The offer's conditions are as follows:\\n\\n  * it is up to a passenger to choose a plane to fly on; \\n  * if the chosen plane has x (x > 0) empty seats at the given moment, then the ticket for such a plane costs x zlotys (units of Polish currency). \\n\\n\\nThe only ticket office of the airport already has a queue of n passengers in front of it. Lolek and Bolek have not stood in the queue yet, but they are already wondering what is the maximum and the minimum number of zlotys the airport administration can earn if all n passengers buy tickets according to the conditions of this offer?\\n\\nThe passengers buy tickets in turn, the first person in the queue goes first, then goes the second one, and so on up to n-th person.\\n\\nInput\\n\\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of passengers in the queue and the number of planes in the airport, correspondingly. The next line contains m integers a1, a2, ..., am (1 \u2264 ai \u2264 1000) \u2014 ai stands for the number of empty seats in the i-th plane before the ticket office starts selling tickets.\\n\\nThe numbers in the lines are separated by a space. It is guaranteed that there are at least n empty seats in total.\\n\\nOutput\\n\\nPrint two integers \u2014 the maximum and the minimum number of zlotys that the airport administration can earn, correspondingly.\\n\\nExamples\\n\\nInput\\n\\n4 3\\n2 1 1\\n\\n\\nOutput\\n\\n5 5\\n\\n\\nInput\\n\\n4 3\\n2 2 2\\n\\n\\nOutput\\n\\n7 6\",\n  \"Ground Truth Solution\": \"(n, m) = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\nP = list(map(int, L))\\nmi = 0\\nma = 0\\nfor i in range(n):\\n\\tx = max(L)\\n\\tma += x\\n\\tL[L.index(x)] -= 1\\nfor i in range(n):\\n\\tx = min(P)\\n\\tif x == 0:\\n\\t\\tP.remove(x)\\n\\tx = min(P)\\n\\tmi += x\\n\\tP[P.index(x)] -= 1\\nprint(ma, mi)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Requirements: Realize that the problem requires calculating the maximum and minimum revenue based on passengers choosing planes with available seats. Passengers pick one after another, and the revenue equals the number of available seats on the chosen plane at that instant.\\n- Algorithmic Strategy for Maximization: To maximize revenue, each passenger should choose the plane with the most available seats at their turn. Update the number of seats on that plane after each passenger's choice and repeat this process for all n passengers.\\n- Algorithmic Strategy for Minimization: To minimize revenue, each passenger should choose the plane with the fewest available seats at their turn. If a plane runs out of seats (0 seats), exclude it from consideration in future choices. Update the number of seats on the chosen plane after each passenger's choice and repeat this process for all n passengers.\\n- Handling Edge Cases: Consider that the total number of seats is guaranteed to be at least n. Also, handle the case when a plane has no available seats left when calculating the minimum revenue. Use copies of the original seat counts to perform these calculations without modifying the original input.\",\n  \"LLM Questions\": [\n    \"How do you determine the maximum possible revenue the airport administration can earn from the passengers?\",\n    \"What is the strategy for calculating the minimum possible revenue?\",\n    \"How do you ensure that the chosen seat number is updated after each passenger buys a ticket, and what happens if a plane runs out of seats?\",\n    \"How would you handle the scenario where all seats are occupied before all the passengers have bought their tickets?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"To maximize the revenue, at each turn, a passenger should choose the plane with the maximum available seats. The revenue equals the number of seats in the chosen plane, and after the purchase, the number of seats decreases by 1.\",\n    \"To minimize revenue, at each turn, the passenger should choose the plane with the minimum available seats. The number of seats decreases by 1 after each purchase. If a plane has no seats left, it is excluded from future choices.\",\n    \"After a passenger buys a ticket, the number of seats on the chosen plane is decremented. For the minimum revenue calculation, if a plane runs out of seats, it is removed from the possible choices.\",\n    \"The problem states that the total number of empty seats is always greater than or equal to the number of passengers, so the scenario where all seats are occupied before all passengers buy a ticket will not occur.\"\n  ]\n}\n```"