"```json\n{\n  \"Coding Problem\": \"There are N people standing in a row from west to east.\\nEach person is facing east or west.\\nThe directions of the people is given as a string S of length N.\\nThe i-th person from the west is facing east if S_i = E, and west if S_i = W.\\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader.\\nHere, we do not care which direction the leader is facing.\\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\\nFind the minimum number of people who have to change their directions.\\n\\n-----Constraints-----\\n - 2 \\\\leq N \\\\leq 3 \\\\times 10^5\\n - |S| = N\\n - S_i is E or W.\\n\\n-----Input-----\\nInput is given from Standard Input in the following format:\\nN\\nS\\n\\n-----Output-----\\nPrint the minimum number of people who have to change their directions.\\n\\n-----Sample Input-----\\n5\\nWEEWW\\n\\n-----Sample Output-----\\n1\\n\\nAssume that we appoint the third person from the west as the leader.\\nThen, the first person from the west needs to face east and has to turn around.\\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1 in this case.\\nIt is not possible to have 0 people who have to change their directions, so the answer is 1.\",\n  \"Ground Truth Solution\": \"n = int(input())\\ns = input()\\ncnt = s[1:].count('E')\\nans = cnt\\nfor i in range(1, n):\\n\\tif s[i - 1] == 'W':\\n\\t\\tcnt += 1\\n\\tif s[i] == 'E':\\n\\t\\tcnt -= 1\\n\\tans = min(ans, cnt)\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The goal is to minimize the number of people who need to change direction when one person is selected as the leader, and everyone else faces the same way as the leader.\\n- Identifying Key Insights: For each person, we consider them as the leader. Count the number of people to the left facing 'W' and the number of people to the right facing 'E'.  The sum of these counts is the number of people who need to change direction if that person is the leader.\\n- Devising an Algorithm: Iterate through each person, compute the number of changes required if that person is the leader, and keep track of the minimum number of changes.\\n- Optimizing the Solution: Realize we can calculate the changes more efficiently by reusing calculations from the previous position.  Instead of recounting 'W' to the left and 'E' to the right, update the counts as the 'leader' position moves.\",\n  \"LLM Questions\": [\n    \"What is the main objective of this problem, and what are the key constraints?\",\n    \"If you were to choose a particular person as the leader, how would you determine the minimum number of people who need to change their directions?\",\n    \"How can you efficiently compute the number of direction changes required as you iterate through each possible leader position, rather than recalculating the entire count each time?\",\n    \"What is the significance of the 'E' and 'W' characters in the input string, and how do they affect your solution?\",\n    \"Are there any edge cases or special conditions you should consider when developing your solution, such as empty input or input with only one direction?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The objective is to find the minimum number of people who need to change their directions when one person is selected as the leader, and everyone else faces the same direction. The constraints include the size of N and the valid characters ('E' and 'W') in the input string.\",\n    \"For a chosen leader, count the number of people to their left facing 'W' and the number of people to their right facing 'E'. The sum is the number of direction changes needed if that person is the leader.\",\n    \"You can update the counts as you move the leader position. If the person to the left of the current leader was facing 'W', increment the number of 'W' faces to the left.  If the current leader was facing 'E', decrement the number of 'E' faces to the right. This avoids recalculating counts from scratch.\",\n    \"'E' represents a person facing east, and 'W' represents a person facing west. The counts of these characters determine how many people need to change direction depending on the leader's position.\",\n    \"There is a constraint that N >= 2, so there's no empty input to worry about. The code's logic should still work if the entire input is all 'E' or all 'W'.\"\n  ]\n}\n```"