"```json\n{\n  \"Coding Problem\": \"RedDreamer has an array $a$ consisting of $n$ non-negative integers, and an unlucky integer $T$.\\n\\nLet's denote the misfortune of array $b$ having length $m$ as $f(b)$ \u2014 the number of pairs of integers $(i, j)$ such that $1 \\\\le i < j \\\\le m$ and $b_i + b_j = T$. RedDreamer has to paint each element of $a$ into one of two colors, white and black (for each element, the color is chosen independently), and then create two arrays $c$ and $d$ so that all white elements belong to $c$, and all black elements belong to $d$ (it is possible that one of these two arrays becomes empty). RedDreamer wants to paint the elements in such a way that $f(c) + f(d)$ is minimum possible.\\n\\nFor example:\\n\\n  if $n = 6$, $T = 7$ and $a = [1, 2, 3, 4, 5, 6]$, it is possible to paint the $1$-st, the $4$-th and the $5$-th elements white, and all other elements black. So $c = [1, 4, 5]$, $d = [2, 3, 6]$, and $f(c) + f(d) = 0 + 0 = 0;  if $n = 3$, $T = 6$ and $a = [3, 3, 3]$, it is possible to paint the $1$-st element white, and all other elements black. So $c = [3]$, $d = [3, 3]$, and $f(c) + f(d) = 0 + 1 = 1. \\n\\nHelp RedDreamer to paint the array optimally!\\n\\n\\n-----Input-----\\n\\nThe first line contains one integer $t$ ($1 \\\\le t \\\\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\\n\\nThe first line of each test case contains two integers $n$ and $T$ ($1 \\\\le n \\\\le 10^5$, $0 \\\\le T \\\\le 10^9$) \u2014 the number of elements in the array and the unlucky integer, respectively. \\n\\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($0 \\\\le a_i \\\\le 10^9$) \u2014 the elements of the array. \\n\\nThe sum of $n$ over all test cases does not exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case print $n$ integers: $p_1$, $p_2$, ..., $p_n$ (each $p_i$ is either $0$ or $1$) denoting the colors. If $p_i$ is $0$, then $a_i$ is white and belongs to the array $c$, otherwise it is black and belongs to the array $d$.\\n\\nIf there are multiple answers that minimize the value of $f(c) + f(d)$, print any of them.\\n\\n\\n-----Example-----\\nInput\\n2\\n6 7\\n1 2 3 4 5 6\\n3 6\\n3 3 3\\n\\nOutput\\n1 0 0 1 1 0 \\n1 0 0\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor _ in range(t):\\n\\t(n, T) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tans = []\\n\\tb = False\\n\\tfor i in range(n):\\n\\t\\tif a[i] < T / 2:\\n\\t\\t\\tans.append(0)\\n\\t\\telif a[i] > T / 2:\\n\\t\\t\\tans.append(1)\\n\\t\\telif b:\\n\\t\\t\\tans.append(1)\\n\\t\\t\\tb = not b\\n\\t\\telse:\\n\\t\\t\\tans.append(0)\\n\\t\\t\\tb = not b\\n\\tprint(*ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the problem: The goal is to divide an array into two sub-arrays (white and black elements) such that the number of pairs that sum to T is minimized.  For elements equal to T/2, alternating colors is optimal to prevent pairs summing to T.\\n- Edge Cases and Special Conditions:  Consider cases where T is even or odd and how that influences the optimal coloring of elements equal to T/2.\\n- Algorithm selection: The optimal strategy involves coloring elements less than T/2 white and elements greater than T/2 black.  For elements equal to T/2, use an alternating coloring scheme.\\n-Implementation details: Handle input and output format. Correctly implement the coloring logic, especially the alternating coloring for elements equal to T/2.\",\n  \"LLM Questions\": [\n    \"What is the primary goal of the problem, and how is it quantified?\",\n    \"Expected Answer: The primary goal is to minimize the number of pairs in each sub-array (white and black) that sum to T.  This is quantified by f(c) + f(d) where c is the white sub-array and d is the black sub-array.\",\n    \"How should elements that are less than T/2 or greater than T/2 be colored?\",\n    \"Expected Answer: Elements less than T/2 should be colored white (0) and elements greater than T/2 should be colored black (1).\",\n    \"How should elements that are exactly equal to T/2 be colored, and why?\",\n    \"Expected Answer: Elements equal to T/2 should be colored in an alternating manner (0, 1, 0, 1, ...).  This helps minimize the number of pairs summing to T within either sub-array.\",\n    \"What needs to be done with the input to prepare it for processing, and how should the output be formatted?\",\n    \"Expected Answer: The input needs to be parsed to extract n, T, and the array elements. The output should consist of a space-separated list of 0s and 1s, representing the colors assigned to each element of the input array.\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The primary goal is to minimize the number of pairs in each sub-array (white and black) that sum to T.  This is quantified by f(c) + f(d) where c is the white sub-array and d is the black sub-array.\",\n    \"Elements less than T/2 should be colored white (0) and elements greater than T/2 should be colored black (1).\",\n    \"Elements equal to T/2 should be colored in an alternating manner (0, 1, 0, 1, ...).  This helps minimize the number of pairs summing to T within either sub-array.\",\n    \"The input needs to be parsed to extract n, T, and the array elements. The output should consist of a space-separated list of 0s and 1s, representing the colors assigned to each element of the input array.\"\n  ]\n}\n```"