"```json\n{\n  \"Coding Problem\": \"You are given a binary string S. You are allowed to perform the following operation at most once:\\nPick some [substring] of S\\nFlip all the values in this substring, i.e, convert 0 to 1 and vice versa\\n\\nFor example, if S = 1\\\\underline{00101}011, you can pick the underlined substring and flip it to obtain S = 1\\\\underline{11010}011.\\n\\nFor the substring of S consisting of all the positions from L to R, we define a function f(L, R) to be the number of 1's in this substring. For example, if S = 100101011, then f(2, 5) = 1 and f(4, 9) = 4 (the respective substrings are 0010 and 101011).\\n\\nIf you perform the given operation optimally, find the maximum possible value of\\n\\n\\\\sum_{L=1}^N \\\\sum_{R=L}^N f(L, R)\\n\\nthat can be obtained. Note that the substring flip operation can be performed at most once.\\n\\n------ Input Format ------ \\n\\n- The first line of input will contain a single integer T, denoting the number of test cases.\\n- Each test case consists of single line of input, containing a binary string S.\\n\\n------ Output Format ------ \\n\\nFor each test case, output on a new line the maximum possible value of \\\\sum_{L=1}^N \\\\sum_{R=L}^N f(L, R) that can be obtained.\\n\\n------ Constraints ------ \\n\\n$1 \u2264 T \u2264 10^{5}$\\n$1 \u2264 |S| \u2264 3\\\\cdot 10^{5}$\\n- The sum of $|S|$ over all test cases won't exceed $3\\\\cdot 10^{5}$.\\n\\n----- Sample Input 1 ------ \\n3\\n111\\n000\\n00100\\n----- Sample Output 1 ------ \\n10\\n10\\n26\\n----- explanation 1 ------ \\nTest case $1$: There is no need to apply the operation since everything is already a $1$. The answer is thus the sum of:\\n- $f(1, 1) = 1$\\n- $f(1, 2) = 2$\\n- $f(1, 3) = 3$\\n- $f(2, 2) = 1$\\n- $f(2, 3) = 2$\\n- $f(3, 3) = 1\\n\\nwhich is $10$.\\n\\nTest case $2$: Flip the entire string to obtain $111$, whose answer has been computed above.\\n\\nTest case $3$: Flip the entire string to obtain $11011$. The sum of $f(L, R)$ across all substrings is now $26$, which is the maximum possible.\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor i in range(t):\\n\\ts = input()\\n\\ta = 0\\n\\tb = 0\\n\\tc = 0\\n\\tfor j in range(len(s)):\\n\\t\\tx = (j + 1) * (len(s) - j)\\n\\t\\tif s[j] == '1':\\n\\t\\t\\ta += x\\n\\t\\t\\tx = x * -1\\n\\t\\tb += x\\n\\t\\tb = max(b, 0)\\n\\t\\tc = max(b, c)\\n\\tprint(c + a)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks us to maximize the sum of the number of 1s in all possible substrings of a binary string by flipping at most one substring.\\n- Devising a Strategy: A brute-force approach of flipping every possible substring and calculating the resulting sum would be too slow given the constraints. A better approach involves calculating the sum of 1s in all substrings of the original string, then iterating through all possible substrings, calculating the change in the sum if that substring is flipped, and choosing the substring that maximizes the increase.\\n- Optimizing the Calculation: We can efficiently calculate the initial sum and the change in sum by considering the contribution of each character to the sum of all substrings. If we flip a substring, we change 1s to 0s and 0s to 1s. The change in sum for each flipped character can be calculated as (index + 1) * (length - index). We can use Kadane's algorithm to find the substring that results in the maximum increase in the sum.\",\n  \"LLM Questions\": [\n    \"How do you efficiently calculate the sum of f(L, R) for all possible substrings without flipping any substring?\",\n    \"How can you determine the change in the total sum of ones when a substring from L to R is flipped?\",\n    \"Considering the constraints, what is the most efficient algorithm to identify the optimal substring to flip?\",\n    \"How do you handle the edge cases, like the string is already optimal or flipping does not increase sum of f(L, R)?\",\n    \"Can you explain Kadane's algorithm and how it applies to finding the optimal substring to flip to maximize the sum of f(L, R)?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"You can iterate through each character in the string, determine how many substrings include that character. Each character at index i contributes (i+1) * (n-i) to the sum of f(L, R), if the character is 1. Thus, sum all of contributions.\",\n    \"When a substring from L to R is flipped, each flipped 0 becomes a 1, and each flipped 1 becomes a 0.  For each flipped character at index i within the substring, the change is (i+1) * (n-i) if it was originally a 0 and -(i+1) * (n-i) if it was originally a 1. The total change is the sum of these values.\",\n    \"Kadane's algorithm allows you to find the maximum sum contiguous subarray in linear time. The values in the array are the change in ones for each flipped character.\",\n    \"You initialize calculate initial sum of f(L, R) across all substrings. Then, you find maximal change using Kadane's algorithm. Sum of initial sum and maximal change will be answer.\",\n    \"Kadane's algorithm finds the maximum sum contiguous subarray in linear time. You iterate through the array, maintaining the current maximum sum ending at the current position and the overall maximum sum seen so far. If the current maximum sum becomes negative, you reset it to 0. In this context, the array represents the change in the sum of ones for each character flipped, allowing you to identify the optimal substring to flip.\"\n  ]\n}\n```"