"```json\n{\n  \"Coding Problem\": \"Vasya likes taking part in Codeforces contests. When a round is over, Vasya follows all submissions in the system testing tab.\\n\\nThere are n solutions, the i-th of them should be tested on a_i tests, testing one solution on one test takes 1 second. The solutions are judged in the order from 1 to n. There are k testing processes which test solutions simultaneously. Each of them can test at most one solution at a time.\\n\\nAt any time moment t when some testing process is not judging any solution, it takes the first solution from the queue and tests it on each test in increasing order of the test ids. Let this solution have id i, then it is being tested on the first test from time moment t till time moment t + 1, then on the second test till time moment t + 2 and so on. This solution is fully tested at time moment t + a_i, and after that the testing process immediately starts testing another solution.\\n\\nConsider some time moment, let there be exactly m fully tested solutions by this moment. There is a caption \\\"System testing: d%\\\" on the page with solutions, where d is calculated as\\n\\n$$$d = round\\\\left(100\u22c5m/n\\\\right),$$$\\n\\nwhere round(x) = \u230a{x + 0.5}\u230b is a function which maps every real to the nearest integer.\\n\\nVasya calls a submission interesting if there is a time moment (possibly, non-integer) when the solution is being tested on some test q, and the caption says \\\"System testing: q%\\\". Find the number of interesting solutions.\\n\\nPlease note that in case when multiple processes attempt to take the first submission from the queue at the same moment (for instance, at the initial moment), the order they take the solutions does not matter.\\n\\nInput\\n\\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 100) standing for the number of submissions and the number of testing processes respectively.\\n\\nThe second line contains n positive integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 150), where a_i is equal to the number of tests the i-th submission is to be run on.\\n\\nOutput\\n\\nOutput the only integer \u2014 the number of interesting submissions.\\n\\nExamples\\n\\nInput\\n\\n\\n2 2\\n49 100\\n\\n\\nOutput\\n\\n\\n1\\n\\n\\nInput\\n\\n\\n4 2\\n32 100 33 1\\n\\n\\nOutput\\n\\n\\n2\\n\\n\\nInput\\n\\n\\n14 5\\n48 19 6 9 50 20 3 42 38 43 36 21 44 6\\n\\n\\nOutput\\n\\n\\n5\\n\\nNote\\n\\nConsider the first example. At time moment 0 both solutions start testing. At time moment 49 the first solution is fully tested, so at time moment 49.5 the second solution is being tested on the test 50, and the caption says \\\"System testing: 50%\\\" (because there is one fully tested solution out of two). So, the second solution is interesting.\\n\\nConsider the second example. At time moment 0 the first and the second solutions start testing. At time moment 32 the first solution is fully tested, the third solution starts testing, the caption says \\\"System testing: 25%\\\". At time moment 32 + 24.5 = 56.5 the third solutions is being tested on test 25, the caption is still the same, thus this solution is interesting. After that the third solution is fully tested at time moment 32 + 33 = 65, the fourth solution is fully tested at time moment 65 + 1 = 66. The captions becomes \\\"System testing: 75%\\\", and at time moment 74.5 the second solution is being tested on test 75. So, this solution is also interesting. Overall, there are two interesting solutions.\",\n  \"Ground Truth Solution\": \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncaption = 0\\ntested = [0 for i in range(n)]\\ninteresting = [0 for i in range(n)]\\nans = 0\\nwhile len(a) != 0:\\n\\tm = min(a[0:k])\\n\\tfor j in range(m):\\n\\t\\tfor i in range(min(k, len(a))):\\n\\t\\t\\ttested[i] += 1\\n\\t\\t\\ta[i] -= 1\\n\\t\\t\\tif caption != 0:\\n\\t\\t\\t\\tif tested[i] == caption:\\n\\t\\t\\t\\t\\tinteresting[i] = 1\\n\\ti = 0\\n\\twhile i < min(k, len(a)):\\n\\t\\tif a[i] == 0:\\n\\t\\t\\tif interesting[i] == 1:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\tdel interesting[i]\\n\\t\\t\\tdel a[i]\\n\\t\\t\\tdel tested[i]\\n\\t\\t\\ti -= 1\\n\\t\\ti += 1\\n\\tcaption = int(100 * (n - len(a)) / n + 0.5)\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem describes a scenario where 'n' solutions are being tested by 'k' processes. A solution is considered 'interesting' if, at some point during its testing (on test 'q'), the system testing progress is also at 'q%'.\\n- Data Structures: Lists will be used to maintain the tests left for each solution, the 'interesting' status of solutions, and the number of tests each solution has undergone.\\n- Algorithm Overview: Simulate the testing process step-by-step. In each step, each process works on the next test of a solution. Calculate the testing progress (caption) at the end of each step. Determine the total interesting solutions by keeping track of the testing progress for each solution and checking if caption equal to tested[i].\",\n  \"LLM Questions\": [\n    \"How do you simulate the parallel testing process with multiple testing processes?\",\n    \"How do you compute the percentage of the system testing process at each time step?\",\n    \"How do you identify and count the number of 'interesting' solutions?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Maintain a list representing the tests remaining for each solution. In each iteration, each process picks the first available solution and decreases the tests remaining for each solution by 1 until it's 0. Use min(k, len(a)) for each step to deal with process availability.\",\n    \"At each time step, calculate the number of fully tested solutions (m) and compute the percentage using the formula round(100 * m / n), where n is the total number of solutions.\",\n    \"As each solution is tested on different tests, compare the currently tested test number (tested[i]) with testing process percentage (caption) and maintain another list tracking 'interesting' solutions and increment a counter.\"\n  ]\n}\n```"