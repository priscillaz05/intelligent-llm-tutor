"```json\n{\n  \"Coding Problem\": \"There is a frog staying to the left of the string $s = s_1 s_2 \\\\ldots s_n$ consisting of $n$ characters (to be more precise, the frog initially stays at the cell $0$). Each character of $s$ is either 'L' or 'R'. It means that if the frog is staying at the $i$-th cell and the $i$-th character is 'L', the frog can jump only to the left. If the frog is staying at the $i$-th cell and the $i$-th character is 'R', the frog can jump only to the right. The frog can jump only to the right from the cell $0$.\\n\\nNote that the frog can jump into the same cell twice and can perform as many jumps as it needs.\\n\\nThe frog wants to reach the $n+1$-th cell. The frog chooses some positive integer value $d$ before the first jump (and cannot change it later) and jumps by no more than $d$ cells at once. I.e. if the $i$-th character is 'L' then the frog can jump to any cell in a range $[max(0, i - d); i - 1]$, and if the $i$-th character is 'R' then the frog can jump to any cell in a range $[i + 1; min(n + 1; i + d)]$.\\n\\nThe frog doesn't want to jump far, so your task is to find the minimum possible value of $d$ such that the frog can reach the cell $n+1$ from the cell $0$ if it can jump by no more than $d$ at once. It is guaranteed that it is always possible to reach $n+1$ from $0$.\\n\\nYou have to answer $t$ independent test cases.\\n\\n\\n-----Input-----\\n\\nThe first line of the input contains one integer $t$ ($1 \\\\le t \\\\le 10^4$) \u2014 the number of test cases.\\n\\nThe next $t$ lines describe test cases. The $i$-th test case is described as a string $s$ consisting of at least $1$ and at most $2 \\\\cdot 10^5$ characters 'L' and 'R'.\\n\\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed $2 \\\\cdot 10^5$ ($\\\\sum |s| \\\\le 2 \\\\cdot 10^5$).\\n\\n\\n-----Output-----\\n\\nFor each test case, print the answer \u2014 the minimum possible value of $d$ such that the frog can reach the cell $n+1$ from the cell $0$ if it jumps by no more than $d$ at once.\\n\\n\\n-----Example-----\\nInput\\n6\\nLRLRRLL\\nL\\nLLR\\nRRRR\\nLLLLLL\\nR\\n\\nOutput\\n3\\n2\\n3\\n1\\n7\\n1\\n\\n\\n-----Note-----\\n\\nThe picture describing the first test case of the example and one of the possible answers:\\n\\n[Image]\\n\\nIn the second test case of the example, the frog can only jump directly from $0$ to $n+1$.\\n\\nIn the third test case of the example, the frog can choose $d=3$, jump to the cell $3$ from the cell $0$ and then to the cell $4$ from the cell $3$.\\n\\nIn the fourth test case of the example, the frog can choose $d=1$ and jump $5$ times to the right.\\n\\nIn the fifth test case of the example, the frog can only jump directly from $0$ to $n+1$.\\n\\nIn the sixth test case of the example, the frog can choose $d=1$ and jump $2$ times to the right.\",\n  \"Ground Truth Solution\": \"testcases = int(input())\\nfor i in range(testcases):\\n\\tmoves = input() + 'R'\\n\\tindex = -1\\n\\tans = 0\\n\\tfor i in range(len(moves)):\\n\\t\\tif moves[i] == 'R':\\n\\t\\t\\tans = max(ans, i - index)\\n\\t\\t\\tindex = i\\n\\tprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The frog starts at position 0 and wants to reach position n+1. The frog can only jump right from position 0. If the frog is at position i and s[i] is 'L', it can jump to [max(0, i-d), i-1]. If s[i] is 'R', it can jump to [i+1, min(n+1, i+d)]. The goal is to find the minimum d that allows the frog to reach n+1.\\n- Identifying the Key Insight: The frog must always be able to jump to the next 'R' or the end (n+1). The minimum d must be the maximum distance between consecutive 'R's or between the start (0) and the first 'R', or between the last 'R' and the end (n+1).\\n- Developing the Algorithm: Append 'R' to the end of the string. Iterate through the modified string, keeping track of the last 'R' encountered. The distance between the current 'R' and the last 'R' is a potential value for d. Keep track of the maximum of these distances. This maximum value is the minimum possible value for d.\\n- Edge cases: The problem states that a solution will always exist. However, we should handle the edge case where the input string is empty. Also if the string contains only 'L' characters.\",\n  \"LLM Questions\": [\n    \"How can we ensure the frog reaches the end, even if the last characters are 'L'?\",\n    \"How can we determine the minimum jump distance required to reach the end?\",\n    \"What data structure can be used to keep track of the positions of 'R' characters?\",\n    \"How should we handle the initial jump from position 0?\",\n    \"How does the absence of 'R' characters impact the result?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"By appending 'R' to the end of the input string, we guarantee that there is always an 'R' at the end (n+1) that the frog needs to reach.\",\n    \"The minimum jump distance is determined by the maximum distance between consecutive 'R' characters (or the start and the first 'R', or the last 'R' and the end).\",\n    \"We don't need to store the positions of all 'R' characters. We only need to keep track of the index of the last 'R' encountered.\",\n    \"The jump from position 0 is accounted for by calculating the distance between the start (implicitly -1, before the first character) and the first 'R'.\",\n    \"If there are no 'R' characters in the initial string, after appending 'R', the string becomes just 'R', therefore the answer will be 1.\"\n  ]\n}\n```"