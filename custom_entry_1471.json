"```json\n{\n  \"Coding Problem\": \"Tomya is a girl. She loves Chef Ciel very much.\\n\\nTomya like a positive integer p, and now she wants to get a receipt of Ciel's restaurant whose total price is exactly p.\\nThe current menus of Ciel's restaurant are shown the following table.\\nName of Menupriceeel flavored water1deep-fried eel bones2clear soup made with eel livers4grilled eel livers served with grated radish8savory egg custard with eel16eel fried rice (S)32eel fried rice (L)64grilled eel wrapped in cooked egg128eel curry rice256grilled eel over rice512deluxe grilled eel over rice1024eel full-course2048\\n\\nNote that the i-th menu has the price 2i-1 (1 \u2264 i \u2264 12).\\n\\nSince Tomya is a pretty girl, she cannot eat a lot.\\nSo please find the minimum number of menus whose total price is exactly p.\\nNote that if she orders the same menu twice, then it is considered as two menus are ordered. (See Explanations for details)\\n\\n-----Input-----\\n\\nThe first line contains an integer T, the number of test cases.\\nThen T test cases follow.\\nEach test case contains an integer p.\\n\\n-----Output-----\\n\\nFor each test case, print the minimum number of menus whose total price is exactly p.\\n\\n-----Constraints-----\\n\\n1 \u2264 T \u2264 5\\n\\n1 \u2264 p \u2264 100000 (105)\\n\\nThere exists combinations of menus whose total price is exactly p.\\n\\n-----Sample Input-----\\n4\\n10\\n256\\n255\\n4096\\n\\n-----Sample Output-----\\n2\\n1\\n8\\n2\\n\\n-----Explanations-----\\n\\nIn the first sample, examples of the menus whose total price is 10 are the following:\\n\\n1+1+1+1+1+1+1+1+1+1 = 10 (10 menus)\\n\\n1+1+1+1+1+1+1+1+2 = 10 (9 menus)\\n\\n2+2+2+2+2 = 10 (5 menus)\\n\\n2+4+4 = 10 (3 menus)\\n\\n2+8 = 10 (2 menus)\\n\\nHere the minimum number of menus is 2.\\n\\nIn the last sample, the optimal way is 2048+2048=4096 (2 menus).\\nNote that there is no menu whose price is 4096.\",\n  \"Ground Truth Solution\": \"for i in range(int(input())):\\n\\ta = int(input())\\n\\tj = 11\\n\\tc = 0\\n\\twhile a > 0:\\n\\t\\tb = a // 2 ** j\\n\\t\\tc += b\\n\\t\\ta = a % 2 ** j\\n\\t\\tj -= 1\\n\\tprint(c)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: Tomya needs to pay a total price 'p' using menu items with prices that are powers of 2 (2^0 to 2^11). The goal is to minimize the number of menu items she orders.\\n- Strategy Selection: Use a greedy approach by starting with the highest-priced menu item (2048) and see how many of those she can afford. Then, move to the next highest (1024) and repeat until the price 'p' is fully paid.\\n- Edge Case Evaluation: The problem guarantees a solution exists, so no 'impossible' scenarios need to be handled. The price 'p' is always positive, and all menu prices are also positive. The only real edge case is 'p' is already a power of 2.\\n- Algorithm Implementation: Start from the highest menu price (2048) and repeatedly subtract it as long as the price 'p' allows. Count how many of each menu item is used. Repeat this for all possible menu prices.\",\n  \"LLM Questions\": [\n    \"What is the range of possible menu prices, and how does it relate to powers of 2?\",\n    \"Why does the greedy approach of starting from the highest menu price work for minimizing the total number of menus?\",\n    \"How would you deal with the constraint on the number of test cases, and how does it affect your algorithm?\",\n    \"Can you provide a step-by-step example of how the algorithm would work for p = 10?\",\n    \"If the prices of menu items were not powers of 2, how would this change the complexity of finding the optimal solution?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The menu prices range from 2^0 = 1 to 2^11 = 2048. They are consecutive powers of 2.\",\n    \"The greedy approach works because any value can be represented as the sum of powers of 2. Choosing the largest possible power of 2 at each step ensures we use as few terms as possible, thus minimizing the number of menus.\",\n    \"The constraint 1 \u2264 T \u2264 5 just means the program has to handle a few test cases within a loop. The algorithm inside the loop will remain the same.\",\n    \"For p = 10: start with 2048. 10 < 2048 so use 0. Next 1024. 10 < 1024 so use 0. Next 512. 10 < 512 so use 0. Next 256. 10 < 256 so use 0. Next 128. 10 < 128 so use 0. Next 64. 10 < 64 so use 0. Next 32. 10 < 32 so use 0. Next 16. 10 < 16 so use 0. Next 8. 10 >= 8, so use one menu with price 8, p becomes 10-8=2. Next 4. 2 < 4 so use 0. Next 2. 2 >= 2 so use one menu with price 2, p becomes 2-2=0. Next 1. 0 < 1 so use 0. Total number of menus is 1 + 1 = 2.\",\n    \"If the menu items were not powers of 2, the problem becomes a variant of the knapsack problem, which is NP-hard. We would likely need to use dynamic programming or approximation algorithms instead of a simple greedy algorithm.\"\n  ]\n}\n```"