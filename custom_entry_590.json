"```json\n{\n  \"Coding Problem\": \"Captain Jack Sparrow and Davy Jones are having a furious sword fight to gain the key to the chest containing Davy Jones' heart. Jack wants to kill Davy Jones and live forever as the captain of The Flying Dutchman. On the other hand, Davy Jones wants to save himself from death.\\n\\nA string is hanging between them. With each strike of a sword, they can strike down any one character from the string. If at any point of time before striking down a character, either of them is able to make a palindrome from the characters of the string  (any anagram of the string)  , he can strike down the entire string in one shot and defeat his opponent. It is known that Jack gets the first chance to strike and strikes are made alternatively by both of them.\\n\\nGiven the string that is hanging between them, determine who wins the fight provided that both fight to achieve their target i.e. fight optimally.\\n\\nInput\\n\\nThe first line of each file contains T, the number of test cases.\\n\\nEach of the next T line contains a string S consisting of only lower case characters (a-z).\\n\\nOutput\\n\\nFor each test case, print in a new line the winner of the sword fight - \\\"JACK\\\" or\\n\\\"DAVY JONES\\\" (quotes for clarity only).\\n\\nConstraints\\n\\n1 \u2264 T \u2264 100\\n\\n1 \u2264 length of string S \u2264 100000\\n\\nNOTE\\n\\nThere is partial marking for this question.\\n\\nSAMPLE INPUT\\n2\\naba\\nabca\\n\\nSAMPLE OUTPUT\\nJACK\\nDAVY JONES\\n\\nExplanation\\n\\nFor 2nd test case if Jack wants to win then by playing optimally he removes 'a' from the string. Else 'aca' or 'aba' will be formed by removing 'b' or 'c' respectively, which can be cut in one go as they are palindromes by Davy Jones where he would win. So Davy Jones will be left with 'bca'. Now all are distinct characters, in which he removes any one of the three. In next turn Jack removes another character and finally Davy Jones gets only single character where he wins.\",\n  \"Ground Truth Solution\": \"def py_2():\\n\\tt = eval(input())\\n\\tfor tt in range(t):\\n\\t\\tfreq = [0]*26\\n\\t\\ts = input()\\n\\t\\tslen = len(s)\\n\\t\\tfor i in range(slen):\\n\\t\\t\\t#print ord(s[i])-97\\n\\t\\t\\tfreq[ord(s[i])-97] += 1\\n\\t\\tc = 0\\n\\t\\tfor i in range(26):\\n\\t\\t\\tif freq[i]%2:\\n\\t\\t\\t\\tc += 1\\n\\t\\tif c==0:\\n\\t\\t\\tprint('JACK')\\n\\t\\telif c%2:\\n\\t\\t\\tprint('JACK')\\n\\t\\telse:\\n\\t\\t\\tprint('DAVY JONES')\\npy_2()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Game's Objective: Recognize that the goal is to determine who wins the sword fight based on the given rules, specifically the ability to create a palindrome from the string's characters.\\n- Analyzing Winning Conditions: Understand that if either player can form a palindrome at any point, they win immediately. Consider that both players play optimally to achieve their goals.\\n- Devising a Strategy: Realize that the key is to count the number of characters with odd frequencies. A palindrome can be formed if there's at most one character with an odd frequency. The winner depends on the number of characters with odd frequencies.\\n- Determining the Winner: The core idea revolves around calculating the number of characters that appear an odd number of times in the string. If this count is 0 or odd, Jack wins. Otherwise, Davy Jones wins.\",\n  \"LLM Questions\": [\n    \"How do you determine if a string can be rearranged to form a palindrome?\",\n    \"What is the significance of characters appearing an odd number of times in the string?\",\n    \"How does the parity (even or odd) of the count of characters with odd frequencies affect the outcome of the game?\",\n    \"What are the conditions for Jack to win, and what are the conditions for Davy Jones to win?\",\n    \"How do you translate the problem's rules into a practical algorithm for determining the winner?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A string can be rearranged to form a palindrome if and only if the number of characters with odd frequencies is at most 1.\",\n    \"Characters appearing an odd number of times are crucial because a palindrome can have at most one such character in the middle. Every other character needs to appear an even number of times to be placed symmetrically around the center.\",\n    \"If the count of characters with odd frequencies is 0 or odd, Jack wins. If the count is even (and greater than 0), Davy Jones wins.\",\n    \"Jack wins if the number of characters with odd frequencies is 0 or odd. Davy Jones wins if the number of characters with odd frequencies is even and greater than 0.\",\n    \"First, count the frequency of each character in the string. Then, count the number of characters that appear an odd number of times. Based on the parity of this count (0 or odd -> Jack; even and > 0 -> Davy Jones), determine the winner.\"\n  ]\n}\n```"