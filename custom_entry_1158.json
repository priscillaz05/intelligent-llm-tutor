"```json\n{\n  \"Coding Problem\": \"Maxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters.\\n\\nMaxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (ai) represents the number of meters the guest is going to take up if he sits at the restaurant table.\\n\\nLong before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table.\\n\\nMaxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\\n\\nInput\\n\\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a1, a2, ..., an (1 \u2264 ai \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters. \\n\\nThe numbers in the lines are separated by single spaces.\\n\\nOutput\\n\\nIn a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10 - 4.\\n\\nExamples\\n\\nInput\\n\\n3\\n1 2 3\\n3\\n\\n\\nOutput\\n\\n1.3333333333\\n\\nNote\\n\\nIn the first sample the people will come in the following orders: \\n\\n* (1, 2, 3) \u2014 there will be two people in the restaurant; \\n* (1, 3, 2) \u2014 there will be one person in the restaurant; \\n* (2, 1, 3) \u2014 there will be two people in the restaurant; \\n* (2, 3, 1) \u2014 there will be one person in the restaurant; \\n* (3, 1, 2) \u2014 there will be one person in the restaurant; \\n* (3, 2, 1) \u2014 there will be one person in the restaurant. \\n\\n\\n\\nIn total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).\",\n  \"Ground Truth Solution\": \"n = int(input())\\narr = list(map(int, input().split()))\\np = int(input())\\ndp = [[[0 for k in range(n + 1)] for i in range(p + 1)] for i in range(n + 1)]\\nfor j in range(p + 1):\\n\\tfor k in range(n + 1):\\n\\t\\tdp[0][j][k] = 1\\nfor i in range(1, n + 1):\\n\\tfor j in range(p + 1):\\n\\t\\tfor k in range(1, n + 1):\\n\\t\\t\\tif j >= arr[k - 1]:\\n\\t\\t\\t\\tdp[i][j][k] = dp[i][j][k - 1] + i * dp[i - 1][j - arr[k - 1]][k - 1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i][j][k] = dp[i][j][k - 1]\\nfact = n\\nans = 0\\nfor i in range(1, n + 1):\\n\\tans += dp[i][p][n] / fact\\n\\tfact *= n - i\\nprint(ans)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks for the average number of guests that can be seated given all possible orderings of guests, constrained by the table's length.\\n- Identifying Key Constraints: The key constraints are the table length 'p' and the guest sizes 'a_i'. Guests are admitted until no remaining guest can fit. Once a guest is refused, no further guests are considered, even if later guests could fit.\\n- Selecting an Algorithmic Strategy: Dynamic programming is suitable because the number of guests admitted depends on the current table occupancy and the available guests. The DP state should reflect the number of guests already seated, the remaining table space, and the set of guests considered so far.\\n- Implementing the Solution: Define a DP table to store the number of arrangements for seating 'i' guests with a table size of 'j' considering the first 'k' guests. The DP transitions will involve either seating the k-th guest if space permits or not seating them.\\n- Calculating the Average: Calculate the total number of guests seated across all permutations and divide by n! to obtain the average.\",\n  \"LLM Questions\": [\n    \"How can dynamic programming be used to count the number of valid arrangements?\",\n    \"How do you represent the state in the dynamic programming approach, considering the number of guests seated, remaining table space, and the set of guests considered so far?\",\n    \"What are the base cases for your dynamic programming solution?\",\n    \"How do you handle the constraint that if a guest cannot be seated, no subsequent guests are considered?\",\n    \"How do you calculate the final answer given the dynamic programming results?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Dynamic programming can be used to efficiently compute the number of valid seating arrangements by breaking down the problem into smaller subproblems and storing intermediate results to avoid redundant calculations.\",\n    \"The state can be represented as dp[i][j][k], where 'i' is the number of guests seated, 'j' is the remaining table space, and 'k' is the index of the last guest considered.  dp[i][j][k] stores the number of arrangements to seat 'i' guests with 'j' remaining space considering guests 1 to k.\",\n    \"The base case is dp[0][j][k] = 1 for all j and k, meaning there is one way to seat zero guests, regardless of the remaining table space or the guests considered.\",\n    \"When considering the k-th guest, check if their size is less than or equal to the remaining table space 'j'. If yes, add the result of seating them (transition to a state with one more guest seated, reduced table space) to the result of not seating them (transition to a state with the same number of guests seated, the same table space). If not, only consider the result of not seating them.\",\n    \"Calculate the total number of seated guests across all valid permutations using the DP table. Specifically sum i * dp[i][p][n] where i is the number of seated guests and divide the result by n! to calculate the average number of visitors.\"\n  ]\n}\n```"