"```json\n{\n  \"Coding Problem\": \"Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\\n\\nHelp Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.\\n\\n\\n-----Input-----\\n\\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\\u00a0\u2014 the number of fountains, the number of coins and diamonds Arkady has.\\n\\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \\\"C\\\" or \\\"D\\\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\\n\\n\\n-----Output-----\\n\\nPrint the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.\\n\\n\\n-----Examples-----\\nInput\\n3 7 6\\n10 8 C\\n4 3 C\\n5 6 D\\n\\nOutput\\n9\\n\\nInput\\n2 4 5\\n2 5 C\\n2 1 D\\n\\nOutput\\n0\\n\\nInput\\n3 10 10\\n5 5 C\\n5 5 C\\n10 11 D\\n\\nOutput\\n10\\n\\n\\n\\n-----Note-----\\n\\nIn the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.\\n\\nIn the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.\",\n  \"Ground Truth Solution\": \"import operator\\n\\ndef maxl(l, m, mx):\\n\\tfor i in range(len(l) - 1):\\n\\t\\t(b1, p1) = l[i]\\n\\t\\tif b1 + l[i + 1][0] <= mx:\\n\\t\\t\\tbreak\\n\\t\\tfor j in range(i + 1, len(l)):\\n\\t\\t\\t(b2, p2) = l[j]\\n\\t\\t\\tif b1 + b2 <= mx:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif p1 + p2 <= m:\\n\\t\\t\\t\\tmx = b1 + b2\\n\\t\\t\\t\\tbreak\\n\\treturn mx\\nfc = []\\nfd = []\\n(n, c, d) = list(map(int, input().split()))\\nfor _ in range(n):\\n\\t(b, p, m) = input().split()\\n\\t(b, p) = (int(b), int(p))\\n\\tif m == 'C':\\n\\t\\tif p <= c:\\n\\t\\t\\tfc.append((b, p))\\n\\telif p <= d:\\n\\t\\tfd.append((b, p))\\nfc.sort(key=operator.itemgetter(0), reverse=True)\\nfd.sort(key=operator.itemgetter(0), reverse=True)\\nmx = fc[0][0] + fd[0][0] if fc and fd else 0\\nmx = maxl(fc, c, mx)\\nmx = maxl(fd, d, mx)\\nprint(mx)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Requirements: The problem requires finding two fountains (one or two coin fountains OR one or two diamond fountains OR one coin and one diamond fountain), such that the sum of their beauty is maximized while staying within the budget for coins and diamonds.\\n- Handling Special Conditions: Account for the possibility that no two fountains can be built, resulting in 0 beauty.  Also consider that there might be no coin fountains or no diamond fountains. Also consider that the cost of the fountains may be more than the money we have.\\n- Choosing an Algorithmic Strategy: One approach is to separate the fountains into two lists: one for coins and one for diamonds. Sort each list by beauty in descending order. Then check the maximum beauty achievable by:\\n 1) Selecting the two most beautiful coin fountains.\\n 2) Selecting the two most beautiful diamond fountains.\\n 3) Selecting the most beautiful coin fountain and the most beautiful diamond fountain.\\n- Implementation Considerations: Make sure to handle edge cases like fewer than two fountains of a given type. Be careful when calculating the total cost of selected fountains to ensure it's within budget.\",\n  \"LLM Questions\": [\n    \"What is the meaning of beauty and cost for each fountain and how do they relate to the goal of the problem?\",\n    \"What special cases should be considered if no two fountains satisfy the conditions?\",\n    \"How can sorting by beauty assist in finding the optimal solution?\",\n    \"When selecting two fountains, how can you efficiently check if their total cost stays within the available budget?\",\n    \"How can you deal with the possibility that either the list of coin fountains or diamond fountains, or both, have fewer than two elements?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Beauty refers to the attractiveness of a fountain, which we aim to maximize. The cost is what Arkady needs to pay (in coins or diamonds) to build the fountain, and it must not exceed his available resources.\",\n    \"If no two fountains can be built within the budget, the maximum total beauty is 0.\",\n    \"Sorting fountains by beauty in descending order allows us to efficiently check the most beautiful options first, and potentially avoid unnecessary calculations.\",\n    \"Calculate the sum of their individual costs and confirm that it's less than or equal to Arkady's total coins/diamonds.\",\n    \"If a list has fewer than two fountains, consider combinations with fountains from the other list or, if both lists have fewer than two elements, return 0. Handle the case where only one fountain can be built. \"\n  ]\n}\n```"