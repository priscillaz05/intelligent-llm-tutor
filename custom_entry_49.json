"```json\n{\n  \"Coding Problem\": \"Salmon loves to be a tidy person. One day, when he looked at the mess that he made after playing with his rubber ducks, he felt awful. Now he wants to clean up his mess, by placing his ducks into boxes.\\nEach rubber duck has a color. There are a total of $N+1$ colors, numbered from $0$ to $N$. Salmon wants to place his $N*K$ ducks into $N$ boxes, each of which can fit $K$ ducks. Each duck should be placed inside a box.\\nSalmon is very particular when it comes to how many colors he can place in each box. Since Salmon doesn't like lots of colors mixing together he only wants to have a maximum of $2$ distinct colors per box.\\nPlease help Salmon achieve this goal!\\n\\nIt can be shown that there will always be at least one valid solution under given constraints.\\n\\nIf there are multiple correct solutions, you may output any one of them.   \\n\\n-----Input:-----\\n- The first line contains an integer $T$, denoting the number of testcases. $T$ testcases will follow, each containing two lines.   \\n- The first line of each testcase contains two space-separated integers $N$ and $K$.   \\n- The second line of each testcase contains $N+1$  space-separated integers. The $i+1$-th integer denotes the number of ducks with color-$i$ where $0 \\leq i \\leq N\\n\\n-----Output:-----\\n- Output $N$ lines for each testcase. \\n- The $i$-th line of a testcase should contain $4$ space-separated integers $c1, m1, c2, m2$ respectively which denotes that that are $m1$ ducks of color-$c1$ and $m2$ ducks of color-$c2$ inside the $i$-th box where $0 \\leq m1,m2 \\leq K$ and $0 \\leq c1,c2 \\leq N$. \\n- Note that even if you have only one color to put inside the $i$-th box, you should still output $4$ space-separated integers and keep either $m1$ or $m2$ as $0$. And $0 \\leq c1,c2 \\leq N.\\n- The output should be valid and should satisfy Salmon's goal.\\n\\n-----Constraints-----\\n- $T=10$\\n- $2 \\leq N \\leq 10^5$ \\n- $2 \\leq K \\leq 10^5$ \\n- Total ducks for each test case is exactly $N*K$\\n- There can be a color with $0$ ducks\\n\\n-----Subtasks-----\\n- Subtask 1 [20 points]: $2 \\leq N \\leq 10$, $K=2$ \\n- Subtask 2 [30 points]: $N=2$, $K=5$\\n- Subtask 3 [50 points]: original constraints\\n\\n-----Sample Input:-----\\n1\\n2 4\\n3 4 1\\n\\n-----Sample Output:-----\\n2 1 1 3\\n1 1 0 3\\n\\n-----Explanation:-----\\n- In the given testcase, Salmon has $N=2$ boxes, each of size $K=4$ and there are total $N*K=8$ ducks.   \\n- The first box is filled with $1$ duck of color-$2$ and $3$ ducks of color-$1$ and the second box is filled with $1$ duck of color-$1$ and $3$ ducks of color-$0$.   \\n- Each duck is inside a box and each box has at most two distinct colors. Also each box contains exactly $K=4$ ducks.\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tc = [int(i) for i in input().split()]\\n\\ti = 0\\n\\tm = 0\\n\\tif n == 2 and k == 5:\\n\\t\\tc1 = c\\n\\t\\tc.sort()\\n\\t\\td = dict()\\n\\t\\tfor i in range(len(c)):\\n\\t\\t\\tfor j in range(len(c1)):\\n\\t\\t\\t\\tif c[i] == c1[j]:\\n\\t\\t\\t\\t\\td[i] = j\\n\\t\\t\\t\\t\\tc1[j] = -1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\twhile m < n:\\n\\t\\t\\tif i == n:\\n\\t\\t\\t\\tprint(d[n], k, d[n - 1], 0)\\n\\t\\t\\t\\tc[n] -= k\\n\\t\\t\\t\\tm += 1\\n\\t\\t\\telif c[i] >= k:\\n\\t\\t\\t\\tprint(d[i], k, d[i + 1], 0)\\n\\t\\t\\t\\tc[i] = c[i] - k\\n\\t\\t\\t\\tm += 1\\n\\t\\t\\telif c[i] == 0:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(i + 1, n + 1):\\n\\t\\t\\t\\t\\tif c[i] + c[j] >= k:\\n\\t\\t\\t\\t\\t\\tprint(d[i], c[i], d[j], k - c[i])\\n\\t\\t\\t\\t\\t\\tc[j] -= k - c[i]\\n\\t\\t\\t\\t\\t\\tc[i] = 0\\n\\t\\t\\t\\t\\t\\tm += 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\telse:\\n\\t\\twhile m < n:\\n\\t\\t\\tif i == n:\\n\\t\\t\\t\\tprint(n, k, n - 1, 0)\\n\\t\\t\\t\\tc[n] -= k\\n\\t\\t\\t\\tm += 1\\n\\t\\t\\telif c[i] >= k:\\n\\t\\t\\t\\tprint(i, k, i + 1, 0)\\n\\t\\t\\t\\tc[i] = c[i] - k\\n\\t\\t\\t\\tm += 1\\n\\t\\t\\telif c[i] == 0:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(i + 1, n + 1):\\n\\t\\t\\t\\t\\tif c[i] + c[j] >= k:\\n\\t\\t\\t\\t\\t\\tprint(i, c[i], j, k - c[i])\\n\\t\\t\\t\\t\\t\\tc[j] -= k - c[i]\\n\\t\\t\\t\\t\\t\\tc[i] = 0\\n\\t\\t\\t\\t\\t\\tm += 1\\n\\t\\t\\t\\t\\t\\tbreak\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding Problem Constraints: The task is to distribute N*K ducks of N+1 colors into N boxes, each holding K ducks. Each box can contain at most 2 distinct colors.\\n- Identifying Potential Pitfalls: Need to handle cases where some colors have zero ducks. Need to ensure that each box contains exactly K ducks and has at most two colors. Since a valid solution is always guaranteed to exist, no need for explicit error handling.\\n- Selecting an Algorithmic Strategy: Iterate through the boxes. For each box, find the two most suitable colors to fill it with. If a color has enough ducks to fill an entire box, use it. If not, combine two colors. Prioritize using as much as possible of one color, and then complete filling the box with another color if necessary.\\n- Implementation Considerations: Need to efficiently track the number of ducks of each color and update those counts after placing them in a box. Also handle the edge case when N = 2, K = 5 to output solution as expected.\",\n  \"LLM Questions\": [\n    \"How do you ensure that each box has exactly K ducks?\",\n    \"If a certain color has more than K ducks, how would you use it?\",\n    \"How do you handle the case where a color has less than K ducks?\",\n    \"If two colors together have more than K ducks, how would you decide how many of each to put in a box?\",\n    \"How would you efficiently keep track of the counts of each duck color?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"For each box, I would keep adding ducks of selected colors until the total number of ducks in the box reaches K.\",\n    \"If a color has more than K ducks, I would fill a box entirely with that color (K ducks) and update the color's count accordingly.\",\n    \"If a color has less than K ducks, I would use all the ducks of that color and then fill the rest of the box with another color.\",\n    \"If two colors together have more than K ducks, I would use as much as possible of the first color and fill the rest of the box with the second color. I need to be careful to not add more than K ducks in total.\",\n    \"I would use an array or a dictionary to store the counts of each duck color. After placing ducks in a box, I would update the counts in the array or dictionary.\"\n  ]\n}\n```"