"```json\n{\n  \"Coding Problem\": \"Alexey, a merry Berland entrant, got sick of the gray reality and he zealously wants to go to university. There are a lot of universities nowadays, so Alexey is getting lost in the diversity \u2014 he has not yet decided what profession he wants to get. At school, he had bad grades in all subjects, and it's only thanks to wealthy parents that he was able to obtain the graduation certificate.\\n\\nThe situation is complicated by the fact that each high education institution has the determined amount of voluntary donations, paid by the new students for admission \u2014 n_{i} berubleys. He cannot pay more than n_{i}, because then the difference between the paid amount and n_{i} can be regarded as a bribe!\\n\\nEach rector is wearing the distinctive uniform of his university. Therefore, the uniform's pockets cannot contain coins of denomination more than r_{i}. The rector also does not carry coins of denomination less than l_{i} in his pocket \u2014 because if everyone pays him with so small coins, they gather a lot of weight and the pocket tears. Therefore, a donation can be paid only by coins of denomination x berubleys, where l_{i} \u2264 x \u2264 r_{i} (Berland uses coins of any positive integer denomination). Alexey can use the coins of different denominations and he can use the coins of the same denomination any number of times. When Alexey was first confronted with such orders, he was puzzled because it turned out that not all universities can accept him! Alexey is very afraid of going into the army (even though he had long wanted to get the green uniform, but his dad says that the army bullies will beat his son and he cannot pay to ensure the boy's safety). So, Alexey wants to know for sure which universities he can enter so that he could quickly choose his alma mater.\\n\\nThanks to the parents, Alexey is not limited in money and we can assume that he has an unlimited number of coins of each type.\\n\\nIn other words, you are given t requests, each of them contains numbers n_{i}, l_{i}, r_{i}. For each query you need to answer, whether it is possible to gather the sum of exactly n_{i} berubleys using only coins with an integer denomination from l_{i} to r_{i} berubleys. You can use coins of different denominations. Coins of each denomination can be used any number of times.\\n\\n\\n-----Input-----\\n\\nThe first line contains the number of universities t, (1 \u2264 t \u2264 1000) Each of the next t lines contain three space-separated integers: n_{i}, l_{i}, r_{i} (1 \u2264 n_{i}, l_{i}, r_{i} \u2264 10^9;\u00a0l_{i} \u2264 r_{i}).\\n\\n\\n-----Output-----\\n\\nFor each query print on a single line: either \\\"Yes\\\", if Alexey can enter the university, or \\\"No\\\" otherwise.\\n\\n\\n-----Examples-----\\nInput\\n2\\n5 2 3\\n6 4 5\\n\\nOutput\\nYes\\nNo\\n\\n\\n\\n-----Note-----\\n\\nYou can pay the donation to the first university with two coins: one of denomination 2 and one of denomination 3 berubleys. The donation to the second university cannot be paid.\",\n  \"Ground Truth Solution\": \"t = int(input())\\nfor _ in range(t):\\n\\t(n, l, r) = map(int, input().split())\\n\\tprint('No' if n // l * r < n else 'Yes')\",\n  \"LLM CoT Steps Breakdown\": \"- Problem Understanding: The problem is to determine if a given amount 'n' can be formed using coins with denominations between 'l' and 'r', inclusive. We have an unlimited supply of each coin denomination.\\n- Identifying Core Logic: If 'n' can be paid using the smallest denomination 'l', then we can simply use 'n // l' coins of denomination 'l' and adjust with remaining amounts within the [l,r] range. In the case where using the maximum number of coins of the lowest denomination exceeds n, then we need to determine if it's even possible to approach n using r.\\n- Edge Case Consideration: Consider situations where n is smaller than l. In this scenario, it's impossible since we must use at least one coin from l to r.\\n- Mathematical Relationship: The core relationship to check is whether n can be achieved. The approach to solve this problem in an efficient way involves determining if 'n' can be equaled or exceeded by the lowest coin value without exceeding the donation limit 'n'.\",\n  \"LLM Questions\": [\n    \"What does it mean if n is less than l, given the constraints?\",\n    \"If the donation can be paid using coins of any value between l and r, what is a necessary (but not necessarily sufficient) condition for Alexey to enter the university?\",\n    \"How can you efficiently check if it is possible to form n using coins between l and r?\",\n    \"Consider the scenario where n is 7, l is 3 and r is 5. Explain how the algorithm would proceed to check if this donation can be made.\",\n    \"What does the expression 'n // l * r < n' signify in the context of the problem?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If n is less than l, it's impossible to form the donation amount because the smallest denomination Alexey can use is l.\",\n    \"A necessary condition is that the maximum possible value that can be formed using multiples of l with the maximum coin value r isn't less than n.\",\n    \"An efficient check is to determine if n can be created using the minimum denomination coins. If not, determine if the n can be exceeded by the lowest coin denominations.\",\n    \"First, calculate n // l, which is 7 // 3 = 2. Then multiply by r: 2 * 5 = 10. Since 10 > 7, then the donation can be made. Alexey can pay with one coin of 3 and one coin of 4 (3+4 =7), one coin of 2 and one coin of 5 (2+5 = 7) or with two coins of 3, a coin of 1, since l=3 to r=5 then 1 is not allowed.\",\n    \"The expression checks if, when maximizing the number of l denomination coins and topping it with the highest allowable denomination of r, results in an amount that is still less than the required donation amount n. If this is the case, then the amount cannot be fulfilled.\"\n  ]\n}\n```"