"```json\n{\n  \"Coding Problem\": \"Ketan and Dhruv are playing a very interesting game. They have 2 boxes - red and black. The red box contains all the natural numbers in increasing order(1,2,3,.....) and the black box contains all the natural numbers except \\\"1\\\" and each number is two times in the box in non-decreasing order(2,2,3,3,4,4,....).\\n\\nThe game is as follows :\\nIn his chance the player takes out 1 number from red box and two numbers from black box and multiplies them. The result is added to the previous sum. If this is the 1st chance the previous sum is 0. Each player plays alternatively and Dhruv always starts the game. The person to make last move wins. If first chance is not possible game ends in a draw.\\n\\nNote: You can only take out the numbers from top of the boxes.\\n\\nYou are given a number n, you need to find the number of chances such that achieved sum is strictly less than or equal to n. After that you need to tell the person who wins the game.\\n\\nInput Format:-\\n\\nFirst line contains t - number of test cases.\\n\\nNext t lines contain a single integer n.\\n\\nOutput Format:-\\n\\nTotal 2*t lines, the first line of each test case contains the number of chances the game lasts for c and the next line contains the winner of the game.\\n\\nIf the winner is Ketan print \\\"Ketan\\\", if Dhruv print \\\"Dhruv\\\" and id the game is Drawn print \\\"Draw\\\", all without quotes.\\n\\nConstrains:-\\n\\n1 \u2264 t \u2264 10^5\\n\\n1 \u2264 n \u2264 10^17\\n\\nAuthor :- Nikhil Tekwani\\n\\nSAMPLE INPUT\\n2\\n3\\n7\\n\\nSAMPLE OUTPUT\\n0\\nDraw\\n1\\nDhruv\\n\\nExplanation\\n\\nFor the first test case, if Dhruv makes a move the sum becomes 1x2x2 = 4, which is greater than 3, thus no 1 is able to make a move and the game ends in a draw.\\n\\nFor the second test case, if Dhruv makes a move the sum becomes 1x2x2 = 4, and if Ketan makes a move the sum becomes 4 + 2x3x3 = 22. Since 4<7<22. Dhruv wins ans total chances is 1.\",\n  \"Ground Truth Solution\": \"from bisect import bisect_left, bisect\\n\\nresult = [(n*(n+1)*(n+2)*(3*n+5))/12 for n in range(25150)]\\n\\nfor _ in range(eval(input())):\\n\\tn = int(input())\\n\\tpos = bisect(result,n)\\n\\tif pos <= 1:\\n\\t\\tprint(\\\"0\\\\nDraw\\\")\\n\\telif pos&1:\\n\\t\\tprint(pos-1)\\n\\t\\tprint(\\\"Ketan\\\")\\n\\telse:\\n\\t\\tprint(pos-1)\\n\\t\\tprint(\\\"Dhruv\\\")\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the game rules: The game involves two players, Ketan and Dhruv, and two boxes, red and black, containing numbers. Players take turns selecting numbers from each box (1 from red, 2 from black), multiplying them, and adding the result to a running sum. The goal is to keep the running sum less than or equal to a given number n.\\n- Determining the move order: Dhruv always starts the game.\\n- Identifying the winning condition: The last player to make a move wins. If no move is possible, the game is a draw.\\n- Calculating the sum after each move: In each move, the sum increases by the product of one number from the red box and two numbers from the black box. The numbers are always taken from the 'top' (smallest available).\\n- Finding the number of chances: Determine how many moves can be made such that the cumulative sum remains less than or equal to n.\\n- Determining the winner: Based on the number of chances, determine who made the last move (Dhruv or Ketan).\",\n  \"LLM Questions\": [\n    \"What is the initial state of the red and black boxes, and how do they change with each move?\",\n    \"How does the game end (win, lose, or draw), and what conditions determine each outcome?\",\n    \"How can the cumulative sum of the game be calculated after each move?\",\n    \"Given the constraint that numbers are taken from the 'top', how does this affect the selection process?\",\n    \"How can the number of possible moves be efficiently determined without simulating each move?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The red box initially contains natural numbers in increasing order (1, 2, 3,...), and the black box contains natural numbers (excluding 1) with each number appearing twice in non-decreasing order (2, 2, 3, 3, 4, 4,...). With each move, the smallest available number from each box is removed.\",\n    \"The game ends in a win if a player makes the last possible move such that the cumulative sum is less than or equal to n. It ends in a draw if the first player cannot make any move without exceeding n.\",\n    \"The cumulative sum after each move is calculated by adding the product of the numbers taken from the red and black boxes in that move to the previous sum. The sum starts at 0.\",\n    \"The 'top' constraint means that the smallest available number from the red box and the two smallest available numbers from the black box must be selected for each move. This ensures deterministic play given n.\",\n    \"Rather than simulating each move and checking the sum, we can precompute the cumulative sums possible and then binary search to determine the maximum number of turns possible within the constraint of n.\"\n  ]\n}\n```"