"```json\n{\n  \"Coding Problem\": \"You have n devices that you want to use simultaneously.\\n\\nThe i-th device uses a_{i} units of power per second. This usage is continuous. That is, in \u03bb seconds, the device will use \u03bb\u00b7a_{i} units of power. The i-th device currently has b_{i} units of power stored. All devices can store an arbitrary amount of power.\\n\\nYou have a single charger that can plug to any single device. The charger will add p units of power per second to a device. This charging is continuous. That is, if you plug in a device for \u03bb seconds, it will gain \u03bb\u00b7p units of power. You can switch which device is charging at any arbitrary unit of time (including real numbers), and the time it takes to switch is negligible.\\n\\nYou are wondering, what is the maximum amount of time you can use the devices until one of them hits 0 units of power.\\n\\nIf you can use the devices indefinitely, print -1. Otherwise, print the maximum amount of time before any one device hits 0 power.\\n\\n\\n-----Input-----\\n\\nThe first line contains two integers, n and p (1 \u2264 n \u2264 100 000, 1 \u2264 p \u2264 10^9)\u00a0\u2014 the number of devices and the power of the charger.\\n\\nThis is followed by n lines which contain two integers each. Line i contains the integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 100 000)\u00a0\u2014 the power of the device and the amount of power stored in the device in the beginning.\\n\\n\\n-----Output-----\\n\\nIf you can use the devices indefinitely, print -1. Otherwise, print the maximum amount of time before any one device hits 0 power.\\n\\nYour answer will be considered correct if its absolute or relative error does not exceed 10^{ - 4}.\\n\\nNamely, let's assume that your answer is a and the answer of the jury is b. The checker program will consider your answer correct if $\\\\frac{|a - b|}{\\\\operatorname{max}(1, b)} \\\\leq 10^{-4}$.\\n\\n\\n-----Examples-----\\nInput\\n2 1\\n2 2\\n2 1000\\n\\nOutput\\n2.0000000000\\nInput\\n1 100\\n1 1\\n\\nOutput\\n-1\\n\\nInput\\n3 5\\n4 3\\n5 2\\n6 1\\n\\nOutput\\n0.5000000000\\n\\n\\n-----Note-----\\n\\nIn sample test 1, you can charge the first device for the entire time until it hits zero power. The second device has enough power to last this time without being charged.\\n\\nIn sample test 2, you can use the device indefinitely.\\n\\nIn sample test 3, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\",\n  \"Ground Truth Solution\": \"def f(N, P, A, B):\\n\\tsa = sum(A) - P\\n\\tsb = sum(B)\\n\\tif sa <= 0:\\n\\t\\treturn -1\\n\\tAB = sorted([(A[i], B[i]) for i in range(N)], key=lambda x: -(x[1] / x[0]))\\n\\tsa = sum(A) - P\\n\\tsb = sum(B)\\n\\tfor (a, b) in AB:\\n\\t\\tif sa - a <= 0.0:\\n\\t\\t\\tcontinue\\n\\t\\tif (sb - b) / (sa - a) <= b / a:\\n\\t\\t\\tsb -= b\\n\\t\\t\\tsa -= a\\n\\treturn sb / sa\\n(N, P) = input().split(' ')\\nN = int(N)\\nP = float(P)\\nA = []\\nB = []\\nfor _ in range(N):\\n\\t(a, b) = [float(x) for x in input().split(' ')]\\n\\tA.append(a)\\n\\tB.append(b)\\nprint(f(N, P, A, B))\",\n  \"LLM CoT Steps Breakdown\": \"- Problem Description Understanding: The problem asks for the maximum time the devices can be used simultaneously before any one of them runs out of power. The charger adds power to one device at a time, and switching between devices is instantaneous.\\n- Infinite Usage Condition: If the sum of power consumption rates (a_i) of all devices is less than or equal to the charger's power (p), then devices can be used indefinitely (-1).\\n- Prioritization Strategy: If the charger power is insufficient to sustain indefinite usage, a greedy approach is used. This approach prioritizes charging devices with lower b_i/a_i ratios (i.e., those that run out of power faster relative to their current power).\\n- Iterative Time Calculation: The algorithm iterates through the devices sorted by the b_i/a_i ratio in descending order. In each iteration, it checks if it's optimal to stop charging the current device. If sum(a) - p <= 0, the devices last forever, so the answer is -1. If (sum(b)-b_i)/(sum(a)-p-a_i) <= b_i/a_i, the device i is left to drain by itself and the process repeats until either all devices are left to drain by themselves or the devices can function indefinitely.\\n- Final Time Calculation: The maximum time is equal to the sum of the remaining power divided by the remaining power consumption rate (sb / sa).\",\n  \"LLM Questions\": [\n    \"How do you determine if the devices can be used indefinitely, and what should the algorithm return in that case?\",\n    \"If the devices cannot be used indefinitely, how should the algorithm prioritize which device to charge to maximize usage time?\",\n    \"How do you handle the condition when removing a certain device from charger will result in lower overall time?\",\n    \"After prioritizing the charging, how do you calculate the maximum usage time based on the available power and power consumption rates of the remaining devices?\",\n    \"What is the significance of sorting devices by b_i/a_i ratios, and how does this contribute to an optimal charging strategy?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"If the sum of the power consumption rates of all devices is less than or equal to the charger's power (sum(a_i) <= p), then the devices can be used indefinitely. The algorithm should return -1.\",\n    \"The algorithm should prioritize charging the devices with the lowest b_i/a_i ratios, as these devices will run out of power the quickest relative to their current power, so they should be charged first.\",\n    \"When removing a certain device i from charging results in a lower overall time (i.e., `(sum(b)-b_i)/(sum(a)-p-a_i) <= b_i/a_i`), exclude it from the charging process. This is done to optimize the time before any device hits 0 power.\",\n    \"The maximum usage time is calculated by dividing the sum of remaining power by the sum of the power consumption rates of remaining devices minus the charger's power (sb / (sa - p)).\",\n    \"Sorting the devices by b_i/a_i ratios allows prioritizing devices that need power most urgently. A lower b_i/a_i means the device will run out of power relatively quickly given its current charge, so charging these devices first contributes to an optimal greedy strategy.\"\n  ]\n}\n```"