"```json\n{\n  \"Coding Problem\": \"Given an array of words and a width\\u00a0maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\\n\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\\n\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\\n\\nFor the last line of text, it should be left justified and no extra space is inserted between words.\\n\\nNote:\\n\\n\\n       A word is defined as a character sequence consisting\\u00a0of non-space characters only.\\n       Each word's length is\\u00a0guaranteed to be greater than 0 and not exceed maxWidth.\\n       The input array words\\u00a0contains at least one word.\\n\\n\\nExample 1:\\n\\n\\nInput:\\nwords = [\\\"This\\\", \\\"is\\\", \\\"an\\\", \\\"example\\\", \\\"of\\\", \\\"text\\\", \\\"justification.\\\"]\\nmaxWidth = 16\\nOutput:\\n[\\n\\u00a0 \\u00a0\\\"This \\u00a0 \\u00a0is \\u00a0 \\u00a0an\\\",\\n\\u00a0 \\u00a0\\\"example \\u00a0of text\\\",\\n\\u00a0 \\u00a0\\\"justification. \\u00a0\\\"\\n]\\n\\n\\nExample 2:\\n\\n\\nInput:\\nwords = [\\\"What\\\",\\\"must\\\",\\\"be\\\",\\\"acknowledgment\\\",\\\"shall\\\",\\\"be\\\"]\\nmaxWidth = 16\\nOutput:\\n[\\n\\u00a0 \\\"What \\u00a0 must \\u00a0 be\\\",\\n\\u00a0 \\\"acknowledgment \\u00a0\\\",\\n\\u00a0 \\\"shall be \\u00a0 \\u00a0 \\u00a0 \\u00a0\\\"\\n]\\nExplanation: Note that the last line is \\\"shall be    \\\" instead of \\\"shall     be\\\",\\n\\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0because the last line must be left-justified instead of fully-justified.\\n             Note that the second line is also left-justified becase it contains only one word.\\n\\n\\nExample 3:\\n\\n\\nInput:\\nwords = [\\\"Science\\\",\\\"is\\\",\\\"what\\\",\\\"we\\\",\\\"understand\\\",\\\"well\\\",\\\"enough\\\",\\\"to\\\",\\\"explain\\\",\\n\\u00a0 \\u00a0 \\u00a0 \\u00a0\\\"to\\\",\\\"a\\\",\\\"computer.\\\",\\\"Art\\\",\\\"is\\\",\\\"everything\\\",\\\"else\\\",\\\"we\\\",\\\"do\\\"]\\nmaxWidth = 20\\nOutput:\\n[\\n\\u00a0 \\\"Science \\u00a0is \\u00a0what we\\\",\\n  \\\"understand \\u00a0 \\u00a0 \\u00a0well\\\",\\n\\u00a0 \\\"enough to explain to\\\",\\n\\u00a0 \\\"a \\u00a0computer. \\u00a0Art is\\\",\\n\\u00a0 \\\"everything \\u00a0else \\u00a0we\\\",\\n\\u00a0 \\\"do \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0 \\u00a0\\\"\\n]\",\n  \"Ground Truth Solution\": \"class Solution:\\n\\n\\tdef fullJustify(self, words, maxWidth):\\n\\n\\t\\tdef make_str(buffer, length, last):\\n\\t\\t\\tif last:\\n\\t\\t\\t\\treturn ' '.join(buffer) + ' ' * (maxWidth - length)\\n\\t\\t\\tspace = maxWidth - (length - len(buffer) + 1)\\n\\t\\t\\tcnt = len(buffer) - 1\\n\\t\\t\\ttmp = ''\\n\\t\\t\\tif cnt == 0:\\n\\t\\t\\t\\ttmp = buffer[0] + ' ' * space\\n\\t\\t\\telse:\\n\\t\\t\\t\\tspaces = [space // cnt] * cnt\\n\\t\\t\\t\\tfor i in range(space % cnt):\\n\\t\\t\\t\\t\\tspaces[i] += 1\\n\\t\\t\\t\\tspaces.append(0)\\n\\t\\t\\t\\tfor (s, b) in zip(spaces, buffer):\\n\\t\\t\\t\\t\\ttmp += b + ' ' * s\\n\\t\\t\\treturn tmp\\n\\t\\tres = []\\n\\t\\tbuffer = []\\n\\t\\tlength = 0\\n\\t\\tfor w in words:\\n\\t\\t\\tlw = len(w)\\n\\t\\t\\tif lw > maxWidth:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif len(buffer) == 0:\\n\\t\\t\\t\\tbuffer.append(w)\\n\\t\\t\\t\\tlength = lw\\n\\t\\t\\telif length + lw + 1 <= maxWidth:\\n\\t\\t\\t\\tbuffer.append(w)\\n\\t\\t\\t\\tlength = length + lw + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ttmp = make_str(buffer, length, False)\\n\\t\\t\\t\\tres.append(tmp)\\n\\t\\t\\t\\tbuffer = [w]\\n\\t\\t\\t\\tlength = lw\\n\\t\\tif len(buffer) > 0:\\n\\t\\t\\ttmp = make_str(buffer, length, True)\\n\\t\\t\\tres.append(tmp)\\n\\t\\treturn res\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The objective is to take an array of words and a maximum width, then format the text to fit within the specified width, justifying each line. The approach should be greedy, packing as many words as possible into each line. The last line is left-justified.\\n- Handling Line Formation: Determine how to group words into lines, considering the maximum width constraint and the space required between words. Account for the last line's special left-justification rule.\\n- Space Distribution: Calculate how to distribute extra spaces evenly between words in a line. If the spaces don't divide evenly, allocate more spaces to the left side.\\n- Implementing Justification Logic: Develop a mechanism to add spaces between words to achieve full justification, except for the last line, which must be left-justified. Consider edge cases like a single word on a line.\",\n  \"LLM Questions\": [\n    \"How do you determine if a word can be added to the current line without exceeding the maximum width?\",\n    \"How do you calculate the number of spaces to insert between words for full justification, and how do you handle uneven distribution?\",\n    \"How do you ensure the last line is left-justified with no extra space between words?\",\n    \"What special conditions should you consider when dealing with a line containing only one word?\",\n    \"How do you construct each line's string, considering full justification (except the last line)?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Check if the current line length plus the length of the new word plus one (for the space) is less than or equal to the maximum width.\",\n    \"Calculate the total space needed by subtracting the length of all words from the maximum width, then divide by the number of gaps between words. If the remainder is not zero, distribute the extra spaces from left to right.\",\n    \"For the last line, concatenate the words with a single space between them and pad the end with spaces until the line length equals the maximum width.\",\n    \"A line with only one word must be left-justified, meaning you must pad the right side with spaces to reach the maximum width.\",\n    \"Build the line string by concatenating the words with the calculated spaces in between, ensuring that all lines except the last one are fully justified.\"\n  ]\n}\n```"