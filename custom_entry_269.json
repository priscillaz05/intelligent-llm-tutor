"```json\n{\n  \"Coding Problem\": \"After obtaining a lot of gold from capturing different kingdoms, King Kala buys a large area of land. N trees are planted on the land, numbered from 1 to N. Each tree i, has coordinates as Xi, Yi. King Kala has two sons who, as their father, are selfish. To divide the land between two sons, King Kala draws a partition line on the land which is given by three coefficients of the line equation A, B and C. Now, Prince Parmar, being the elder son got a chance to pick any one side. But he wants the side of the partition which contains the maximum number of trees. How many trees can he get?\\n\\nInput\\n\\nThe first line contains the number of test cases T. In each test case, the first line contains N. The next line contains three space separated integers A, B and C. The next N lines contain Xi, Yi which are the co-ordinates of N trees.\\n\\nOutput\\n\\nFor each test case, print the maximum number of trees which are completely on one side of the partition line.\\n\\nConstraints\\n\\n1 \u2264 T \u226410\\n1 \u2264 N \u2264 10^5\\n-100 \u2264 A,B \u2264 100\\n-10^5 \u2264 C, Xi, Yi \u2264 10^5\\n\\nSAMPLE INPUT\\n1\\n4\\n1 -1 0\\n2 1\\n1 3\\n4 2\\n3 3\\n\\nSAMPLE OUTPUT\\n2\",\n  \"Ground Truth Solution\": \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\nt=eval(input())\\nwhile t>0:\\n\\tt-=1\\n\\tn=eval(input())\\n\\ta,b,c=list(map(int,input().split()))\\n\\tp=0\\n\\tz=0\\n\\twhile n>0:\\n\\t\\tn-=1\\n\\t\\tx,y=list(map(int,input().split()))\\n\\t\\tif a*x+b*y+c>0:\\n\\t\\t\\tp+=1\\n\\t\\telif a*x+b*y+c<0:\\n\\t\\t\\tz+=1\\n\\tprint(max(p,z))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires determining the maximum number of trees that lie on one side of a given line. The line is defined by the equation A*X + B*Y + C = 0.\\n- Input Processing: The input consists of a number of test cases, N (number of trees), coefficients A, B, C of the line equation, and the coordinates (X, Y) of each tree.\\n- Algorithm Selection: For each tree, we can determine which side of the line it lies on by plugging its coordinates into the line equation. If A*X + B*Y + C > 0, the tree is on one side; if A*X + B*Y + C < 0, it's on the other side; and if A*X + B*Y + C = 0, it's on the line. We need to count the number of trees on each side and return the maximum of the two counts.\\n- Implementation Details: Iterate through each test case, read the number of trees N, the coefficients A, B, C, and then the coordinates X, Y for each tree. Maintain two counters, one for each side of the line. After processing all trees, return the maximum of the two counters.\",\n  \"LLM Questions\": [\n    \"How do you determine which side of the line a tree lies on given its coordinates and the line equation coefficients?\",\n    \"What approach would you take to handle multiple test cases within the input?\",\n    \"Are there any edge cases or specific constraints that you should consider during the calculation of the side on which each tree lies?\",\n    \"How do you efficiently count trees on each side of the line, and finally, which value needs to be returned?\",\n    \"What should be done if A*X + B*Y + C equals 0?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"You can substitute the coordinates (X, Y) of the tree into the line equation A*X + B*Y + C. The sign of the result determines which side of the line the tree lies on: positive means one side, negative means the other.\",\n    \"Use a loop that iterates T times, processing each test case independently within the loop.\",\n    \"The problem states that we need to calculate the maximum number of trees that are *completely* on one side. Should handle cases where A, B or C are zero and potential overflow issues with very large coordinates, though constraints should prevent that.\",\n    \"Maintain two separate counters, incrementing one for each tree depending on which side it lies on, and return the larger of these two counters. It asks the largest number of trees on either side.\",\n    \"The problem asks for the maximum number of trees on *one side* of the partition line. Trees such that A*X + B*Y + C = 0 should be ignored as they are directly on the partition line and cannot be counted in either side count.\"\n  ]\n}\n```"