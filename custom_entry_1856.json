"```json\n{\n  \"Coding Problem\": \"Gerald has n younger brothers and their number happens to be even. One day he bought n^2 candy bags. One bag has one candy, one bag has two candies, one bag has three candies and so on. In fact, for each integer k from 1 to n^2 he has exactly one bag with k candies. \\n\\nHelp him give n bags of candies to each brother so that all brothers got the same number of candies.\\n\\n\\n-----Input-----\\n\\nThe single line contains a single integer n (n is even, 2 \u2264 n \u2264 100) \u2014 the number of Gerald's brothers.\\n\\n\\n-----Output-----\\n\\nLet's assume that Gerald indexes his brothers with numbers from 1 to n. You need to print n lines, on the i-th line print n integers \u2014 the numbers of candies in the bags for the i-th brother. Naturally, all these numbers should be distinct and be within limits from 1 to n^2. You can print the numbers in the lines in any order. \\n\\nIt is guaranteed that the solution exists at the given limits.\\n\\n\\n-----Examples-----\\nInput\\n2\\n\\nOutput\\n1 4\\n2 3\\n\\n\\n-----Note-----\\n\\nThe sample shows Gerald's actions if he has two brothers. In this case, his bags contain 1, 2, 3 and 4 candies. He can give the bags with 1 and 4 candies to one brother and the bags with 2 and 3 to the other brother.\",\n  \"Ground Truth Solution\": \"def solve():\\n\\tn = int(input())\\n\\tmx = [[0] * n for _ in range(n)]\\n\\tfor i in range(n):\\n\\t\\tfor j in range(n):\\n\\t\\t\\tmx[i][j] = i * n + j + 1\\n\\tfor i in range(n):\\n\\t\\tans = []\\n\\t\\tfor j in range(n):\\n\\t\\t\\tans.append(mx[j][(i + j) % n])\\n\\t\\tprint(*ans)\\nsolve()\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to distribute n^2 candy bags, each with a unique number of candies from 1 to n^2, equally among n brothers, where n is even. Each brother should receive n bags, and the total candies each brother gets must be the same.\\n- Strategy: Pair the largest and smallest bags (1 and n^2), second largest and second smallest (2 and n^2-1), and so on. Distribute these pairs among the brothers to ensure an equal distribution of candies.\\n- Implementation: Read input n. Create a loop for each brother (from 1 to n). Within each brother's loop, assign n bags. Pair numbers i and n^2-i+1 and use those to fulfill the requirements. Since n is even, the total number of bags that will be paired (n) is also even, fulfilling that each brother gets the same number of candies.\",\n  \"LLM Questions\": [\n    \"How do you ensure each brother receives the same number of candies?\",\n    \"What is the total number of candies to be distributed, and how is this number related to n?\",\n    \"How can we generate distinct candy bag numbers for each brother within the constraints of the problem?\",\n    \"How would you efficiently determine which candy bags to allocate to which brother to ensure an equal distribution?\",\n    \"What edge cases or constraints should be considered when assigning candy bags to the brothers?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"By making sure each brother gets n bags, and that the sum of candies in each brother's bags are equal.\",\n    \"The total number of candies is the sum of integers from 1 to n^2, which can be calculated as n^2 * (n^2 + 1) / 2. This total must be evenly divisible among n brothers to satisfy the problem's condition.\",\n    \"Generate unique candy bag numbers by looping through each brother and assigning a combination of small and large value bags to ensure each bag is unique.\",\n    \"Pair the smallest and largest candy bags, second smallest and second largest, and so on. Distribute these pairs among the brothers so the sum of each brother's bags is equal.\",\n    \"Consider the constraint that n is even and the numbers must be within the range [1, n^2]. Ensure all candy bag numbers assigned to each brother are unique.\"\n  ]\n}\n```"