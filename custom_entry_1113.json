"```json\n{\n  \"Coding Problem\": \"Demonstrative competitions will be held in the run-up to the 20NN Berlatov Olympic Games. Today is the day for the running competition!\\n\\nBerlatov team consists of 2n runners which are placed on two running tracks; n runners are placed on each track. The runners are numbered from 1 to n on each track. The runner with number i runs through the entire track in i seconds.\\n\\nThe competition is held as follows: first runners on both tracks start running at the same time; when the slower of them arrives at the end of the track, second runners on both tracks start running, and everyone waits until the slower of them finishes running, and so on, until all n pairs run through the track.\\n\\nThe organizers want the run to be as long as possible, but if it lasts for more than k seconds, the crowd will get bored. As the coach of the team, you may choose any order in which the runners are arranged on each track (but you can't change the number of runners on each track or swap runners between different tracks).\\n\\nYou have to choose the order of runners on each track so that the duration of the competition is as long as possible, but does not exceed k seconds.\\n\\nFormally, you want to find two permutations p and q (both consisting of n elements) such that sum = \u2211_{i=1}^{n} max(p_i, q_i) is maximum possible, but does not exceed k. If there is no such pair, report about it.\\n\\nInput\\n\\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 n^2) \u2014 the number of runners on each track and the maximum possible duration of the competition, respectively.\\n\\nOutput\\n\\nIf it is impossible to reorder the runners so that the duration of the competition does not exceed k seconds, print -1. \\n\\nOtherwise, print three lines. The first line should contain one integer sum \u2014 the maximum possible duration of the competition not exceeding k. The second line should contain a permutation of n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i should be pairwise distinct) \u2014 the numbers of runners on the first track in the order they participate in the competition. The third line should contain a permutation of n integers q_1, q_2, ..., q_n (1 \u2264 q_i \u2264 n, all q_i should be pairwise distinct) \u2014 the numbers of runners on the second track in the order they participate in the competition. The value of sum = \u2211_{i=1}^{n} max(p_i, q_i) should be maximum possible, but should not exceed k. If there are multiple answers, print any of them.\\n\\nExamples\\n\\nInput\\n\\n\\n5 20\\n\\n\\nOutput\\n\\n\\n20\\n1 2 3 4 5 \\n5 2 4 3 1 \\n\\n\\nInput\\n\\n\\n3 9\\n\\n\\nOutput\\n\\n\\n8\\n1 2 3 \\n3 2 1 \\n\\n\\nInput\\n\\n\\n10 54\\n\\n\\nOutput\\n\\n\\n-1\\n\\nNote\\n\\nIn the first example the order of runners on the first track should be [5, 3, 2, 1, 4], and the order of runners on the second track should be [1, 4, 2, 5, 3]. Then the duration of the competition is max(5, 1) + max(3, 4) + max(2, 2) + max(1, 5) + max(4, 3) = 5 + 4 + 2 + 5 + 4 = 20, so it is equal to the maximum allowed duration.\\n\\nIn the first example the order of runners on the first track should be [2, 3, 1], and the order of runners on the second track should be [2, 1, 3]. Then the duration of the competition is 8, and it is the maximum possible duration for n = 3.\",\n  \"Ground Truth Solution\": \"(n, t) = [int(i) for i in input().split()]\\nimport os\\n\\ndef tr(qq):\\n\\treturn qq * (qq + 1) // 2\\nif t < tr(n):\\n\\tprint(-1)\\n\\texit()\\nupp = 2 * (tr(n) - tr(n // 2))\\nif n % 2 == 1:\\n\\tupp -= (n + 1) // 2\\nif t >= upp:\\n\\tos.write(1, (str(upp) + '\\\\n').encode())\\n\\tans = list(range(1, n + 1))\\n\\tos.write(1, (' '.join([str(a) for a in ans]) + '\\\\n').encode())\\n\\tans.reverse()\\n\\tos.write(1, (' '.join([str(a) for a in ans]) + '\\\\n').encode())\\n\\texit()\\nfor k in range(n // 2, n + 1):\\n\\tgoal = t - tr(n) + tr(k) - n\\n\\tlo = tr(k - 1)\\n\\thi = lo + (k - 1) * (n - k)\\n\\tif goal >= lo and goal <= hi:\\n\\t\\tex = goal - lo\\n\\t\\tp = ex // (k - 1)\\n\\t\\tq = ex % (k - 1)\\n\\t\\tansl = list(range(1 + p, k + p))\\n\\t\\tfor i in range(q):\\n\\t\\t\\tansl[k - 2 - i] += 1\\n\\t\\tansls = set(ansl)\\n\\t\\tansr = []\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif i not in ansls:\\n\\t\\t\\t\\tansr.append(i)\\n\\t\\tans = ansl + [n] + ansr\\n\\t\\tos.write(1, (str(t) + '\\\\n').encode())\\n\\t\\tos.write(1, (' '.join([str(a) for a in range(1, n + 1)]) + '\\\\n').encode())\\n\\t\\tos.write(1, (' '.join([str(a) for a in ans]) + '\\\\n').encode())\\n\\t\\texit()\\n1 // 0\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The core task is to arrange runners on two tracks to maximize the total time of the competition without exceeding a given limit 'k'. The competition's duration is determined by the sum of the maximum times for each pair of runners on the two tracks.\\n- Identifying Key Constraints: Recognize that the permutations must include all numbers from 1 to 'n' exactly once. Note the constraint that the calculated sum must not exceed 'k'.\\n- Algorithmic Approach: Consider strategies to find two permutations that maximize the sum of max(p_i, q_i) while staying within the bound 'k'. Explore edge cases and specific conditions that might lead to a -1 output if no valid permutations are found.\\n- Optimization Techniques: The code pre-computes triangular numbers to evaluate possible solutions effectively. It checks if the maximum achievable sum is less than 'k'. It iterates to find combinations to achieve or get closest to 'k'.\",\n  \"LLM Questions\": [\n    \"What is the objective function that you are trying to maximize, and what constraints must it satisfy?\",\n    \"How would you determine if it is impossible to find a valid arrangement of runners?\",\n    \"What is the significance of calculating triangular numbers in the given solution, and how do they contribute to optimizing the solution?\",\n    \"How does the code handle edge cases such as when 'k' is smaller than the sum of the first 'n' natural numbers?\",\n    \"Can you explain how the code constructs the two permutations, p and q, once a feasible solution is found?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The objective function is the sum of max(p_i, q_i) for i from 1 to n, where p and q are the two permutations. This sum must be maximized while being less than or equal to k.\",\n    \"It is impossible if the maximum possible duration (which is achieved when both permutations are the same and their sum is n(n+1)/2) is already greater than k. The code detects this with the condition `if t < tr(n):`.\",\n    \"Triangular numbers (tr(n) = n*(n+1)/2) are used to calculate the sum of the first n natural numbers. These sums represent the minimum possible duration of the race. The code uses tr(k) for some k to adjust permutations to come close to 't'.\",\n    \"If k is smaller than tr(n), which is the smallest possible sum, the code will print -1 and exit, indicating that no arrangement can satisfy the condition.\",\n    \"The code tries to form the permutations such that their sum equals 't'. It starts with the basic increasing sequence [1, 2, ..., n]. If that's too big, it swaps some numbers, mostly near the end. When it gets close to 't', it arranges the other numbers accordingly.\"\n  ]\n}\n```"