"```json\n{\n  \"Coding Problem\": \"Berland shop sells $n$ kinds of juices. Each juice has its price $c_i$. Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin \\\"A\\\", vitamin \\\"B\\\" and vitamin \\\"C\\\". Each juice can contain one, two or all three types of vitamins in it.\\n\\nPetya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $n$ $(1 \\\\le n \\\\le 1\\\\,000)$ \u2014 the number of juices.\\n\\nEach of the next $n$ lines contains an integer $c_i$ $(1 \\\\le c_i \\\\le 100\\\\,000)$ and a string $s_i$ \u2014 the price of the $i$-th juice and the vitamins it contains. String $s_i$ contains from $1$ to $3$ characters, and the only possible characters are \\\"A\\\", \\\"B\\\" and \\\"C\\\". It is guaranteed that each letter appears no more than once in each string $s_i$. The order of letters in strings $s_i$ is arbitrary.\\n\\n\\n-----Output-----\\n\\nPrint -1 if there is no way to obtain all three vitamins. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\\n\\n\\n-----Examples-----\\nInput\\n4\\n5 C\\n6 B\\n16 BAC\\n4 A\\n\\nOutput\\n15\\n\\nInput\\n2\\n10 AB\\n15 BA\\n\\nOutput\\n-1\\n\\nInput\\n5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\\n\\nOutput\\n13\\n\\nInput\\n6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\\n\\nOutput\\n250\\n\\nInput\\n2\\n5 BA\\n11 CB\\n\\nOutput\\n16\\n\\n\\n-----Note-----\\n\\nIn the first example Petya buys the first, the second and the fourth juice. He spends $5 + 6 + 4 = 15$ and obtains all three vitamins. He can also buy just the third juice and obtain three vitamins, but its cost is $16$, which isn't optimal.\",\n  \"Ground Truth Solution\": \"def minv(a, b=0, c=0):\\n\\tif a | b | c != 7:\\n\\t\\treturn mins\\n\\ts = opts[a] + opts[b] + opts[c]\\n\\treturn min(mins, s)\\nopts = [1000000] * 8\\nopts[0] = 0\\nfor _ in range(int(input())):\\n\\t(c, l) = input().split()\\n\\t(v, c) = (0, int(c))\\n\\tif 'A' in l:\\n\\t\\tv += 1\\n\\tif 'B' in l:\\n\\t\\tv += 2\\n\\tif 'C' in l:\\n\\t\\tv += 4\\n\\topts[v] = min(opts[v], c)\\nmins = 10000000\\nfor a in range(1, 8):\\n\\tmins = minv(a)\\n\\tfor b in range(a + 1, 8):\\n\\t\\tmins = minv(a, b)\\n\\t\\tfor c in range(b + 1, 8):\\n\\t\\t\\tmins = minv(a, b, c)\\nprint(-1 if mins >= 1000000 else mins)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks for the minimum cost to obtain vitamins A, B, and C by buying juices. Each juice has a price and a set of vitamins.\\n- Data Representation: Represent the presence of each vitamin using bits (A=1, B=2, C=4). This allows representing combinations of vitamins as integers from 0 to 7.\\n- Minimum Cost for Each Vitamin Set: Store the minimum cost to obtain each vitamin set (0 to 7) in an array `opts`. Initialize all costs to a large value (e.g., 1000000) except for the empty set (0), which is initialized to 0.\\n- Iterating Through Juices: Iterate through each juice, calculate the vitamin set it provides as an integer, and update the corresponding cost in the `opts` array with the minimum price seen so far for that vitamin set.\\n- Finding the Minimum Combination: After processing all juices, find the minimum cost to obtain all three vitamins. This can be done by considering all possible combinations of vitamin sets that together cover all three vitamins (A, B, and C). For instance, a juice with A, a juice with B, and a juice with C, or a juice with AB and a juice with C, etc.\\n- Calculating Minimum Cost: Calculate the cost for each valid combination of vitamin sets by summing the costs from the `opts` array. Return the minimum among these costs.\\n- Handling Impossible Cases: If no combination of juices provides all three vitamins, the minimum cost remains at its initial large value. In this case, return -1.\",\n  \"LLM Questions\": [\n    \"How can you efficiently represent the combination of vitamins a juice provides?\",\n    \"How do you initialize the costs of obtaining different combinations of vitamins, and why?\",\n    \"After reading all juices, how do you find the minimum cost to obtain all three vitamins?\",\n    \"What combinations of juices need to be checked to ensure Petya gets all three vitamins?\",\n    \"What should the program output if it is impossible to get all three vitamins from the given juices?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"You can represent the presence of each vitamin using bits (A=1, B=2, C=4), then calculate an integer representing the combination of vitamins.\",\n    \"Initialize the cost of each combination of vitamins to a very large number except the empty combination which is zero. This allows tracking the minimum possible cost.\",\n    \"Iterate through all possible combinations of vitamin sets that cover all three vitamins. Sum the minimum cost to get each of those sets, which are already stored.\",\n    \"You need to check combinations like {A, B, C}, {AB, C}, {BC, A}, {AC, B}, {ABC}, {AB, BC}, {AB, AC}, {BC, CA}, {AC, BC}, {AB, C}, {BC, A}, {CA, B}.\",\n    \"The program should output -1 if it's impossible to obtain all three vitamins from any combination of juices.\"\n  ]\n}\n```"