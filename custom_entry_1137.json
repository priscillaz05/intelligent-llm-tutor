"```json\n{\n  \"Coding Problem\": \"# Task\\n\\nWrite a function that accepts `msg` string and returns local tops of string from the highest to the lowest.  \\nThe string's tops are from displaying the string in the below way:\\n\\n```\\n\\n                                         7891012\\n                             TUWvXY      6     3\\n                   ABCDE     S    Z      5\\n           lmno    z   F     R    1      4\\n     abc   k  p    v   G     Q    2      3\\n.34..9 d...j  q....x   H.....P    3......2\\n125678 efghi  rstuwy   IJKLMNO    45678901\\n\\n```\\nThe next top is always 1 character higher than the previous one. \\nFor the above example, the solution for the `123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123` input string is `7891012TUWvXYABCDElmnoabc34`. \\n\\n- When the `msg` string is empty, return an empty string.\\n- The input strings may be very long. Make sure your solution has good performance.\\n- The (.)dots on the sample dispaly of string are only there to help you to understand the pattern  \\n\\nCheck the test cases for more samples.\\n\\n# Series\\n\\n- [String tops](https://www.codewars.com/kata/59b7571bbf10a48c75000070)\\n- [Square string tops](https://www.codewars.com/kata/5aa3e2b0373c2e4b420009af)\",\n  \"Ground Truth Solution\": \"def tops(msg):\\n\\tn = len(msg)\\n\\t(res, i, j, k) = ('', 2, 2, 7)\\n\\twhile i < n:\\n\\t\\tres = msg[i:i + j] + res\\n\\t\\t(i, j, k) = (i + k, j + 1, k + 4)\\n\\treturn res\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to extract characters from a string based on a specific pattern resembling the \\\"tops\\\" of a visual representation of the string. The distance between selected characters increases following a quadratic sequence.\\n- Identifying Key Variables: Notice the iterative process with `i`, `j`, and `k` changing in a predictable way.\\n- Selecting an Algorithmic Strategy: Think about using a while loop that picks characters according to the correct pattern, and concatenates them to the beginning of result string.\\n- Implementing the Pattern Logic: Increment the values properly in each iteration.\",\n  \"LLM Questions\": [\n    \"What is the pattern for selecting the characters from the given string?\",\n    \"How would you handle the case when the string is empty?\",\n    \"How are `i`, `j`, and `k` related to the pattern of selecting characters?\",\n    \"In what order do we concatenate characters to the result string?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The characters are selected based on a pattern where the index increases according to a quadratic-like sequence. The distance between selected characters increases with each step.\",\n    \"If the string is empty, return an empty string.\",\n    \"`i` is the current index from where we extract the characters. `j` tells you how many characters to extract from that position. `k` determines how much `i` will increase after the current extraction.\",\n    \"The characters must be concatenated at the beginning of the result to maintain order (from highest to lowest).\"\n  ]\n}\n```"