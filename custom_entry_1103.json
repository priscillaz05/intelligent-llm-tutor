"```json\n{\n  \"Coding Problem\": \"The company \\\"Divan's Sofas\\\" is planning to build $n + 1$ different buildings on a coordinate line so that:\\n\\nthe coordinate of each building is an integer number;\\n\\nno two buildings stand at the same point.\\n\\nLet $x_i$ be the coordinate of the $i$-th building. To get from the building $i$ to the building $j$, Divan spends $|x_i - x_j|$ minutes, where $|y|$ is the absolute value of $y$.\\n\\nAll buildings that Divan is going to build can be numbered from $0$ to $n$. The businessman will live in the building $0$, the new headquarters of \\\"Divan's Sofas\\\". In the first ten years after construction Divan will visit the $i$-th building $a_i$ times, each time spending $2 \\cdot |x_0-x_i|$ minutes for walking.\\n\\nDivan asks you to choose the coordinates for all $n + 1$ buildings so that over the next ten years the businessman will spend as little time for walking as possible.\\n\\n\\n-----Input-----\\n\\nEach test contains several test cases. The first line contains one integer number $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\\n\\nThe first line of each case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of buildings that \\\"Divan's Sofas\\\" is going to build, apart from the headquarters.\\n\\nThe second line contains the sequence $a_1, a_2, \\\\ldots, a_n$ ($0 \\le a_i \\le 10^6$), where $a_i$ is the number of visits to the $i$-th building.\\n\\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\\n\\n\\n-----Output-----\\n\\nFor each test case, on the first line print the number $T$ \u2014 the minimum time Divan will spend walking.\\n\\nOn the second line print the sequence $x_0, x_1, \\\\ldots, x_n$ of $n + 1$ integers, where $x_i$ ($-10^6 \\\\le x_i \\\\le 10^6$) is the selected coordinate of the $i$-th building. It can be shown that an optimal answer exists with coordinates not exceeding $10^6$.\\n\\nIf there are multiple answers, print any of them.\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n3\\n1 2 3\\n5\\n3 8 10 6 1\\n5\\n1 1 1 1 1\\n1\\n0\\nOutput\\n14\\n2 4 1 3\\n78\\n1 -1 0 2 3 4\\n18\\n3 6 1 5 2 4\\n0\\n1 2\\n\\n\\n-----Note-----\\n\\nLet's look at the first example.\\n\\nDivan will visit the first building $a_1 = 1$ times, the second $a_2 = 2$ times and the third $a_3 = 3$ times. Then one of the optimal solution will be as follows:\\n\\nthe headquarters is located in $x_0 = 2$;\\n\\n$x_1 = 4$: Divan will spend $2 \\cdot |x_0-x_1| \\cdot a_1 = 2 \\cdot |2-4| \\cdot 1 = 4$ minutes walking to the first building;\\n\\n$x_2 = 1$: Divan will spend $2 \\cdot |x_0-x_2| \\cdot a_2 = 2 \\cdot |2-1| \\cdot 2 = 4$ minutes walking to the second building;\\n\\n$x_3 = 3$: Divan will spend $2 \\cdot |x_0-x_3| \\cdot a_3 = 2 \\cdot |2-3| \\cdot 3 = 6$ minutes walking to the third building.\\n\\nIn total, Divan will spend $4 + 4 + 6 = 14$ minutes. It can be shown that it is impossible to arrange buildings so that the businessman spends less time.\\n\\nAmong others, $x = [1, 3, 2, 0]$, $x = [-5, -3, -6, -4]$ are also correct answers for the first example.\",\n  \"Ground Truth Solution\": \"class Input:\\n\\n\\tdef __init__(self, file=''):\\n\\t\\tself.file = file\\n\\t\\tif file:\\n\\t\\t\\tself.f = open(file, 'r')\\n\\t\\t\\tself.read = self.f.readline\\n\\t\\telse:\\n\\t\\t\\tself.read = input\\ninp = Input('')\\nt = int(inp.read())\\nfor _ in range(t):\\n\\tn = int(inp.read())\\n\\ta = list(map(int, inp.read().split(' ')))\\n\\tsorted_id = sorted(list(range(n)), key=lambda x: a[x], reverse=True)\\n\\tout_sum = sum([a[sorted_id[i]] * (i // 2 + 1) * 2 for i in range(n)])\\n\\torder = [i + 1 for i in list(reversed(sorted_id[1::2]))] + [0] + [j + 1 for j in sorted_id[::2]]\\n\\tout_arr = sorted(list(range(n + 1)), key=lambda x: order[x])\\n\\tprint(out_sum)\\n\\tprint(*out_arr)\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires minimizing the total walking time for Divan by strategically placing $n+1$ buildings along a line. Building 0 is Divan's headquarters. The time to travel between buildings $i$ and $j$ is $|x_i - x_j|$. Divan visits building $i$ $a_i$ times, each visit taking $2|x_0 - x_i|$ minutes.\\n- Strategy for Minimization:  The goal is to minimize $\\\\sum_{i=1}^{n} 2 a_i |x_0 - x_i|$. This can be achieved by placing the buildings with higher visit counts closer to the headquarters (building 0).\\n- Coordinate Assignment: A possible solution is to place the headquarters at coordinate 0. Then assign coordinates to other buildings based on visit counts, alternating positive and negative values.  Sort buildings by visit count in descending order. Assign coordinates $1, -1, 2, -2, ...$ to buildings in this sorted order.\\n- Calculating Total Walking Time: Total walking time will then be $\\\\sum_{i=1}^{n} 2 a_i |x_i|$.\\n- Output: Output the minimum total walking time and the assigned coordinates for each building.\",\n  \"LLM Questions\": [\n    \"How does the location of the headquarters (building 0) influence the total walking time?\",\n    \"What strategy can be used to place buildings to minimize the total walking time, given the visit counts?\",\n    \"If the headquarters is at coordinate 0, how can you efficiently assign coordinates to other buildings?\",\n    \"How can you calculate the total walking time after the coordinates have been assigned?\",\n    \"Is it necessary to consider all possible permutations of building locations to find the minimum walking time, or is there a more efficient method?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The location of the headquarters is the reference point for calculating walking time to all other buildings.  The farther the other buildings are from the headquarters, the more time is spent walking.\",\n    \"Buildings with higher visit counts should be placed closer to the headquarters to minimize the total walking time, since the walking time to those buildings contributes more to the overall sum.\",\n    \"Sort the buildings based on their visit counts in descending order. Then, assign the headquarters coordinate 0. Assign alternating positive and negative coordinates to other buildings in the sorted order: 1, -1, 2, -2, and so on. This places buildings with many visits close to headquarters.\",\n    \"Calculate the sum of $2 \\cdot a_i \\cdot |x_0 - x_i|$ for all $i$ from 1 to $n$. Since $x_0$ is at 0, the formula simplifies to $\\\\sum_{i=1}^{n} 2 a_i |x_i|$.\",\n    \"It is not necessary to consider all permutations. Sorting the buildings by visit count and placing the headquarters at 0, then assigning coordinates as described provides an optimal solution more efficiently.\"\n  ]\n}\n```"