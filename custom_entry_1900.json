"```json\n{\n  \"Coding Problem\": \"Alice and Bob are walking on an infinite straight street. Initially, both are at the position $X=0$ and they start walking in the direction of increasing $X$. After $N$ seconds, they stop. Let's denote Alice's speed and Bob's speed during the $i$-th of these seconds by $A_i$ and $B_i$ respectively.\\nSometimes, Alice and Bob walk together, i.e. with the same speed side by side. Let's define the weird distance as the total distance they walk this way. Find this weird distance.\\n\\n-----Input-----\\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\\n- The first line of each test case contains a single integer $N$.\\n- The second line contains $N$ space-separated integers $A_1, A_2, \\\\ldots, A_N$.\\n- The third line contains $N$ space-separated integers $B_1, B_2, \\\\ldots, B_N$.\\n\\n-----Output-----\\nFor each test case, print a single line containing one integer \u2015 the total weird distance. It can be proved that this distance is an integer.\\n\\n-----Constraints-----\\n- $1 \\\\le T \\\\le 20$\\n- $1 \\\\le N \\\\le 10^5$\\n- $1 \\\\le A_i \\\\le 10^5$ for each valid $i$\\n- $1 \\\\le B_i \\\\le 10^5$ for each valid $i$\\n- the sum of $N$ over all test cases does not exceed $10^6$\\n\\n-----Subtasks-----\\nSubtask #1 (30 points): $1 \\\\le N \\\\le 1,000$\\nSubtask #2 (70 points): original constraints\\n\\n-----Example Input-----\\n3\\n4\\n1 3 3 4\\n1 2 4 4\\n2\\n2 3\\n3 2\\n2\\n3 3\\n3 3\\n\\n-----Example Output-----\\n5\\n0\\n6\\n\\n-----Explanation-----\\nExample case 1:\\n- Alice and Bob walk side by side during the first second, from $X=0$ to $X=1$.\\n- Then, Alice starts walking faster than Bob, so they do not walk side by side during second $2$. At the end of second $2$, Alice is at $X=4$, while Bob is at $X=3$.\\n- During the next second, they again do not walk side by side, but Bob walks faster, so they both end up at $X=7$.\\n- During the last second, they both walk side by side and the distance they walk is $4$.\\n- Alice and Bob walk side by side during the $1$-st and $4$-th second and the total weird distance they travel is $1+4=5$.\\nExample case 2:\\n- First, Alice walks with speed $2$ and Bob walks with speed $3$, so they do not walk side by side. Alice ends up at $X=2$, while Bob ends up at $X=3$ at the end of the $1$-st second.\\n- Then, Alice walks with speed $3$ and Bob walks with speed $2$, so they do not walk side by side either.\\n- Although Alice and Bob both end up at $X=5$ at the end of the $2$-nd second, the weird distance is $0$.\\nExample case 3: We can see that Alice and Bob always walk together, so the weird distance is $3+3=6$.\",\n  \"Ground Truth Solution\": \"t = int(input())\\ni = 0\\nwhile t > i:\\n\\tn = int(input())\\n\\tm = list(map(int, input().split()))\\n\\tk = list(map(int, input().split()))\\n\\tj = 0\\n\\tl = 0\\n\\t(a, b) = (0, 0)\\n\\twhile j < n:\\n\\t\\tif m[j] == k[j] and a == b:\\n\\t\\t\\tl += m[j]\\n\\t\\ta += m[j]\\n\\t\\tb += k[j]\\n\\t\\tj += 1\\n\\tprint(l)\\n\\ti += 1\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem asks to compute the total \\\"weird distance\\\" Alice and Bob walk together. This is the sum of the speeds at each second when they walk at the same speed *and* are at the same location.\\n- Identifying Key Conditions: The distance is only accumulated when both Alice and Bob have the same speed during a given second *and* they are at the same position along the X axis.  The example cases are critical to understanding this point.\\n- Selecting Algorithmic Strategy: Iterate through the seconds. In each second, check if the speeds are equal. If they are, check if they are at the same position.  Keep track of each person's location. Accumulate the speed into the total weird distance if both conditions are met. Reset the position variable after each test case.\\n- Implementation Details: Read the input for each test case, including the number of seconds, Alice's speeds, and Bob's speeds. Use a loop to iterate through the seconds. Inside the loop, compare the speeds, and positions if the speeds are equal. Update position variables for both Alice and Bob, and the total weird distance.\",\n  \"LLM Questions\": [\n    \"What are the two conditions that must be met for Alice and Bob to contribute to the weird distance during a given second?\",\n    \"How should the positions of Alice and Bob be tracked as they walk?\",\n    \"If Alice and Bob have different speeds at a given second, what should happen?\",\n    \"What data structures are suitable for storing Alice's and Bob's speeds for each second?\",\n    \"How should the final 'weird distance' be printed for each test case?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"Both Alice and Bob must have the same speed, and they must be at the same position along the x-axis at the beginning of that second.\",\n    \"Keep track of each person's current location (X coordinate). After each second, update their location by adding their speed for that second.\",\n    \"If Alice and Bob have different speeds at a given second, they do not contribute to the weird distance for that second and their positions should be updated using the speeds.\",\n    \"Lists or arrays are suitable for storing Alice's and Bob's speeds for each second, indexed by the second number.\",\n    \"After processing all seconds for a test case, print the accumulated 'weird distance' on a new line.\"\n  ]\n}\n```"