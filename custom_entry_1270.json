"```json\n{\n  \"Coding Problem\": \"You are given three integers $n$, $a$, and $b$. Determine if there exist two permutations $p$ and $q$ of length $n$, for which the following conditions hold:\\n\\nThe length of the longest common prefix of $p$ and $q$ is $a$.\\n\\nThe length of the longest common suffix of $p$ and $q$ is $b$.\\n\\nA permutation of length $n$ is an array containing each integer from $1$ to $n$ exactly once. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\\n\\n\\n-----Input-----\\n\\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\\\leq t\\\\leq 10^4$) \u2014 the number of test cases. The description of test cases follows.\\n\\nThe only line of each test case contains three integers $n$, $a$, and $b$ ($1\\\\leq a,b\\\\leq n\\\\leq 100$).\\n\\n\\n-----Output-----\\n\\nFor each test case, if such a pair of permutations exists, output \\\"Yes\\\"; otherwise, output \\\"No\\\". You can output each letter in any case (upper or lower).\\n\\n\\n-----Examples-----\\n\\nInput\\n4\\n1 1 1\\n2 1 2\\n3 1 1\\n4 1 1\\nOutput\\nYes\\nNo\\nNo\\nYes\\n\\n\\n-----Note-----\\n\\nIn the first test case, $[1]$ and $[1]$ form a valid pair.\\n\\nIn the second test case and the third case, we can show that such a pair of permutations doesn't exist.\\n\\nIn the fourth test case, $[1,2,3,4]$ and $[1,3,2,4]$ form a valid pair.\",\n  \"Ground Truth Solution\": \"import sys\\nR = sys.stdin.readline\\nfor _ in range(int(R())):\\n\\t(n, a, b) = map(int, R().split())\\n\\tprint('Yes' if a == b == n or a + b < n - 1 else 'No')\",\n  \"LLM CoT Steps Breakdown\": \"- Understand the Problem: The problem asks whether two permutations of length 'n' can exist such that they have a common prefix of length 'a' and a common suffix of length 'b'.\\n- Identify Key Constraints: Both 'a' and 'b' must be between 1 and 'n' inclusive. The core task involves determining the existence, not constructing the permutations.\\n- Devise a Logical Condition: Consider when it's impossible to create such permutations. If 'a + b' is too large relative to 'n', there won't be enough room for the permutations to differ. The two permutations must be different. If a = b = n, it is possible if two permutations are the same. If a + b >= n, then the two permutations must equal at least one element in the middle, which creates a constraint.\\n- Derive the Condition for Existence: The permutations can exist if either a == b == n (the two permutations are the same) or a + b < n - 1. The last condition arises because we need at least 2 elements to be different, one for prefix and one for suffix. n - (a + b) > 1 so n - 1 > a + b.\\n- Edge Cases: The examples provide valuable edge cases to validate the solution. E.g., n=1, a=1, b=1 should return 'Yes'; n=2, a=1, b=2 should return 'No'; n=4, a=1, b=1 should return 'Yes'.\",\n  \"LLM Questions\": [\n    \"What are the extreme conditions for a and b relative to n that would make constructing such permutations impossible?\",\n    \"How does the relationship between 'a', 'b', and 'n' determine whether such permutations can exist?\",\n    \"Could you elaborate on why the a + b < n - 1 condition guarantees the existence of such permutations?\",\n    \"What if n = 1, would it be possible to form two different permutations that fulfill the conditions?\",\n    \"Are there cases other than a + b < n - 1 or a == b == n where permutations can be formed?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The most extreme condition is when a + b is greater than or equal to n. This limits the available positions to make the permutations different in the middle.\",\n    \"The sum of 'a' and 'b' relative to 'n' defines the overlap and the available space for the permutations to differ. A larger sum reduces the flexibility to create distinct permutations.\",\n    \"a + b < n - 1 guarantees there are at least two differing elements between the common prefix and suffix. This space is necessary to ensure the permutations are distinct.\",\n    \"If n=1 and a=1 and b=1. We can construct two same permutations. Hence it should return yes.\",\n    \"No, these are the only conditions under which the permutations can be formed.  If a+b >= n, there won't be enough difference between permutations, or if a != n or b != n then a+b needs to < n-1\"\n  ]\n}\n```"