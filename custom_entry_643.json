"```json\n{\n  \"Coding Problem\": \"Assume that a, b, and n are all positive integers. Let f (i) be the i-th fraction of the fraction a / b (0 \u2264 f (i) \u2264 9). At this time, let s be the sum of f (i) from i = 1 to n.\\n\\ns = f (1) + f (2) + ... + f (n)\\n\\n\\nCreate a program that reads a, b, n, outputs s, and exits.\\n\\n\\n\\nInput\\n\\nThe input consists of multiple datasets. For each dataset, three integers a (1 \u2264 a \u2264 1000), b (1 \u2264 b \u2264 10000), n (1 \u2264 n \u2264 100) are given on one line, separated by blanks.\\n\\nThe number of datasets does not exceed 100.\\n\\nOutput\\n\\nPrints s on one line for each dataset.\\n\\nExample\\n\\nInput\\n\\n1 2 3\\n2 3 4\\n5 4 3\\n4 3 2\\n\\n\\nOutput\\n\\n5\\n24\\n7\\n6\",\n  \"Ground Truth Solution\": \"while 1:\\n\\ttry:\\n\\t\\t(a, b, c) = map(int, input().split())\\n\\texcept:\\n\\t\\tbreak\\n\\tprint(sum((a * 10 ** (i + 1) // b % 10 for i in range(c))))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem: The problem requires calculating the sum of the first n digits after the decimal point in the decimal representation of the fraction a/b.\\n- Choosing an Algorithm: Since the problem requires calculating the digits of a fraction, a suitable approach is to simulate long division to obtain the decimal digits.\\n- Handling Multiple Datasets: The input contains multiple datasets, so the program must process each dataset until there is no more input.\\n- Optimizations: Since we only need the first n digits, we can use the modulo operator to avoid extremely large numbers.\",\n  \"LLM Questions\": [\n    \"How can we simulate the calculation of digits after the decimal point for a fraction a/b?\",\n    \"How do you handle multiple inputs in this scenario?\",\n    \"What's the purpose of the modulo operator in the ground truth solution?\",\n    \"How do you convert the input string into integer?\",\n    \"How do you handle the end of the input stream?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"We can simulate long division by multiplying the remainder by 10 and then dividing by the denominator. The quotient is the next digit.\",\n    \"We can continuously read input until an exception is raised, indicating the end of the input.\",\n    \"The modulo operator (%) is used to extract the last digit after the division.\",\n    \"Use map(int, input().split()) to parse the integers from a single line of input.\",\n    \"Catch EOFError or similar exceptions to terminate the processing loop when the input stream ends.\"\n  ]\n}\n```"