"```json\n{\n  \"Coding Problem\": \"Let's denote a $k$-step ladder as the following structure: exactly $k + 2$ wooden planks, of which\\n\\n  two planks of length at least $k+1$ \u2014 the base of the ladder;  $k$ planks of length at least $1$ \u2014 the steps of the ladder; \\n\\nNote that neither the base planks, nor the steps planks are required to be equal.\\n\\nFor example, ladders $1$ and $3$ are correct $2$-step ladders and ladder $2$ is a correct $1$-step ladder. On the first picture the lengths of planks are $[3, 3]$ for the base and $[1]$ for the step. On the second picture lengths are $[3, 3]$ for the base and $[2]$ for the step. On the third picture lengths are $[3, 4]$ for the base and $[2, 3]$ for the steps. \\n\\n $H - 1 =$\\n\\nYou have $n$ planks. The length of the $i$-th planks is $a_i$. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \\\"ladder\\\" from the planks.\\n\\nThe question is: what is the maximum number $k$ such that you can choose some subset of the given planks and assemble a $k$-step ladder using them?\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer $T$ ($1 \\\\le T \\\\le 100$) \u2014 the number of queries. The queries are independent.\\n\\nEach query consists of two lines. The first line contains a single integer $n$ ($2 \\\\le n \\\\le 10^5$) \u2014 the number of planks you have.\\n\\nThe second line contains $n$ integers $a_1, a_2, \\\\dots, a_n$ ($1 \\\\le a_i \\\\le 10^5$) \u2014 the lengths of the corresponding planks.\\n\\nIt's guaranteed that the total number of planks from all queries doesn't exceed $10^5$.\\n\\n\\n-----Output-----\\n\\nPrint $T$ integers \u2014 one per query. The $i$-th integer is the maximum number $k$, such that you can choose some subset of the planks given in the $i$-th query and assemble a $k$-step ladder using them.\\n\\nPrint $0$ if you can't make even $1$-step ladder from the given set of planks.\\n\\n\\n-----Example-----\\nInput\\n4\\n4\\n1 3 1 3\\n3\\n3 3 2\\n5\\n2 3 3 4 2\\n3\\n1 1 2\\n\\nOutput\\n2\\n1\\n2\\n0\\n\\n\\n-----Note-----\\n\\nExamples for the queries $1-3$ are shown at the image in the legend section.\\n\\nThe Russian meme to express the quality of the ladders:\\n\\n [Image]\",\n  \"Ground Truth Solution\": \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = [int(x) for x in input().split()]\\n\\tl.sort()\\n\\ta = l[-1]\\n\\tb = l[-2]\\n\\tif a <= 1 or b <= 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(min(b - 1, n - 2))\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Requirements: Recognize that a $k$-step ladder requires two planks of length at least $k+1$ and $k$ planks of length at least $1$. The problem is to find the maximum possible value of $k$ given a set of planks.\\n- Identifying Constraints: The planks cannot be cut, and we must use a subset of the given planks. The number of planks is limited.\\n- Selecting an Algorithmic Strategy: Sort the planks in ascending order. The two largest planks are the best candidates for the base. The value of $k$ is limited by the second largest plank's length minus one and the number of remaining planks. If either of the two largest planks are not greater than 1, then it's impossible to construct a ladder.\\n- Edge Cases: Account for cases where $n < 2$ (although input specifies $n >= 2$, it's worth considering), cases where either of the two largest planks are $<= 1$.\",\n  \"LLM Questions\": [\n    \"What are the conditions required to build a $k$-step ladder?\",\n    \"How should the planks be preprocessed to easily identify the base planks?\",\n    \"How can the maximum value of $k$ be calculated once the base planks are identified?\",\n    \"What edge cases need to be considered, and what should the output be in those cases?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"A $k$-step ladder requires two planks of length at least $k+1$ and $k$ planks of length at least 1.\",\n    \"The planks should be sorted. The two largest planks are potential candidates for the base.\",\n    \"If 'a' and 'b' are the lengths of the two largest planks (a >= b), then 'k+1 <= b' which means 'k <= b-1'. The available step planks are 'n-2'.  So 'k = min(b - 1, n - 2)'\",\n    \"If either of the two largest planks have a length of 1 or less, no ladder can be constructed, so the result should be 0.\"\n  ]\n}\n```"