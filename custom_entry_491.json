"```json\n{\n  \"Coding Problem\": \"Two semifinals have just been in the running tournament. Each semifinal had n participants. There are n participants advancing to the finals, they are chosen as follows: from each semifinal, we choose k people (0 \u2264 2k \u2264 n) who showed the best result in their semifinals and all other places in the finals go to the people who haven't ranked in the top k in their semifinal but got to the n - 2k of the best among the others.\\n\\nThe tournament organizers hasn't yet determined the k value, so the participants want to know who else has any chance to get to the finals and who can go home.\\n\\n\\n-----Input-----\\n\\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of participants in each semifinal.\\n\\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 10^9)\u00a0\u2014 the results of the i-th participant (the number of milliseconds he needs to cover the semifinals distance) of the first and second semifinals, correspondingly. All results are distinct. Sequences a_1, a_2, ..., a_{n} and b_1, b_2, ..., b_{n} are sorted in ascending order, i.e. in the order the participants finished in the corresponding semifinal.\\n\\n\\n-----Output-----\\n\\nPrint two strings consisting of n characters, each equals either \\\"0\\\" or \\\"1\\\". The first line should correspond to the participants of the first semifinal, the second line should correspond to the participants of the second semifinal. The i-th character in the j-th line should equal \\\"1\\\" if the i-th participant of the j-th semifinal has any chances to advance to the finals, otherwise it should equal a \\\"0\\\".\\n\\n\\n-----Examples-----\\nInput\\n4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\\n\\nOutput\\n1110\\n1100\\n\\nInput\\n4\\n9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\\n\\nOutput\\n1100\\n1100\\n\\n\\n-----Note-----\\n\\nConsider the first sample. Each semifinal has 4 participants. The results of the first semifinal are 9840, 9860, 9930, 10040. The results of the second semifinal are 9920, 9980, 10020, 10090.  If k = 0, the finalists are determined by the time only, so players 9840, 9860, 9920 and 9930 advance to the finals.  If k = 1, the winners from both semifinals move to the finals (with results 9840 and 9920), and the other places are determined by the time (these places go to the sportsmen who run the distance in 9860 and 9930 milliseconds).  If k = 2, then first and second places advance from each seminfial, these are participants with results 9840, 9860, 9920 and 9980 milliseconds.\",\n  \"Ground Truth Solution\": \"n = int(input())\\na = [None] * n\\nb = [None] * n\\nfor i in range(n):\\n\\t(a[i], b[i]) = map(int, input().split())\\nfor i in range(n):\\n\\tif i < n // 2 or a[i] < b[n - i - 1]:\\n\\t\\tprint(1, end='')\\n\\telse:\\n\\t\\tprint(0, end='')\\nprint()\\nfor i in range(n):\\n\\tif i < n // 2 or b[i] < a[n - i - 1]:\\n\\t\\tprint(1, end='')\\n\\telse:\\n\\t\\tprint(0, end='')\",\n  \"LLM CoT Steps Breakdown\": \"- Understanding the Problem Constraints: The problem describes a tournament selection process where participants from two semifinals compete for spots in the finals. The selection involves choosing the top 'k' performers from each semifinal and then filling the remaining spots with the fastest participants overall, regardless of their semifinal. The task is to determine, for each participant, whether there's a scenario (a value of 'k') where they can advance to the finals.\\n- Identifying Edge Cases and Conditions: Consider the range of possible 'k' values (0 to n/2). Think about when a participant is guaranteed a spot (e.g., among the fastest overall or always in the top k for some k). Identify conditions that eliminate a participant's chance (e.g., consistently slow compared to others). Notice that the input arrays are already sorted.\\n- Devising a Logical Condition: Consider when each participant can advance to the final. Participant i from team A advances if i is in the top k for some k. Or if i is not in the top k, then i's time must be less than n - 2k  other times. This is equivalent to a[i] being less than some element in array B.  Specifically, the worst case would be if i is not among the first k from group A, that means a[i] is not among the top k from group A. Therefore, a[i] must be less than the nth - k element from group B. Iterating for different values of k, we find that it's enough to check if a[i] < b[n - i -1]. This condition covers that a[i] is good enough when k is large enough so that the best overall n-2k comes from the B list before a[i]. Also, if i < n //2 it will always be true because you can always choose k = i, thus a[i] will be chosen.\\n- Constructing the Final Solution:  Iterate through each participant in both semifinals and apply the condition `i < n // 2 or a[i] < b[n - i - 1]` for the first semifinal and `i < n // 2 or b[i] < a[n - i - 1]` for the second semifinal. Print '1' if the condition is met; otherwise, print '0'.\",\n  \"LLM Questions\": [\n    \"What is the problem asking you to determine, and what are the key factors influencing a participant's chance of advancing to the finals?\",\n    \"What is the range of possible values for 'k', and how does changing 'k' affect the composition of the finalists?\",\n    \"Can you identify specific scenarios or conditions that guarantee a participant's advancement or eliminate their chances altogether?\",\n    \"Based on the conditions, what is the logical condition for a participant to advance to the final?\",\n    \"How can you efficiently check this condition for each participant and produce the required output strings?\"\n  ],\n  \"Expected Answers to LLM Questions\": [\n    \"The problem asks to determine, for each participant, whether there is any possible value of k that allows them to advance to the finals. The key factors are their individual performance in their semifinal and the overall performance of participants from both semifinals.\",\n    \"The value 'k' can range from 0 to n/2, where n is the number of participants in each semifinal. Changing 'k' alters how many finalists are selected from each semifinal directly, which in turn affects the selection of the remaining finalists based on overall performance.\",\n    \"A participant is guaranteed advancement if they are always in the top k for any value of k (i.e., they have a very fast time) or if they're among the fastest overall participants regardless of the value of k. Conversely, a participant is eliminated if their time is consistently slower than others, regardless of k.\",\n    \"A participant i from the first semifinal can advance if  i < n // 2 (always selected from the first k) or a[i] < b[n - i - 1] (their time is fast enough to qualify as one of the best overall when not selected from top k).  The second condition means that the time for a[i] from the first semifinal is less than someone with the n-i-1 rank on the second semifinal list.\",\n    \"Iterate through each participant. For each participant in the first semifinal, check if i < n // 2 or a[i] < b[n - i - 1]. If true, print '1'; otherwise, print '0'. Repeat this process for each participant in the second semifinal, using the condition i < n // 2 or b[i] < a[n - i - 1].\"\n  ]\n}\n```"